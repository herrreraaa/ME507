
TERMPROJ_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b79c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba2c  0800ba2c  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba34  0800ba34  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800ba3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000334  0800bd70  00020334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800bd70  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac1e  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc7  00000000  00000000  0003af82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019482  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196f6  00000000  00000000  00059ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000977e5  00000000  00000000  000731b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a99d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe0  00000000  00000000  0010a9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000334 	.word	0x20000334
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b924 	.word	0x0800b924

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000338 	.word	0x20000338
 80001dc:	0800b924 	.word	0x0800b924

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b08f      	sub	sp, #60	; 0x3c
 8000b94:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f001 f9fd 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f8ef 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 fc65 	bl	800146c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba2:	f000 f949 	bl	8000e38 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ba6:	f000 f975 	bl	8000e94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000baa:	f000 fa27 	bl	8000ffc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bae:	f000 fab7 	bl	8001120 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000bb2:	f000 fbb9 	bl	8001328 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000bb6:	f000 fc05 	bl	80013c4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bba:	f000 fc2d 	bl	8001418 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000bbe:	f000 fb43 	bl	8001248 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //**Initialize the ultrasonic sensor
  	  //Start the time that will trigger the sensor to send an echo
  	  UltraSonicStartPulse(htim10);
 8000bc2:	4e61      	ldr	r6, [pc, #388]	; (8000d48 <main+0x1b8>)
 8000bc4:	466d      	mov	r5, sp
 8000bc6:	f106 0410 	add.w	r4, r6, #16
 8000bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bda:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000be2:	f005 f859 	bl	8005c98 <UltraSonicStartPulse>
  	  //Wait for the response by starting timer 4 CH 4 on interrupt mode
  	  UltraSonicPrepInterrupt(htim4);
 8000be6:	4e59      	ldr	r6, [pc, #356]	; (8000d4c <main+0x1bc>)
 8000be8:	466d      	mov	r5, sp
 8000bea:	f106 0410 	add.w	r4, r6, #16
 8000bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c06:	f005 f85f 	bl	8005cc8 <UltraSonicPrepInterrupt>


  //**Initialize the time of flight sensor
  	  //i2c address
  	  Dev->I2cHandle = &hi2c1;
 8000c0a:	4b51      	ldr	r3, [pc, #324]	; (8000d50 <main+0x1c0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a51      	ldr	r2, [pc, #324]	; (8000d54 <main+0x1c4>)
 8000c10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  	  Dev->I2cDevAddr = 0x52;
 8000c14:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <main+0x1c0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2252      	movs	r2, #82	; 0x52
 8000c1a:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

  	  //Test xshut pin (standby pin)
  	  HAL_GPIO_WritePin(GPIOB, XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	484d      	ldr	r0, [pc, #308]	; (8000d58 <main+0x1c8>)
 8000c24:	f001 fcfa 	bl	800261c <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 8000c28:	2014      	movs	r0, #20
 8000c2a:	f001 fa25 	bl	8002078 <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOB, XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2120      	movs	r1, #32
 8000c32:	4849      	ldr	r0, [pc, #292]	; (8000d58 <main+0x1c8>)
 8000c34:	f001 fcf2 	bl	800261c <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 8000c38:	2014      	movs	r0, #20
 8000c3a:	f001 fa1d 	bl	8002078 <HAL_Delay>

  	  // VL53L0X init for Single Measurement
  	  VL53L0X_WaitDeviceBooted( Dev );
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <main+0x1c0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 fc60 	bl	8006508 <VL53L0X_WaitDeviceBooted>
  	  VL53L0X_DataInit( Dev );
 8000c48:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <main+0x1c0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f005 f951 	bl	8005ef4 <VL53L0X_DataInit>
  	  VL53L0X_StaticInit( Dev );
 8000c52:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <main+0x1c0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 fad2 	bl	8006200 <VL53L0X_StaticInit>
  	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000c5c:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <main+0x1c0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3e      	ldr	r2, [pc, #248]	; (8000d5c <main+0x1cc>)
 8000c62:	493f      	ldr	r1, [pc, #252]	; (8000d60 <main+0x1d0>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f006 f995 	bl	8006f94 <VL53L0X_PerformRefCalibration>
  	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <main+0x1c0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a3d      	ldr	r2, [pc, #244]	; (8000d64 <main+0x1d4>)
 8000c70:	493d      	ldr	r1, [pc, #244]	; (8000d68 <main+0x1d8>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f006 fea8 	bl	80079c8 <VL53L0X_PerformRefSpadManagement>
  	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <main+0x1c0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 fd06 	bl	8006690 <VL53L0X_SetDeviceMode>

  	  // Enable/Disable Sigma and Signal check
  	  //this block was included in example code found
  	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <main+0x1c0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f005 ff7b 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
  	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <main+0x1c0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2201      	movs	r2, #1
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f005 ff74 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
  	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <main+0x1c0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f641 1299 	movw	r2, #6553	; 0x1999
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 f81c 	bl	8006ce8 <VL53L0X_SetLimitCheckValue>
  	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <main+0x1c0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 f814 	bl	8006ce8 <VL53L0X_SetLimitCheckValue>
  	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <main+0x1c0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fd3f 	bl	800674c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <main+0x1c0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 fd5e 	bl	8006798 <VL53L0X_SetVcselPulsePeriod>
  	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <main+0x1c0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	220e      	movs	r2, #14
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f005 fd57 	bl	8006798 <VL53L0X_SetVcselPulsePeriod>

  	  //Start motor driver timers
  	  //RHS TIMERS
  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000cea:	2108      	movs	r1, #8
 8000cec:	481f      	ldr	r0, [pc, #124]	; (8000d6c <main+0x1dc>)
 8000cee:	f003 f99f 	bl	8004030 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	481d      	ldr	r0, [pc, #116]	; (8000d6c <main+0x1dc>)
 8000cf6:	f003 f99b 	bl	8004030 <HAL_TIM_PWM_Start>

  	  //LHS TIMERS
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	481c      	ldr	r0, [pc, #112]	; (8000d70 <main+0x1e0>)
 8000cfe:	f003 f997 	bl	8004030 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d02:	2104      	movs	r1, #4
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <main+0x1e0>)
 8000d06:	f003 f993 	bl	8004030 <HAL_TIM_PWM_Start>
  	  stop_RHS();
  	  */


  	  //Initialize encoder timers
  	  HAL_TIM_Base_Start_IT(&htim2); //RHS CH1&2
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <main+0x1dc>)
 8000d0c:	f003 f8de 	bl	8003ecc <HAL_TIM_Base_Start_IT>
  	  HAL_TIM_Base_Start_IT(&htim3); //LHS CH3&4
 8000d10:	4817      	ldr	r0, [pc, #92]	; (8000d70 <main+0x1e0>)
 8000d12:	f003 f8db 	bl	8003ecc <HAL_TIM_Base_Start_IT>

  	  //Initialize interrupts
  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d16:	2100      	movs	r1, #0
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <main+0x1dc>)
 8000d1a:	f003 fa89 	bl	8004230 <HAL_TIM_IC_Start_IT>
  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4812      	ldr	r0, [pc, #72]	; (8000d6c <main+0x1dc>)
 8000d22:	f003 fa85 	bl	8004230 <HAL_TIM_IC_Start_IT>

  	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000d26:	2108      	movs	r1, #8
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <main+0x1e0>)
 8000d2a:	f003 fa81 	bl	8004230 <HAL_TIM_IC_Start_IT>
  	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000d2e:	210c      	movs	r1, #12
 8000d30:	480f      	ldr	r0, [pc, #60]	; (8000d70 <main+0x1e0>)
 8000d32:	f003 fa7d 	bl	8004230 <HAL_TIM_IC_Start_IT>

  	  HAL_UART_Transmit(&huart1, "TEST\r\n",sizeof("TEST\r\n"),50);
 8000d36:	2332      	movs	r3, #50	; 0x32
 8000d38:	2207      	movs	r2, #7
 8000d3a:	490e      	ldr	r1, [pc, #56]	; (8000d74 <main+0x1e4>)
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <main+0x1e8>)
 8000d3e:	f004 fc36 	bl	80055ae <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 FollowLine2();
 8000d42:	f001 f891 	bl	8001e68 <FollowLine2>
 8000d46:	e7fc      	b.n	8000d42 <main+0x1b2>
 8000d48:	200004c4 	.word	0x200004c4
 8000d4c:	2000047c 	.word	0x2000047c
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000350 	.word	0x20000350
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	20000782 	.word	0x20000782
 8000d60:	20000781 	.word	0x20000781
 8000d64:	20000780 	.word	0x20000780
 8000d68:	2000077c 	.word	0x2000077c
 8000d6c:	200003ec 	.word	0x200003ec
 8000d70:	20000434 	.word	0x20000434
 8000d74:	0800b93c 	.word	0x0800b93c
 8000d78:	2000050c 	.word	0x2000050c

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f00a f95e 	bl	800b04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xb4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xb4>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xb4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <SystemClock_Config+0xb8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <SystemClock_Config+0xb8>)
 8000dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <SystemClock_Config+0xb8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fbc5 	bl	800357c <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000df8:	f000 fc28 	bl	800164c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fe27 	bl	8003a6c <HAL_RCC_ClockConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e24:	f000 fc12 	bl	800164c <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3750      	adds	r7, #80	; 0x50
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e3e:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x58>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e76:	f001 fbeb 	bl	8002650 <HAL_I2C_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e80:	f000 fbe4 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000350 	.word	0x20000350
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	000186a0 	.word	0x000186a0

08000e94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00a f8bd 	bl	800b04c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed2:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000ed4:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <MX_TIM1_Init+0x164>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1920-1;
 8000ed8:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000eda:	f240 727f 	movw	r2, #1919	; 0x77f
 8000ede:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000ee8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000eec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f00:	483c      	ldr	r0, [pc, #240]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000f02:	f003 f845 	bl	8003f90 <HAL_TIM_PWM_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f000 fb9e 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f10:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000f12:	f003 f93d 	bl	8004190 <HAL_TIM_IC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 fb96 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000f30:	f004 fa1c 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000f3a:	f000 fb87 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2360      	movs	r3, #96	; 0x60
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000f64:	f003 fc22 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000f6e:	f000 fb6d 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f76:	2204      	movs	r2, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000f7c:	f003 fc16 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000f86:	f000 fb61 	bl	800164c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000fa4:	f003 fb66 	bl	8004674 <HAL_TIM_IC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000fae:	f000 fb4d 	bl	800164c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000fd6:	f004 fa37 	bl	8005448 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000fe0:	f000 fb34 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM1_Init+0x160>)
 8000fe6:	f000 fce1 	bl	80019ac <HAL_TIM_MspPostInit>

}
 8000fea:	bf00      	nop
 8000fec:	3758      	adds	r7, #88	; 0x58
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200003a4 	.word	0x200003a4
 8000ff8:	40010000 	.word	0x40010000

08000ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	; 0x38
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <MX_TIM2_Init+0x120>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1.6-1;
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <MX_TIM2_Init+0x120>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <MX_TIM2_Init+0x120>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <MX_TIM2_Init+0x120>)
 8001042:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <MX_TIM2_Init+0x120>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <MX_TIM2_Init+0x120>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001054:	4831      	ldr	r0, [pc, #196]	; (800111c <MX_TIM2_Init+0x120>)
 8001056:	f003 f89b 	bl	8004190 <HAL_TIM_IC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001060:	f000 faf4 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <MX_TIM2_Init+0x120>)
 8001066:	f002 ff93 	bl	8003f90 <HAL_TIM_PWM_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001070:	f000 faec 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001080:	4619      	mov	r1, r3
 8001082:	4826      	ldr	r0, [pc, #152]	; (800111c <MX_TIM2_Init+0x120>)
 8001084:	f004 f972 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800108e:	f000 fadd 	bl	800164c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001092:	230a      	movs	r3, #10
 8001094:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <MX_TIM2_Init+0x120>)
 80010ac:	f003 fae2 	bl	8004674 <HAL_TIM_IC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80010b6:	f000 fac9 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2204      	movs	r2, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <MX_TIM2_Init+0x120>)
 80010c4:	f003 fad6 	bl	8004674 <HAL_TIM_IC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80010ce:	f000 fabd 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d2:	2360      	movs	r3, #96	; 0x60
 80010d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_TIM2_Init+0x120>)
 80010ea:	f003 fb5f 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80010f4:	f000 faaa 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	220c      	movs	r2, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM2_Init+0x120>)
 8001100:	f003 fb54 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 800110a:	f000 fa9f 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM2_Init+0x120>)
 8001110:	f000 fc4c 	bl	80019ac <HAL_TIM_MspPostInit>

}
 8001114:	bf00      	nop
 8001116:	3738      	adds	r7, #56	; 0x38
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200003ec 	.word	0x200003ec

08001120 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08e      	sub	sp, #56	; 0x38
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001150:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <MX_TIM3_Init+0x120>)
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <MX_TIM3_Init+0x124>)
 8001154:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1.6-1;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <MX_TIM3_Init+0x120>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b38      	ldr	r3, [pc, #224]	; (8001240 <MX_TIM3_Init+0x120>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <MX_TIM3_Init+0x120>)
 8001164:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001168:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <MX_TIM3_Init+0x120>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <MX_TIM3_Init+0x120>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <MX_TIM3_Init+0x120>)
 8001178:	f002 ff0a 	bl	8003f90 <HAL_TIM_PWM_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001182:	f000 fa63 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001186:	482e      	ldr	r0, [pc, #184]	; (8001240 <MX_TIM3_Init+0x120>)
 8001188:	f003 f802 	bl	8004190 <HAL_TIM_IC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001192:	f000 fa5b 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a2:	4619      	mov	r1, r3
 80011a4:	4826      	ldr	r0, [pc, #152]	; (8001240 <MX_TIM3_Init+0x120>)
 80011a6:	f004 f8e1 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011b0:	f000 fa4c 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b4:	2360      	movs	r3, #96	; 0x60
 80011b6:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_TIM3_Init+0x120>)
 80011ce:	f003 faed 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80011d8:	f000 fa38 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2204      	movs	r2, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <MX_TIM3_Init+0x120>)
 80011e6:	f003 fae1 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80011f0:	f000 fa2c 	bl	800164c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011f4:	230a      	movs	r3, #10
 80011f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2208      	movs	r2, #8
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_TIM3_Init+0x120>)
 800120c:	f003 fa32 	bl	8004674 <HAL_TIM_IC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8001216:	f000 fa19 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	220c      	movs	r2, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM3_Init+0x120>)
 8001222:	f003 fa27 	bl	8004674 <HAL_TIM_IC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 800122c:	f000 fa0e 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM3_Init+0x120>)
 8001232:	f000 fbbb 	bl	80019ac <HAL_TIM_MspPostInit>

}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000434 	.word	0x20000434
 8001244:	40000400 	.word	0x40000400

08001248 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_TIM4_Init+0xd8>)
 8001274:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_TIM4_Init+0xdc>)
 8001276:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_TIM4_Init+0xd8>)
 800127a:	220f      	movs	r2, #15
 800127c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_TIM4_Init+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_TIM4_Init+0xd8>)
 8001286:	f242 720f 	movw	r2, #9999	; 0x270f
 800128a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_TIM4_Init+0xd8>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_TIM4_Init+0xd8>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001298:	4821      	ldr	r0, [pc, #132]	; (8001320 <MX_TIM4_Init+0xd8>)
 800129a:	f002 fdc7 	bl	8003e2c <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80012a4:	f000 f9d2 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0318 	add.w	r3, r7, #24
 80012b2:	4619      	mov	r1, r3
 80012b4:	481a      	ldr	r0, [pc, #104]	; (8001320 <MX_TIM4_Init+0xd8>)
 80012b6:	f003 fb3b 	bl	8004930 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012c0:	f000 f9c4 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012c4:	4816      	ldr	r0, [pc, #88]	; (8001320 <MX_TIM4_Init+0xd8>)
 80012c6:	f002 ff63 	bl	8004190 <HAL_TIM_IC_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 f9bc 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	480f      	ldr	r0, [pc, #60]	; (8001320 <MX_TIM4_Init+0xd8>)
 80012e4:	f004 f842 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80012ee:	f000 f9ad 	bl	800164c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012f2:	230a      	movs	r3, #10
 80012f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	220c      	movs	r2, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_TIM4_Init+0xd8>)
 800130a:	f003 f9b3 	bl	8004674 <HAL_TIM_IC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001314:	f000 f99a 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000047c 	.word	0x2000047c
 8001324:	40000800 	.word	0x40000800

08001328 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_TIM10_Init+0x94>)
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <MX_TIM10_Init+0x98>)
 8001344:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_TIM10_Init+0x94>)
 8001348:	220f      	movs	r2, #15
 800134a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_TIM10_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_TIM10_Init+0x94>)
 8001354:	f242 720f 	movw	r2, #9999	; 0x270f
 8001358:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_TIM10_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_TIM10_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <MX_TIM10_Init+0x94>)
 8001368:	f002 fd60 	bl	8003e2c <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001372:	f000 f96b 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_TIM10_Init+0x94>)
 8001378:	f002 fe0a 	bl	8003f90 <HAL_TIM_PWM_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001382:	f000 f963 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001386:	2360      	movs	r3, #96	; 0x60
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM10_Init+0x94>)
 800139e:	f003 fa05 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013a8:	f000 f950 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM10_Init+0x94>)
 80013ae:	f000 fafd 	bl	80019ac <HAL_TIM_MspPostInit>

}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200004c4 	.word	0x200004c4
 80013c0:	40014400 	.word	0x40014400

080013c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <MX_USART1_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013fc:	f004 f88a 	bl	8005514 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001406:	f000 f921 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000050c 	.word	0x2000050c
 8001414:	40011000 	.word	0x40011000

08001418 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART6_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART6_UART_Init+0x4c>)
 8001450:	f004 f860 	bl	8005514 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f8f7 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000550 	.word	0x20000550
 8001468:	40011400 	.word	0x40011400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <MX_GPIO_Init+0xa8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a22      	ldr	r2, [pc, #136]	; (8001514 <MX_GPIO_Init+0xa8>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_GPIO_Init+0xa8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_GPIO_Init+0xa8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <MX_GPIO_Init+0xa8>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <MX_GPIO_Init+0xa8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_GPIO_Init+0xa8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <MX_GPIO_Init+0xa8>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_GPIO_Init+0xa8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <MX_GPIO_Init+0xac>)
 80014ec:	f000 fefa 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINSEN_RHS_Pin LINSEN_LHS_Pin TOF_Pin XSHUT_Pin */
  GPIO_InitStruct.Pin = LINSEN_RHS_Pin|LINSEN_LHS_Pin|TOF_Pin|XSHUT_Pin;
 80014f0:	f248 4330 	movw	r3, #33840	; 0x8430
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_GPIO_Init+0xb0>)
 8001506:	f000 feed 	bl	80022e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020800 	.word	0x40020800
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	//Check if ultrasonic timer capture triggered the interrupt
	if (htim->Instance == htim4.Instance){
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d147      	bne.n	80015c4 <HAL_TIM_IC_CaptureCallback+0xa4>
		if (ULTSENstate == 1){//Capture the end of the pulse
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d13a      	bne.n	80015b2 <HAL_TIM_IC_CaptureCallback+0x92>
			UltraSonicCalcDist(htim);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f004 fbe5 	bl	8005d0c <UltraSonicCalcDist>
			ULTSENdist_prev = ULTSENdist;
 8001542:	4b35      	ldr	r3, [pc, #212]	; (8001618 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a35      	ldr	r2, [pc, #212]	; (800161c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001548:	6013      	str	r3, [r2, #0]
			ULTSENdist = UltraSonicGetDist(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f004 fbd2 	bl	8005cf4 <UltraSonicGetDist>
 8001550:	4603      	mov	r3, r0
 8001552:	4a31      	ldr	r2, [pc, #196]	; (8001618 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001554:	6013      	str	r3, [r2, #0]
			if (ULTSENdist > 100*ULTSENdist_prev && ULTSENfirst_meas != 0){
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2264      	movs	r2, #100	; 0x64
 800155c:	fb03 f202 	mul.w	r2, r3, r2
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d20b      	bcs.n	8001580 <HAL_TIM_IC_CaptureCallback+0x60>
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x100>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_TIM_IC_CaptureCallback+0x60>
				ULTSENstate = 0;
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
				ULTSENdist = ULTSENdist_prev;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e021      	b.n	80015c4 <HAL_TIM_IC_CaptureCallback+0xa4>
			}
			else{ //Take first measurement
				ULTSENstate = 0;
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
				if (ULTSENfirst_meas = 0){
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
					ULTSENfirst_meas = 1;
				}
				if (ULTSENdist < 100000){//Check if distance is unreasonable
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d816      	bhi.n	80015c4 <HAL_TIM_IC_CaptureCallback+0xa4>
					sprintf(MSG,"Distance away: %ld mil\r\n", ULTSENdist);
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4922      	ldr	r1, [pc, #136]	; (8001628 <HAL_TIM_IC_CaptureCallback+0x108>)
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80015a0:	f009 ffe0 	bl	800b564 <siprintf>
					HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	2228      	movs	r2, #40	; 0x28
 80015a8:	4920      	ldr	r1, [pc, #128]	; (800162c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80015aa:	4821      	ldr	r0, [pc, #132]	; (8001630 <HAL_TIM_IC_CaptureCallback+0x110>)
 80015ac:	f003 ffff 	bl	80055ae <HAL_UART_Transmit>
 80015b0:	e008      	b.n	80015c4 <HAL_TIM_IC_CaptureCallback+0xa4>
				}
			}

		}
		else{//Capture the leading edge of the pulse
			UltraSonicCalcDist(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f004 fbaa 	bl	8005d0c <UltraSonicCalcDist>
			ULTSENstate++;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80015c2:	701a      	strb	r2, [r3, #0]
		//sprintf(MSG,"Interrupt Triggered\r\n");
		//HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
	}

	//Encoder
	if (htim->Instance == htim2.Instance){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x114>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d10a      	bne.n	80015e6 <HAL_TIM_IC_CaptureCallback+0xc6>
		uint16_t ENCR = enc_display_pulses_RHS(htim);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fc1d 	bl	8001e10 <enc_display_pulses_RHS>
 80015d6:	4603      	mov	r3, r0
 80015d8:	81fb      	strh	r3, [r7, #14]
		sprintf(ENCR_MSG,"RHS ENC: %ld\r\n",ENCR);
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	461a      	mov	r2, r3
 80015de:	4916      	ldr	r1, [pc, #88]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x118>)
 80015e0:	4816      	ldr	r0, [pc, #88]	; (800163c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80015e2:	f009 ffbf 	bl	800b564 <siprintf>
		//HAL_UART_Transmit(&huart1, ENCR_MSG, sizeof(ENCR_MSG), 100);
		//HAL_UART_Transmit(&huart1, "RHS\r\n", sizeof("RHS\r\n"), 100);
	}
	if (htim->Instance == htim3.Instance){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x120>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d10a      	bne.n	8001608 <HAL_TIM_IC_CaptureCallback+0xe8>
		uint16_t ENCL = enc_display_pulses_LHS(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fbe0 	bl	8001db8 <enc_display_pulses_LHS>
 80015f8:	4603      	mov	r3, r0
 80015fa:	81bb      	strh	r3, [r7, #12]
		sprintf(ENCL_MSG,"LHS ENC: %ld\r\n",ENCL);
 80015fc:	89bb      	ldrh	r3, [r7, #12]
 80015fe:	461a      	mov	r2, r3
 8001600:	4910      	ldr	r1, [pc, #64]	; (8001644 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001604:	f009 ffae 	bl	800b564 <siprintf>
		//HAL_UART_Transmit(&huart1, ENCL_MSG, sizeof(ENCL_MSG), 100);
		//HAL_UART_Transmit(&huart1, "LHS\r\n", sizeof("LHS\r\n"), 100);
	}
		//HAL_UART_Transmit(&huart1, "B\r\n",sizeof("B\r\n"),50);

}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000047c 	.word	0x2000047c
 8001614:	200005c4 	.word	0x200005c4
 8001618:	200005bc 	.word	0x200005bc
 800161c:	200005c0 	.word	0x200005c0
 8001620:	200005c5 	.word	0x200005c5
 8001624:	0001869f 	.word	0x0001869f
 8001628:	0800b944 	.word	0x0800b944
 800162c:	20000594 	.word	0x20000594
 8001630:	2000050c 	.word	0x2000050c
 8001634:	200003ec 	.word	0x200003ec
 8001638:	0800b960 	.word	0x0800b960
 800163c:	200007a8 	.word	0x200007a8
 8001640:	20000434 	.word	0x20000434
 8001644:	0800b970 	.word	0x0800b970
 8001648:	20000784 	.word	0x20000784

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_MspInit+0x4c>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x4c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x4c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_I2C_MspInit+0x84>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12b      	bne.n	8001722 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_I2C_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_I2C_MspInit+0x88>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_I2C_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ea:	2312      	movs	r3, #18
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f6:	2304      	movs	r3, #4
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <HAL_I2C_MspInit+0x8c>)
 8001702:	f000 fdef 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_I2C_MspInit+0x88>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_I2C_MspInit+0x88>)
 8001710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_I2C_MspInit+0x88>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40005400 	.word	0x40005400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020400 	.word	0x40020400

08001738 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a36      	ldr	r2, [pc, #216]	; (8001830 <HAL_TIM_PWM_MspInit+0xf8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12d      	bne.n	80017b6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MAGSEN_Pin;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MAGSEN_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <HAL_TIM_PWM_MspInit+0x100>)
 80017b0:	f000 fd98 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017b4:	e038      	b.n	8001828 <HAL_TIM_PWM_MspInit+0xf0>
  else if(htim_pwm->Instance==TIM3)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a20      	ldr	r2, [pc, #128]	; (800183c <HAL_TIM_PWM_MspInit+0x104>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d133      	bne.n	8001828 <HAL_TIM_PWM_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_TIM_PWM_MspInit+0xfc>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_2_Pin|M2_1_Pin;
 80017f8:	2303      	movs	r3, #3
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001808:	2302      	movs	r3, #2
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <HAL_TIM_PWM_MspInit+0x108>)
 8001814:	f000 fd66 	bl	80022e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	201d      	movs	r0, #29
 800181e:	f000 fd2a 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001822:	201d      	movs	r0, #29
 8001824:	f000 fd43 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40010000 	.word	0x40010000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40000400 	.word	0x40000400
 8001840:	40020400 	.word	0x40020400

08001844 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d133      	bne.n	80018ce <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_TIM_IC_MspInit+0x94>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_TIM_IC_MspInit+0x94>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_TIM_IC_MspInit+0x94>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_TIM_IC_MspInit+0x94>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_TIM_IC_MspInit+0x94>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_IC_MspInit+0x94>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M3_1_Pin|M3_2_Pin;
 800189e:	2322      	movs	r3, #34	; 0x22
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <HAL_TIM_IC_MspInit+0x98>)
 80018ba:	f000 fd13 	bl	80022e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	201c      	movs	r0, #28
 80018c4:	f000 fcd7 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c8:	201c      	movs	r0, #28
 80018ca:	f000 fcf0 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_TIM_Base_MspInit+0xbc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d135      	bne.n	800196e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ULTSEN_INPUT_Pin;
 800193a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800194c:	2302      	movs	r3, #2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTSEN_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4813      	ldr	r0, [pc, #76]	; (80019a4 <HAL_TIM_Base_MspInit+0xc4>)
 8001958:	f000 fcc4 	bl	80022e4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	201e      	movs	r0, #30
 8001962:	f000 fc88 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001966:	201e      	movs	r0, #30
 8001968:	f000 fca1 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800196c:	e012      	b.n	8001994 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM10)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0xc8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d10d      	bne.n	8001994 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001986:	6453      	str	r3, [r2, #68]	; 0x44
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_TIM_Base_MspInit+0xc0>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40000800 	.word	0x40000800
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40014400 	.word	0x40014400

080019ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_TIM_MspPostInit+0x144>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11f      	bne.n	8001a0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM2_Pin|M1_PWM1_Pin;
 80019ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	483c      	ldr	r0, [pc, #240]	; (8001af8 <HAL_TIM_MspPostInit+0x14c>)
 8001a08:	f000 fc6c 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001a0c:	e06b      	b.n	8001ae6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a16:	d11e      	bne.n	8001a56 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a34      	ldr	r2, [pc, #208]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M3_PWM1_Pin|M3_PWM2_Pin;
 8001a34:	230c      	movs	r3, #12
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a44:	2301      	movs	r3, #1
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	482a      	ldr	r0, [pc, #168]	; (8001af8 <HAL_TIM_MspPostInit+0x14c>)
 8001a50:	f000 fc48 	bl	80022e4 <HAL_GPIO_Init>
}
 8001a54:	e047      	b.n	8001ae6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_TIM_MspPostInit+0x150>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d11e      	bne.n	8001a9e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	4a22      	ldr	r2, [pc, #136]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_PWM1_Pin|M2_PWM2_Pin;
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <HAL_TIM_MspPostInit+0x14c>)
 8001a98:	f000 fc24 	bl	80022e4 <HAL_GPIO_Init>
}
 8001a9c:	e023      	b.n	8001ae6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_TIM_MspPostInit+0x154>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d11e      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_TIM_MspPostInit+0x148>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_TIM_MspPostInit+0x158>)
 8001ae2:	f000 fbff 	bl	80022e4 <HAL_GPIO_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	3730      	adds	r7, #48	; 0x30
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40014400 	.word	0x40014400
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	; 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <HAL_UART_MspInit+0x128>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d14b      	bne.n	8001bc2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a32      	ldr	r2, [pc, #200]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b90:	2307      	movs	r3, #7
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4827      	ldr	r0, [pc, #156]	; (8001c38 <HAL_UART_MspInit+0x130>)
 8001b9c:	f000 fba2 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4820      	ldr	r0, [pc, #128]	; (8001c3c <HAL_UART_MspInit+0x134>)
 8001bbc:	f000 fb92 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bc0:	e031      	b.n	8001c26 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART6)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_UART_MspInit+0x138>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d12c      	bne.n	8001c26 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	6453      	str	r3, [r2, #68]	; 0x44
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c16:	2308      	movs	r3, #8
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0x130>)
 8001c22:	f000 fb5f 	bl	80022e4 <HAL_GPIO_Init>
}
 8001c26:	bf00      	nop
 8001c28:	3730      	adds	r7, #48	; 0x30
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40011000 	.word	0x40011000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40011400 	.word	0x40011400

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 f9d2 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM2_IRQHandler+0x10>)
 8001c9e:	f002 fbe1 	bl	8004464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200003ec 	.word	0x200003ec

08001cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM3_IRQHandler+0x10>)
 8001cb2:	f002 fbd7 	bl	8004464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000434 	.word	0x20000434

08001cc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM4_IRQHandler+0x10>)
 8001cc6:	f002 fbcd 	bl	8004464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000047c 	.word	0x2000047c

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f009 f968 	bl	800afd8 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20020000 	.word	0x20020000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200007cc 	.word	0x200007cc
 8001d3c:	20000848 	.word	0x20000848

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d80:	4c0b      	ldr	r4, [pc, #44]	; (8001db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8e:	f7ff ffd7 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f009 f927 	bl	800afe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7fe fefb 	bl	8000b90 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8001da8:	0800ba3c 	.word	0x0800ba3c
  ldr r2, =_sbss
 8001dac:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001db0:	20000844 	.word	0x20000844

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <enc_display_pulses_LHS>:


/*!
 * Keeps track of the left hand side motor's encoder count from the provided timer handle. Resets to 0 after a full roation.
 */
uint16_t enc_display_pulses_LHS(TIM_HandleTypeDef* htim){ //this function goes inside the interrupt
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

	//if (htim->Instance == htim3.Instance)
	//{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel 3 or 4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7f1b      	ldrb	r3, [r3, #28]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d003      	beq.n	8001dd0 <enc_display_pulses_LHS+0x18>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7f1b      	ldrb	r3, [r3, #28]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d114      	bne.n	8001dfa <enc_display_pulses_LHS+0x42>
		{

				if (ENCL < 1250){	//this encoder provides a resolution of 20 pulses per rotation
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <enc_display_pulses_LHS+0x54>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d805      	bhi.n	8001de8 <enc_display_pulses_LHS+0x30>
					ENCL++;		//count the pulses
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <enc_display_pulses_LHS+0x54>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <enc_display_pulses_LHS+0x54>)
 8001de6:	801a      	strh	r2, [r3, #0]
				}
				if (ENCL == 1250){	//once 20 pulses are reached
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <enc_display_pulses_LHS+0x54>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d102      	bne.n	8001dfa <enc_display_pulses_LHS+0x42>
					ENCL = 0;	//reset the counter
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <enc_display_pulses_LHS+0x54>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]
				}

		}return ENCL;
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <enc_display_pulses_LHS+0x54>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]

}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	200007d0 	.word	0x200007d0

08001e10 <enc_display_pulses_RHS>:

/*!
 * Keeps track of the right hand side motor's encoder count from the provided timer handle. Resets to 0 after a full roation.
 */
uint16_t enc_display_pulses_RHS(TIM_HandleTypeDef* htim){
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel 3 or 4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7f1b      	ldrb	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d003      	beq.n	8001e28 <enc_display_pulses_RHS+0x18>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7f1b      	ldrb	r3, [r3, #28]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d114      	bne.n	8001e52 <enc_display_pulses_RHS+0x42>
		{

				if (ENCR < 1250){
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <enc_display_pulses_RHS+0x54>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d805      	bhi.n	8001e40 <enc_display_pulses_RHS+0x30>
					ENCR++;
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <enc_display_pulses_RHS+0x54>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <enc_display_pulses_RHS+0x54>)
 8001e3e:	801a      	strh	r2, [r3, #0]
				}
				if (ENCR == 1250){
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <enc_display_pulses_RHS+0x54>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d102      	bne.n	8001e52 <enc_display_pulses_RHS+0x42>
					ENCR = 0;	//reset the counter
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <enc_display_pulses_RHS+0x54>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	801a      	strh	r2, [r3, #0]
				}

		}return ENCR;
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <enc_display_pulses_RHS+0x54>)
 8001e54:	881b      	ldrh	r3, [r3, #0]

}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200007d2 	.word	0x200007d2

08001e68 <FollowLine2>:
}

/*!
 * Line following algorithm using two line sensors.
 */
void FollowLine2(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
LHS_status = LineSenGetStatusLEFT();
 8001e6c:	f000 f85e 	bl	8001f2c <LineSenGetStatusLEFT>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <FollowLine2+0xb0>)
 8001e76:	701a      	strb	r2, [r3, #0]
RHS_status = LineSenGetStatusRIGHT();
 8001e78:	f000 f872 	bl	8001f60 <LineSenGetStatusRIGHT>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <FollowLine2+0xb4>)
 8001e82:	701a      	strb	r2, [r3, #0]

	if (LHS_status == 1 && RHS_status == 0){//Slow right motor
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <FollowLine2+0xb0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d116      	bne.n	8001eba <FollowLine2+0x52>
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <FollowLine2+0xb4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <FollowLine2+0x52>
		driverev_RHS(basedutycycle - delta_dc);
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <FollowLine2+0xb8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <FollowLine2+0xbc>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 ffb1 	bl	8005e08 <driverev_RHS>
		driverev_LHS(basedutycycle + delta_dc);
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <FollowLine2+0xb8>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <FollowLine2+0xbc>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 ffd8 	bl	8005e68 <driverev_LHS>
 8001eb8:	e02c      	b.n	8001f14 <FollowLine2+0xac>

	}

	else if (RHS_status == 1 && LHS_status == 0){//Slow left motor
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <FollowLine2+0xb4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d116      	bne.n	8001ef0 <FollowLine2+0x88>
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <FollowLine2+0xb0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d112      	bne.n	8001ef0 <FollowLine2+0x88>
		driverev_RHS(basedutycycle + delta_dc);
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <FollowLine2+0xb8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <FollowLine2+0xbc>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 ff96 	bl	8005e08 <driverev_RHS>
		driverev_LHS(basedutycycle - delta_dc);
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <FollowLine2+0xb8>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <FollowLine2+0xbc>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 ffbd 	bl	8005e68 <driverev_LHS>
 8001eee:	e011      	b.n	8001f14 <FollowLine2+0xac>
	}


	else if (RHS_status == LHS_status){//Travel in an arc around the arena
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <FollowLine2+0xb4>)
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <FollowLine2+0xb0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10b      	bne.n	8001f14 <FollowLine2+0xac>
		driverev_LHS(str);
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <FollowLine2+0xc0>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 ffb1 	bl	8005e68 <driverev_LHS>
		driverev_RHS(str+20);
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <FollowLine2+0xc0>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3314      	adds	r3, #20
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 ff7b 	bl	8005e08 <driverev_RHS>
	}



}
 8001f12:	e7ff      	b.n	8001f14 <FollowLine2+0xac>
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200007d4 	.word	0x200007d4
 8001f1c:	200007d5 	.word	0x200007d5
 8001f20:	20000008 	.word	0x20000008
 8001f24:	2000000a 	.word	0x2000000a
 8001f28:	20000009 	.word	0x20000009

08001f2c <LineSenGetStatusLEFT>:
#include "stdint.h"

/*!
 * Provides the state of the left line sensor. Can be either on a line (1) or off a line (0).
 */
uint8_t LineSenGetStatusLEFT(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB,LINSEN_LHS_Pin) == GPIO_PIN_SET){
 8001f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <LineSenGetStatusLEFT+0x30>)
 8001f36:	f000 fb59 	bl	80025ec <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <LineSenGetStatusLEFT+0x18>
		return 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e009      	b.n	8001f58 <LineSenGetStatusLEFT+0x2c>


	}
	if(HAL_GPIO_ReadPin(GPIOB,LINSEN_LHS_Pin) == GPIO_PIN_RESET){
 8001f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <LineSenGetStatusLEFT+0x30>)
 8001f4a:	f000 fb4f 	bl	80025ec <HAL_GPIO_ReadPin>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <LineSenGetStatusLEFT+0x2c>
		return 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e7ff      	b.n	8001f58 <LineSenGetStatusLEFT+0x2c>
	}
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40020400 	.word	0x40020400

08001f60 <LineSenGetStatusRIGHT>:

/*!
 * Provides the state of the left line sensor. Can be either on a line (1) or off a line (0).
 */
uint8_t LineSenGetStatusRIGHT(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB,LINSEN_RHS_Pin) == GPIO_PIN_SET){
 8001f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <LineSenGetStatusRIGHT+0x30>)
 8001f6a:	f000 fb3f 	bl	80025ec <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <LineSenGetStatusRIGHT+0x18>
		return 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e009      	b.n	8001f8c <LineSenGetStatusRIGHT+0x2c>


	}
	if(HAL_GPIO_ReadPin(GPIOB,LINSEN_RHS_Pin) == GPIO_PIN_RESET){
 8001f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <LineSenGetStatusRIGHT+0x30>)
 8001f7e:	f000 fb35 	bl	80025ec <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <LineSenGetStatusRIGHT+0x2c>
		return 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e7ff      	b.n	8001f8c <LineSenGetStatusRIGHT+0x2c>

	}
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40020400 	.word	0x40020400

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f94f 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fb46 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f967 	bl	80022ca <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f92f 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000004 	.word	0x20000004
 8002030:	20000010 	.word	0x20000010
 8002034:	2000000c 	.word	0x2000000c

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000010 	.word	0x20000010
 800205c:	200007d8 	.word	0x200007d8

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200007d8 	.word	0x200007d8

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000010 	.word	0x20000010

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	; (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e159      	b.n	80025b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8148 	bne.w	80025ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a2 	beq.w	80025ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a56      	ldr	r2, [pc, #344]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b54      	ldr	r3, [pc, #336]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_GPIO_Init+0x2ec>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a49      	ldr	r2, [pc, #292]	; (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x202>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <HAL_GPIO_Init+0x2f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x1fe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a47      	ldr	r2, [pc, #284]	; (80025dc <HAL_GPIO_Init+0x2f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x1fa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a46      	ldr	r2, [pc, #280]	; (80025e0 <HAL_GPIO_Init+0x2fc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x1f6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a45      	ldr	r2, [pc, #276]	; (80025e4 <HAL_GPIO_Init+0x300>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x1f2>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	; (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x304>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_GPIO_Init+0x304>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f aea2 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e12b      	b.n	80028ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff f816 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b4:	f001 fb92 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a81      	ldr	r2, [pc, #516]	; (80028c4 <HAL_I2C_Init+0x274>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d807      	bhi.n	80026d4 <HAL_I2C_Init+0x84>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a80      	ldr	r2, [pc, #512]	; (80028c8 <HAL_I2C_Init+0x278>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e006      	b.n	80026e2 <HAL_I2C_Init+0x92>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a7d      	ldr	r2, [pc, #500]	; (80028cc <HAL_I2C_Init+0x27c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0e7      	b.n	80028ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a78      	ldr	r2, [pc, #480]	; (80028d0 <HAL_I2C_Init+0x280>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_I2C_Init+0x274>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d802      	bhi.n	8002724 <HAL_I2C_Init+0xd4>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	e009      	b.n	8002738 <HAL_I2C_Init+0xe8>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_I2C_Init+0x284>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	495c      	ldr	r1, [pc, #368]	; (80028c4 <HAL_I2C_Init+0x274>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d819      	bhi.n	800278c <HAL_I2C_Init+0x13c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e59      	subs	r1, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fbb1 f3f3 	udiv	r3, r1, r3
 8002766:	1c59      	adds	r1, r3, #1
 8002768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800276c:	400b      	ands	r3, r1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_I2C_Init+0x138>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e59      	subs	r1, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002786:	e051      	b.n	800282c <HAL_I2C_Init+0x1dc>
 8002788:	2304      	movs	r3, #4
 800278a:	e04f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_I2C_Init+0x168>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e012      	b.n	80027de <HAL_I2C_Init+0x18e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x196>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e022      	b.n	800282c <HAL_I2C_Init+0x1dc>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10e      	bne.n	800280c <HAL_I2C_Init+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e58      	subs	r0, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	e00f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	0099      	lsls	r1, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	6809      	ldr	r1, [r1, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6911      	ldr	r1, [r2, #16]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	000186a0 	.word	0x000186a0
 80028c8:	001e847f 	.word	0x001e847f
 80028cc:	003d08ff 	.word	0x003d08ff
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff fbb8 	bl	8002060 <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 80e0 	bne.w	8002ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4970      	ldr	r1, [pc, #448]	; (8002acc <HAL_I2C_Master_Transmit+0x1f4>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fc58 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e0d3      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x50>
 8002924:	2302      	movs	r3, #2
 8002926:	e0cc      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2221      	movs	r2, #33	; 0x21
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2210      	movs	r2, #16
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fac2 	bl	8002f20 <I2C_MasterRequestWrite>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e08d      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029bc:	e066      	b.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fcd2 	bl	800336c <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	6a39      	ldr	r1, [r7, #32]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fcc2 	bl	80033ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e01a      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d194      	bne.n	80029be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff faba 	bl	8002060 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 820b 	bne.w	8002f12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	497c      	ldr	r1, [pc, #496]	; (8002cf8 <HAL_I2C_Master_Receive+0x224>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fb5a 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	e1fe      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2C_Master_Receive+0x50>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e1f7      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2222      	movs	r2, #34	; 0x22
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2210      	movs	r2, #16
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_I2C_Master_Receive+0x228>)
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fa46 	bl	8003024 <I2C_MasterRequestRead>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1b8      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d113      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e18c      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d11b      	bne.n	8002c12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e16c      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d11b      	bne.n	8002c52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	e14c      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c78:	e138      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	f200 80f1 	bhi.w	8002e66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d123      	bne.n	8002cd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fbed 	bl	8003470 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e139      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd2:	e10b      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d14e      	bne.n	8002d7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4906      	ldr	r1, [pc, #24]	; (8002d00 <HAL_I2C_Master_Receive+0x22c>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa6a 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e10e      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
 8002cf6:	bf00      	nop
 8002cf8:	00100002 	.word	0x00100002
 8002cfc:	ffff0000 	.word	0xffff0000
 8002d00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d78:	e0b8      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	2200      	movs	r2, #0
 8002d82:	4966      	ldr	r1, [pc, #408]	; (8002f1c <HAL_I2C_Master_Receive+0x448>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fa1b 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0bf      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	494f      	ldr	r1, [pc, #316]	; (8002f1c <HAL_I2C_Master_Receive+0x448>)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f9ed 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e091      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e64:	e042      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fb00 	bl	8003470 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e04c      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d118      	bne.n	8002eec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f aec2 	bne.w	8002c7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00010004 	.word	0x00010004

08002f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d006      	beq.n	8002f4a <I2C_MasterRequestWrite+0x2a>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d003      	beq.n	8002f4a <I2C_MasterRequestWrite+0x2a>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00b      	b.n	8002f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d107      	bne.n	8002f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f91d 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9a:	d103      	bne.n	8002fa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e035      	b.n	8003014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb0:	d108      	bne.n	8002fc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]
 8002fc2:	e01b      	b.n	8002ffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	11db      	asrs	r3, r3, #7
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f063 030f 	orn	r3, r3, #15
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <I2C_MasterRequestWrite+0xfc>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f943 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e010      	b.n	8003014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <I2C_MasterRequestWrite+0x100>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f933 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	00010008 	.word	0x00010008
 8003020:	00010002 	.word	0x00010002

08003024 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003048:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d006      	beq.n	800305e <I2C_MasterRequestRead+0x3a>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d003      	beq.n	800305e <I2C_MasterRequestRead+0x3a>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800305c:	d108      	bne.n	8003070 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e00b      	b.n	8003088 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	2b11      	cmp	r3, #17
 8003076:	d107      	bne.n	8003088 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f893 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	d103      	bne.n	80030b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e079      	b.n	80031b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c4:	d108      	bne.n	80030d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]
 80030d6:	e05f      	b.n	8003198 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030d8:	897b      	ldrh	r3, [r7, #10]
 80030da:	11db      	asrs	r3, r3, #7
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 0306 	and.w	r3, r3, #6
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f063 030f 	orn	r3, r3, #15
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4930      	ldr	r1, [pc, #192]	; (80031b8 <I2C_MasterRequestRead+0x194>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f8b9 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e054      	b.n	80031b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4929      	ldr	r1, [pc, #164]	; (80031bc <I2C_MasterRequestRead+0x198>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f8a9 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e044      	b.n	80031b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f831 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003172:	d103      	bne.n	800317c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e017      	b.n	80031b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003180:	897b      	ldrh	r3, [r7, #10]
 8003182:	11db      	asrs	r3, r3, #7
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 0306 	and.w	r3, r3, #6
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f063 030e 	orn	r3, r3, #14
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4907      	ldr	r1, [pc, #28]	; (80031bc <I2C_MasterRequestRead+0x198>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f865 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00010008 	.word	0x00010008
 80031bc:	00010002 	.word	0x00010002

080031c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	e025      	b.n	800321e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d021      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe ff41 	bl	8002060 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e023      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10d      	bne.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	e00c      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	429a      	cmp	r2, r3
 8003262:	d0b6      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]


	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327c:	e051      	b.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d123      	bne.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e046      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d021      	beq.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fe febf 	bl	8002060 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e020      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10c      	bne.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e00b      	b.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	43da      	mvns	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d18d      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003378:	e02d      	b.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8ce 	bl	800351c <I2C_IsAcknowledgeFailed>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02d      	b.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d021      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fe65 	bl	8002060 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e007      	b.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d1ca      	bne.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033fa:	e02d      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f88d 	bl	800351c <I2C_IsAcknowledgeFailed>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e02d      	b.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d021      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fe fe24 	bl	8002060 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d116      	bne.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e007      	b.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d1ca      	bne.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800347c:	e042      	b.n	8003504 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d119      	bne.n	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e029      	b.n	8003514 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c0:	f7fe fdce 	bl	8002060 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d302      	bcc.n	80034d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e007      	b.n	8003514 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d1b5      	bne.n	800347e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003532:	d11b      	bne.n	800356c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800353c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e267      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d112      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b7e      	ldr	r3, [pc, #504]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e242      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6c      	ldr	r2, [pc, #432]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b69      	ldr	r3, [pc, #420]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a68      	ldr	r2, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a65      	ldr	r2, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe fd14 	bl	8002060 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe fd10 	bl	8002060 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e207      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fd00 	bl	8002060 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe fcfc 	bl	8002060 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1f3      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c7      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4937      	ldr	r1, [pc, #220]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x244>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe fcb5 	bl	8002060 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe fcb1 	bl	8002060 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a8      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4925      	ldr	r1, [pc, #148]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x244>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fc94 	bl	8002060 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe fc90 	bl	8002060 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e187      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_RCC_OscConfig+0x248>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe fc74 	bl	8002060 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe fc70 	bl	8002060 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e167      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
 800379a:	e01b      	b.n	80037d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_OscConfig+0x248>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fe fc5d 	bl	8002060 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fe fc59 	bl	8002060 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e150      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8097 	beq.w	8003910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b7d      	ldr	r3, [pc, #500]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a7c      	ldr	r2, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b77      	ldr	r3, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b74      	ldr	r3, [pc, #464]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fe fc19 	bl	8002060 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fe fc15 	bl	8002060 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e10c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x2ea>
 8003858:	4b64      	ldr	r3, [pc, #400]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a63      	ldr	r2, [pc, #396]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	e01c      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x30c>
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a5e      	ldr	r2, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a5b      	ldr	r2, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003888:	4b58      	ldr	r3, [pc, #352]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a57      	ldr	r2, [pc, #348]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	4b55      	ldr	r3, [pc, #340]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a54      	ldr	r2, [pc, #336]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fe fbda 	bl	8002060 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fe fbd6 	bl	8002060 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0cb      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	4b49      	ldr	r3, [pc, #292]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ee      	beq.n	80038b0 <HAL_RCC_OscConfig+0x334>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fe fbc4 	bl	8002060 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe fbc0 	bl	8002060 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0b5      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a1 	beq.w	8003a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d05c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d141      	bne.n	80039b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fe fb94 	bl	8002060 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe fb90 	bl	8002060 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e087      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	491b      	ldr	r1, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe fb69 	bl	8002060 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fb65 	bl	8002060 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e05c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x416>
 80039b0:	e054      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x478>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe fb52 	bl	8002060 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe fb4e 	bl	8002060 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e045      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x444>
 80039de:	e03d      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e038      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x4ec>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d028      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d121      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d11a      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0cc      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a80:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d90c      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a52      	ldr	r2, [pc, #328]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d044      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d119      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e067      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4934      	ldr	r1, [pc, #208]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7fe fa80 	bl	8002060 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fe fa7c 	bl	8002060 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e04f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d20c      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	; (8003c2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f9e0 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	0800b980 	.word	0x0800b980
 8003c30:	20000004 	.word	0x20000004
 8003c34:	2000000c 	.word	0x2000000c

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b090      	sub	sp, #64	; 0x40
 8003c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
 8003c44:	2300      	movs	r3, #0
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d00d      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x40>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	f200 80a1 	bhi.w	8003da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x34>
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6a:	e09b      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c70:	e09b      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c76:	e098      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c78:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c82:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	2200      	movs	r2, #0
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	627a      	str	r2, [r7, #36]	; 0x24
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca4:	fb03 f201 	mul.w	r2, r3, r1
 8003ca8:	2300      	movs	r3, #0
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a43      	ldr	r2, [pc, #268]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb8:	460a      	mov	r2, r1
 8003cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	4413      	add	r3, r2
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cd2:	f7fc fddb 	bl	800088c <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4613      	mov	r3, r2
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cde:	e053      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce0:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	617a      	str	r2, [r7, #20]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cf2:	f04f 0b00 	mov.w	fp, #0
 8003cf6:	4652      	mov	r2, sl
 8003cf8:	465b      	mov	r3, fp
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	0159      	lsls	r1, r3, #5
 8003d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d08:	0150      	lsls	r0, r2, #5
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d12:	eb63 090b 	sbc.w	r9, r3, fp
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	00eb      	lsls	r3, r5, #3
 8003d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d40:	00e2      	lsls	r2, r4, #3
 8003d42:	4614      	mov	r4, r2
 8003d44:	461d      	mov	r5, r3
 8003d46:	eb14 030a 	adds.w	r3, r4, sl
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	eb45 030b 	adc.w	r3, r5, fp
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5e:	4629      	mov	r1, r5
 8003d60:	028b      	lsls	r3, r1, #10
 8003d62:	4621      	mov	r1, r4
 8003d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d68:	4621      	mov	r1, r4
 8003d6a:	028a      	lsls	r2, r1, #10
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	2200      	movs	r2, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7c:	f7fc fd86 	bl	800088c <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	3301      	adds	r3, #1
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da2:	e002      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3740      	adds	r7, #64	; 0x40
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	017d7840 	.word	0x017d7840

08003dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de0:	f7ff fff0 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0a9b      	lsrs	r3, r3, #10
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	0800b990 	.word	0x0800b990

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e08:	f7ff ffdc 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	0b5b      	lsrs	r3, r3, #13
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40023800 	.word	0x40023800
 8003e28:	0800b990 	.word	0x0800b990

08003e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e041      	b.n	8003ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fd44 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 fe94 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d001      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e044      	b.n	8003f6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <HAL_TIM_Base_Start_IT+0xb0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d018      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x6c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d013      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x6c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00e      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x6c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d009      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x6c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x6c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_TIM_Base_Start_IT+0xc0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d111      	bne.n	8003f5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d010      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5a:	e007      	b.n	8003f6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40014000 	.word	0x40014000

08003f90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e041      	b.n	8004026 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fbbe 	bl	8001738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f000 fde2 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x24>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e022      	b.n	800409a <HAL_TIM_PWM_Start+0x6a>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d109      	bne.n	800406e <HAL_TIM_PWM_Start+0x3e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e015      	b.n	800409a <HAL_TIM_PWM_Start+0x6a>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d109      	bne.n	8004088 <HAL_TIM_PWM_Start+0x58>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e008      	b.n	800409a <HAL_TIM_PWM_Start+0x6a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e068      	b.n	8004174 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Start+0x82>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b0:	e013      	b.n	80040da <HAL_TIM_PWM_Start+0xaa>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_PWM_Start+0x92>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	e00b      	b.n	80040da <HAL_TIM_PWM_Start+0xaa>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d0:	e003      	b.n	80040da <HAL_TIM_PWM_Start+0xaa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2201      	movs	r2, #1
 80040e0:	6839      	ldr	r1, [r7, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 f91c 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a23      	ldr	r2, [pc, #140]	; (800417c <HAL_TIM_PWM_Start+0x14c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d107      	bne.n	8004102 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_TIM_PWM_Start+0x14c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d018      	beq.n	800413e <HAL_TIM_PWM_Start+0x10e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004114:	d013      	beq.n	800413e <HAL_TIM_PWM_Start+0x10e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_TIM_PWM_Start+0x150>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_TIM_PWM_Start+0x10e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_TIM_PWM_Start+0x154>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_TIM_PWM_Start+0x10e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIM_PWM_Start+0x158>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_TIM_PWM_Start+0x10e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <HAL_TIM_PWM_Start+0x15c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d111      	bne.n	8004162 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b06      	cmp	r3, #6
 800414e:	d010      	beq.n	8004172 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	e007      	b.n	8004172 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010000 	.word	0x40010000
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40014000 	.word	0x40014000

08004190 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e041      	b.n	8004226 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd fb44 	bl	8001844 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 fce2 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_TIM_IC_Start_IT+0x1e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e013      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x46>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d104      	bne.n	800425e <HAL_TIM_IC_Start_IT+0x2e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e00b      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x46>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d104      	bne.n	800426e <HAL_TIM_IC_Start_IT+0x3e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e003      	b.n	8004276 <HAL_TIM_IC_Start_IT+0x46>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_TIM_IC_Start_IT+0x58>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e013      	b.n	80042b0 <HAL_TIM_IC_Start_IT+0x80>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d104      	bne.n	8004298 <HAL_TIM_IC_Start_IT+0x68>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e00b      	b.n	80042b0 <HAL_TIM_IC_Start_IT+0x80>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b08      	cmp	r3, #8
 800429c:	d104      	bne.n	80042a8 <HAL_TIM_IC_Start_IT+0x78>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_IC_Start_IT+0x80>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80042b2:	7bbb      	ldrb	r3, [r7, #14]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80042b8:	7b7b      	ldrb	r3, [r7, #13]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d001      	beq.n	80042c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0c2      	b.n	8004448 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_IC_Start_IT+0xa2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	e013      	b.n	80042fa <HAL_TIM_IC_Start_IT+0xca>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0xb2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	e00b      	b.n	80042fa <HAL_TIM_IC_Start_IT+0xca>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_IC_Start_IT+0xc2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f0:	e003      	b.n	80042fa <HAL_TIM_IC_Start_IT+0xca>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <HAL_TIM_IC_Start_IT+0xda>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	e013      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x102>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d104      	bne.n	800431a <HAL_TIM_IC_Start_IT+0xea>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004318:	e00b      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x102>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d104      	bne.n	800432a <HAL_TIM_IC_Start_IT+0xfa>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	e003      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x102>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d841      	bhi.n	80043bc <HAL_TIM_IC_Start_IT+0x18c>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_TIM_IC_Start_IT+0x110>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004375 	.word	0x08004375
 8004344:	080043bd 	.word	0x080043bd
 8004348:	080043bd 	.word	0x080043bd
 800434c:	080043bd 	.word	0x080043bd
 8004350:	08004387 	.word	0x08004387
 8004354:	080043bd 	.word	0x080043bd
 8004358:	080043bd 	.word	0x080043bd
 800435c:	080043bd 	.word	0x080043bd
 8004360:	08004399 	.word	0x08004399
 8004364:	080043bd 	.word	0x080043bd
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043ab 	.word	0x080043ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0202 	orr.w	r2, r2, #2
 8004382:	60da      	str	r2, [r3, #12]
      break;
 8004384:	e01d      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0204 	orr.w	r2, r2, #4
 8004394:	60da      	str	r2, [r3, #12]
      break;
 8004396:	e014      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	60da      	str	r2, [r3, #12]
      break;
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0210 	orr.w	r2, r2, #16
 80043b8:	60da      	str	r2, [r3, #12]
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      break;
 80043c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13e      	bne.n	8004446 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 ffa5 	bl	8005320 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <HAL_TIM_IC_Start_IT+0x220>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x1e2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d013      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x1e2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_TIM_IC_Start_IT+0x224>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x1e2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a17      	ldr	r2, [pc, #92]	; (8004458 <HAL_TIM_IC_Start_IT+0x228>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x1e2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIM_IC_Start_IT+0x22c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x1e2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <HAL_TIM_IC_Start_IT+0x230>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d111      	bne.n	8004436 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d010      	beq.n	8004446 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	e007      	b.n	8004446 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40014000 	.word	0x40014000

08004464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d122      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d11b      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0202 	mvn.w	r2, #2
 8004490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fd f83a 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fb54 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fb5b 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d122      	bne.n	8004514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d11b      	bne.n	8004514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0204 	mvn.w	r2, #4
 80044e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fd f810 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fb2a 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fb31 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b08      	cmp	r3, #8
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b08      	cmp	r3, #8
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0208 	mvn.w	r2, #8
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc ffe6 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fb00 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fb07 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b10      	cmp	r3, #16
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2208      	movs	r2, #8
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc ffbc 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fad6 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fadd 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0201 	mvn.w	r2, #1
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fab0 	bl	8004b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b80      	cmp	r3, #128	; 0x80
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 ff76 	bl	8005500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d10e      	bne.n	8004640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d107      	bne.n	8004640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 faa2 	bl	8004b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b20      	cmp	r3, #32
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0220 	mvn.w	r2, #32
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 ff40 	bl	80054ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_IC_ConfigChannel+0x1e>
 800468e:	2302      	movs	r3, #2
 8004690:	e088      	b.n	80047a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f000 fc7e 	bl	8004fb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 020c 	bic.w	r2, r2, #12
 80046c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	619a      	str	r2, [r3, #24]
 80046d6:	e060      	b.n	800479a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d11c      	bne.n	8004718 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f000 fcf6 	bl	80050de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004700:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6999      	ldr	r1, [r3, #24]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	021a      	lsls	r2, r3, #8
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	619a      	str	r2, [r3, #24]
 8004716:	e040      	b.n	800479a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11b      	bne.n	8004756 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f000 fd43 	bl	80051b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 020c 	bic.w	r2, r2, #12
 8004740:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	61da      	str	r2, [r3, #28]
 8004754:	e021      	b.n	800479a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d11c      	bne.n	8004796 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f000 fd60 	bl	8005230 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800477e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69d9      	ldr	r1, [r3, #28]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	021a      	lsls	r2, r3, #8
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	61da      	str	r2, [r3, #28]
 8004794:	e001      	b.n	800479a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ae      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	f200 809f 	bhi.w	8004918 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004919 	.word	0x08004919
 80047e8:	08004919 	.word	0x08004919
 80047ec:	08004919 	.word	0x08004919
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004919 	.word	0x08004919
 80047f8:	08004919 	.word	0x08004919
 80047fc:	08004919 	.word	0x08004919
 8004800:	08004897 	.word	0x08004897
 8004804:	08004919 	.word	0x08004919
 8004808:	08004919 	.word	0x08004919
 800480c:	08004919 	.word	0x08004919
 8004810:	080048d7 	.word	0x080048d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa3c 	bl	8004c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
      break;
 8004852:	e064      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fa82 	bl	8004d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]
      break;
 8004894:	e043      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 facd 	bl	8004e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0208 	orr.w	r2, r2, #8
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0204 	bic.w	r2, r2, #4
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	61da      	str	r2, [r3, #28]
      break;
 80048d4:	e023      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fb17 	bl	8004f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	61da      	str	r2, [r3, #28]
      break;
 8004916:	e002      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
      break;
 800491c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIM_ConfigClockSource+0x1c>
 8004948:	2302      	movs	r3, #2
 800494a:	e0b4      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x186>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004984:	d03e      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0xd4>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	f200 8087 	bhi.w	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	f000 8086 	beq.w	8004aa2 <HAL_TIM_ConfigClockSource+0x172>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499a:	d87f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b70      	cmp	r3, #112	; 0x70
 800499e:	d01a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xa6>
 80049a0:	2b70      	cmp	r3, #112	; 0x70
 80049a2:	d87b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b60      	cmp	r3, #96	; 0x60
 80049a6:	d050      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x11a>
 80049a8:	2b60      	cmp	r3, #96	; 0x60
 80049aa:	d877      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b50      	cmp	r3, #80	; 0x50
 80049ae:	d03c      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0xfa>
 80049b0:	2b50      	cmp	r3, #80	; 0x50
 80049b2:	d873      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d058      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x13a>
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d86f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b30      	cmp	r3, #48	; 0x30
 80049be:	d064      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	2b30      	cmp	r3, #48	; 0x30
 80049c2:	d86b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d060      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d867      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d05c      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d05a      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	e062      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f000 fc7b 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	609a      	str	r2, [r3, #8]
      break;
 8004a02:	e04f      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f000 fc64 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a26:	609a      	str	r2, [r3, #8]
      break;
 8004a28:	e03c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fb22 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2150      	movs	r1, #80	; 0x50
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fc31 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004a48:	e02c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 fb7e 	bl	8005158 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2160      	movs	r1, #96	; 0x60
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc21 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004a68:	e01c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 fb02 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2140      	movs	r1, #64	; 0x40
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fc11 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004a88:	e00c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f000 fc08 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004a9a:	e003      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e000      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d831      	bhi.n	8004b38 <HAL_TIM_ReadCapturedValue+0x78>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004b39 	.word	0x08004b39
 8004aec:	08004b1b 	.word	0x08004b1b
 8004af0:	08004b39 	.word	0x08004b39
 8004af4:	08004b39 	.word	0x08004b39
 8004af8:	08004b39 	.word	0x08004b39
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b39 	.word	0x08004b39
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b39 	.word	0x08004b39
 8004b0c:	08004b2f 	.word	0x08004b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	60fb      	str	r3, [r7, #12]

      break;
 8004b18:	e00f      	b.n	8004b3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	60fb      	str	r3, [r7, #12]

      break;
 8004b22:	e00a      	b.n	8004b3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	60fb      	str	r3, [r7, #12]

      break;
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	60fb      	str	r3, [r7, #12]

      break;
 8004b36:	e000      	b.n	8004b3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004b38:	bf00      	nop
  }

  return tmpreg;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <TIM_Base_SetConfig+0xe8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <TIM_Base_SetConfig+0xec>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0x38>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0xf0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d017      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <TIM_Base_SetConfig+0xe8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <TIM_Base_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <TIM_Base_SetConfig+0xf0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <TIM_Base_SetConfig+0xf4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <TIM_Base_SetConfig+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <TIM_Base_SetConfig+0xfc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <TIM_Base_SetConfig+0xe4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0302 	bic.w	r3, r3, #2
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <TIM_OC1_SetConfig+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10c      	bne.n	8004d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0308 	bic.w	r3, r3, #8
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <TIM_OC1_SetConfig+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000

08004d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0210 	bic.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0320 	bic.w	r3, r3, #32
 8004dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <TIM_OC2_SetConfig+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10d      	bne.n	8004de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC2_SetConfig+0xd4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d113      	bne.n	8004e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000

08004e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <TIM_OC3_SetConfig+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <TIM_OC3_SetConfig+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d113      	bne.n	8004ee6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40010000 	.word	0x40010000

08004f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <TIM_OC4_SetConfig+0x9c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000

08004fb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a24      	ldr	r2, [pc, #144]	; (800506c <TIM_TI1_SetConfig+0xbc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_TI1_SetConfig+0x56>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d00f      	beq.n	8005006 <TIM_TI1_SetConfig+0x56>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a21      	ldr	r2, [pc, #132]	; (8005070 <TIM_TI1_SetConfig+0xc0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_TI1_SetConfig+0x56>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4a20      	ldr	r2, [pc, #128]	; (8005074 <TIM_TI1_SetConfig+0xc4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_TI1_SetConfig+0x56>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <TIM_TI1_SetConfig+0xc8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_TI1_SetConfig+0x56>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a1e      	ldr	r2, [pc, #120]	; (800507c <TIM_TI1_SetConfig+0xcc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <TIM_TI1_SetConfig+0x5a>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <TIM_TI1_SetConfig+0x5c>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e003      	b.n	800502a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	b2db      	uxtb	r3, r3
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f023 030a 	bic.w	r3, r3, #10
 8005044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f003 030a 	and.w	r3, r3, #10
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40014000 	.word	0x40014000

08005080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 030a 	bic.w	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 0210 	bic.w	r2, r3, #16
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	b29b      	uxth	r3, r3
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005130:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f023 0210 	bic.w	r2, r3, #16
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	031b      	lsls	r3, r3, #12
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005208:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	621a      	str	r2, [r3, #32]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800526e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	031b      	lsls	r3, r3, #12
 8005274:	b29b      	uxth	r3, r3
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005282:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	031b      	lsls	r3, r3, #12
 8005288:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f043 0307 	orr.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e050      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a15      	ldr	r2, [pc, #84]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005460:	2302      	movs	r3, #2
 8005462:	e03d      	b.n	80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e03f      	b.n	80055a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc fae4 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	; 0x24
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f929 	bl	80057b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b08a      	sub	sp, #40	; 0x28
 80055b2:	af02      	add	r7, sp, #8
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d17c      	bne.n	80056c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_UART_Transmit+0x2c>
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e075      	b.n	80056ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Transmit+0x3e>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e06e      	b.n	80056ca <HAL_UART_Transmit+0x11c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2221      	movs	r2, #33	; 0x21
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005602:	f7fc fd2d 	bl	8002060 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561c:	d108      	bne.n	8005630 <HAL_UART_Transmit+0x82>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e003      	b.n	8005638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005640:	e02a      	b.n	8005698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f840 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e036      	b.n	80056ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	3302      	adds	r3, #2
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	e007      	b.n	800568a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	781a      	ldrb	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1cf      	bne.n	8005642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2140      	movs	r1, #64	; 0x40
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f810 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e006      	b.n	80056ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e000      	b.n	80056ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056c8:	2302      	movs	r3, #2
  }
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b090      	sub	sp, #64	; 0x40
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	4613      	mov	r3, r2
 80056e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e2:	e050      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d04c      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f2:	f7fc fcb5 	bl	8002060 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fe:	429a      	cmp	r2, r3
 8005700:	d241      	bcs.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005722:	637a      	str	r2, [r7, #52]	; 0x34
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e5      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3314      	adds	r3, #20
 800573c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	613b      	str	r3, [r7, #16]
   return(result);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3314      	adds	r3, #20
 8005754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005756:	623a      	str	r2, [r7, #32]
 8005758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	69f9      	ldr	r1, [r7, #28]
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	61bb      	str	r3, [r7, #24]
   return(result);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e00f      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d09f      	beq.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3740      	adds	r7, #64	; 0x40
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b4:	b0c0      	sub	sp, #256	; 0x100
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	68d9      	ldr	r1, [r3, #12]
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	ea40 0301 	orr.w	r3, r0, r1
 80057d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005808:	f021 010c 	bic.w	r1, r1, #12
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005816:	430b      	orrs	r3, r1
 8005818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	6999      	ldr	r1, [r3, #24]
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	ea40 0301 	orr.w	r3, r0, r1
 8005836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b8f      	ldr	r3, [pc, #572]	; (8005a7c <UART_SetConfig+0x2cc>)
 8005840:	429a      	cmp	r2, r3
 8005842:	d005      	beq.n	8005850 <UART_SetConfig+0xa0>
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8d      	ldr	r3, [pc, #564]	; (8005a80 <UART_SetConfig+0x2d0>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d104      	bne.n	800585a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7fe fad8 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 8005854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005858:	e003      	b.n	8005862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800585a:	f7fe fabf 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 800585e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	f040 810c 	bne.w	8005a88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005874:	2200      	movs	r2, #0
 8005876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800587a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800587e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	1891      	adds	r1, r2, r2
 8005888:	65b9      	str	r1, [r7, #88]	; 0x58
 800588a:	415b      	adcs	r3, r3
 800588c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800588e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005892:	4621      	mov	r1, r4
 8005894:	eb12 0801 	adds.w	r8, r2, r1
 8005898:	4629      	mov	r1, r5
 800589a:	eb43 0901 	adc.w	r9, r3, r1
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058b2:	4690      	mov	r8, r2
 80058b4:	4699      	mov	r9, r3
 80058b6:	4623      	mov	r3, r4
 80058b8:	eb18 0303 	adds.w	r3, r8, r3
 80058bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c0:	462b      	mov	r3, r5
 80058c2:	eb49 0303 	adc.w	r3, r9, r3
 80058c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058de:	460b      	mov	r3, r1
 80058e0:	18db      	adds	r3, r3, r3
 80058e2:	653b      	str	r3, [r7, #80]	; 0x50
 80058e4:	4613      	mov	r3, r2
 80058e6:	eb42 0303 	adc.w	r3, r2, r3
 80058ea:	657b      	str	r3, [r7, #84]	; 0x54
 80058ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058f4:	f7fa ffca 	bl	800088c <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <UART_SetConfig+0x2d4>)
 80058fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	011c      	lsls	r4, r3, #4
 8005906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800590a:	2200      	movs	r2, #0
 800590c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	1891      	adds	r1, r2, r2
 800591e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005920:	415b      	adcs	r3, r3
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005928:	4641      	mov	r1, r8
 800592a:	eb12 0a01 	adds.w	sl, r2, r1
 800592e:	4649      	mov	r1, r9
 8005930:	eb43 0b01 	adc.w	fp, r3, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005948:	4692      	mov	sl, r2
 800594a:	469b      	mov	fp, r3
 800594c:	4643      	mov	r3, r8
 800594e:	eb1a 0303 	adds.w	r3, sl, r3
 8005952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005956:	464b      	mov	r3, r9
 8005958:	eb4b 0303 	adc.w	r3, fp, r3
 800595c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800596c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005974:	460b      	mov	r3, r1
 8005976:	18db      	adds	r3, r3, r3
 8005978:	643b      	str	r3, [r7, #64]	; 0x40
 800597a:	4613      	mov	r3, r2
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	647b      	str	r3, [r7, #68]	; 0x44
 8005982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800598a:	f7fa ff7f 	bl	800088c <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4611      	mov	r1, r2
 8005994:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <UART_SetConfig+0x2d4>)
 8005996:	fba3 2301 	umull	r2, r3, r3, r1
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2264      	movs	r2, #100	; 0x64
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	1acb      	subs	r3, r1, r3
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059aa:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <UART_SetConfig+0x2d4>)
 80059ac:	fba3 2302 	umull	r2, r3, r3, r2
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059b8:	441c      	add	r4, r3
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d4:	415b      	adcs	r3, r3
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059dc:	4641      	mov	r1, r8
 80059de:	1851      	adds	r1, r2, r1
 80059e0:	6339      	str	r1, [r7, #48]	; 0x30
 80059e2:	4649      	mov	r1, r9
 80059e4:	414b      	adcs	r3, r1
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059f4:	4659      	mov	r1, fp
 80059f6:	00cb      	lsls	r3, r1, #3
 80059f8:	4651      	mov	r1, sl
 80059fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fe:	4651      	mov	r1, sl
 8005a00:	00ca      	lsls	r2, r1, #3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a10:	464b      	mov	r3, r9
 8005a12:	460a      	mov	r2, r1
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a30:	460b      	mov	r3, r1
 8005a32:	18db      	adds	r3, r3, r3
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a36:	4613      	mov	r3, r2
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a46:	f7fa ff21 	bl	800088c <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <UART_SetConfig+0x2d4>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <UART_SetConfig+0x2d4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 0207 	and.w	r2, r3, #7
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4422      	add	r2, r4
 8005a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a78:	e105      	b.n	8005c86 <UART_SetConfig+0x4d6>
 8005a7a:	bf00      	nop
 8005a7c:	40011000 	.word	0x40011000
 8005a80:	40011400 	.word	0x40011400
 8005a84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	1891      	adds	r1, r2, r2
 8005aa0:	6239      	str	r1, [r7, #32]
 8005aa2:	415b      	adcs	r3, r3
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aaa:	4641      	mov	r1, r8
 8005aac:	1854      	adds	r4, r2, r1
 8005aae:	4649      	mov	r1, r9
 8005ab0:	eb43 0501 	adc.w	r5, r3, r1
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	00eb      	lsls	r3, r5, #3
 8005abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ac2:	00e2      	lsls	r2, r4, #3
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	4643      	mov	r3, r8
 8005aca:	18e3      	adds	r3, r4, r3
 8005acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	eb45 0303 	adc.w	r3, r5, r3
 8005ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005af6:	4629      	mov	r1, r5
 8005af8:	008b      	lsls	r3, r1, #2
 8005afa:	4621      	mov	r1, r4
 8005afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b00:	4621      	mov	r1, r4
 8005b02:	008a      	lsls	r2, r1, #2
 8005b04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b08:	f7fa fec0 	bl	800088c <__aeabi_uldivmod>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4b60      	ldr	r3, [pc, #384]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005b12:	fba3 2302 	umull	r2, r3, r3, r2
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	011c      	lsls	r4, r3, #4
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	1891      	adds	r1, r2, r2
 8005b32:	61b9      	str	r1, [r7, #24]
 8005b34:	415b      	adcs	r3, r3
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	1851      	adds	r1, r2, r1
 8005b40:	6139      	str	r1, [r7, #16]
 8005b42:	4649      	mov	r1, r9
 8005b44:	414b      	adcs	r3, r1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b54:	4659      	mov	r1, fp
 8005b56:	00cb      	lsls	r3, r1, #3
 8005b58:	4651      	mov	r1, sl
 8005b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5e:	4651      	mov	r1, sl
 8005b60:	00ca      	lsls	r2, r1, #3
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	4642      	mov	r2, r8
 8005b6a:	189b      	adds	r3, r3, r2
 8005b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b70:	464b      	mov	r3, r9
 8005b72:	460a      	mov	r2, r1
 8005b74:	eb42 0303 	adc.w	r3, r2, r3
 8005b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b94:	4649      	mov	r1, r9
 8005b96:	008b      	lsls	r3, r1, #2
 8005b98:	4641      	mov	r1, r8
 8005b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	008a      	lsls	r2, r1, #2
 8005ba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ba6:	f7fa fe71 	bl	800088c <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	2164      	movs	r1, #100	; 0x64
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	3332      	adds	r3, #50	; 0x32
 8005bc2:	4a34      	ldr	r2, [pc, #208]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bce:	441c      	add	r4, r3
 8005bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8005bd8:	677a      	str	r2, [r7, #116]	; 0x74
 8005bda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bde:	4642      	mov	r2, r8
 8005be0:	464b      	mov	r3, r9
 8005be2:	1891      	adds	r1, r2, r2
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	415b      	adcs	r3, r3
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bee:	4641      	mov	r1, r8
 8005bf0:	1851      	adds	r1, r2, r1
 8005bf2:	6039      	str	r1, [r7, #0]
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	414b      	adcs	r3, r1
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c06:	4659      	mov	r1, fp
 8005c08:	00cb      	lsls	r3, r1, #3
 8005c0a:	4651      	mov	r1, sl
 8005c0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c10:	4651      	mov	r1, sl
 8005c12:	00ca      	lsls	r2, r1, #3
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c20:	464b      	mov	r3, r9
 8005c22:	460a      	mov	r2, r1
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	663b      	str	r3, [r7, #96]	; 0x60
 8005c34:	667a      	str	r2, [r7, #100]	; 0x64
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c42:	4649      	mov	r1, r9
 8005c44:	008b      	lsls	r3, r1, #2
 8005c46:	4641      	mov	r1, r8
 8005c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	008a      	lsls	r2, r1, #2
 8005c50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c54:	f7fa fe1a 	bl	800088c <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2164      	movs	r1, #100	; 0x64
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	3332      	adds	r3, #50	; 0x32
 8005c70:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4422      	add	r2, r4
 8005c84:	609a      	str	r2, [r3, #8]
}
 8005c86:	bf00      	nop
 8005c88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c92:	bf00      	nop
 8005c94:	51eb851f 	.word	0x51eb851f

08005c98 <UltraSonicStartPulse>:
//uint8_t MSG[30];

/*!
 * Begins a timer on the provided timer handle to generate a 15 us pulse to cause the ultrasonic sensor to send an echo out.
 */
void UltraSonicStartPulse(TIM_HandleTypeDef htim){
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	f107 0c08 	add.w	ip, r7, #8
 8005ca2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f107 0008 	add.w	r0, r7, #8
 8005cac:	f7fe f9c0 	bl	8004030 <HAL_TIM_PWM_Start>
	TIM10->CCR1 = 15;
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <UltraSonicStartPulse+0x2c>)
 8005cb2:	220f      	movs	r2, #15
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34

}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cbe:	b004      	add	sp, #16
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40014400 	.word	0x40014400

08005cc8 <UltraSonicPrepInterrupt>:

/*!
 * Sets up a timer on the provided timer handle to capture the ultrasonic's reflected echo.
 */
void UltraSonicPrepInterrupt(TIM_HandleTypeDef htim){
 8005cc8:	b084      	sub	sp, #16
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	f107 0c08 	add.w	ip, r7, #8
 8005cd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_TIM_Base_Start_IT(&htim);
 8005cd6:	f107 0008 	add.w	r0, r7, #8
 8005cda:	f7fe f8f7 	bl	8003ecc <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim, TIM_CHANNEL_4);
 8005cde:	210c      	movs	r1, #12
 8005ce0:	f107 0008 	add.w	r0, r7, #8
 8005ce4:	f7fe faa4 	bl	8004230 <HAL_TIM_IC_Start_IT>
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cf0:	b004      	add	sp, #16
 8005cf2:	4770      	bx	lr

08005cf4 <UltraSonicGetDist>:

/*!
 * Returns the calculated distance away from the ultrasonic sensor using the echo's pulse width.
 */
uint32_t UltraSonicGetDist(){
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
	return distInch;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <UltraSonicGetDist+0x14>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	200007ec 	.word	0x200007ec

08005d0c <UltraSonicCalcDist>:
//THE FOLLOWING FUNCTION GOES IN SIDE THE INTERRUPT

/*!
 * Calculates the distance based on the ultrasonic sensor's echo signal on the provided timer handle.
 */
void UltraSonicCalcDist(TIM_HandleTypeDef *htim){
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	7f1b      	ldrb	r3, [r3, #28]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d15f      	bne.n	8005ddc <UltraSonicCalcDist+0xd0>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 8005d1c:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <UltraSonicCalcDist+0xd8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <UltraSonicCalcDist+0x2e>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8005d24:	210c      	movs	r1, #12
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fe feca 	bl	8004ac0 <HAL_TIM_ReadCapturedValue>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4a2e      	ldr	r2, [pc, #184]	; (8005de8 <UltraSonicCalcDist+0xdc>)
 8005d30:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 8005d32:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <UltraSonicCalcDist+0xd8>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
				Is_First_Captured = 0; // set it back to false
			}
		}
	//return distInch;
}
 8005d38:	e050      	b.n	8005ddc <UltraSonicCalcDist+0xd0>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8005d3a:	210c      	movs	r1, #12
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fe febf 	bl	8004ac0 <HAL_TIM_ReadCapturedValue>
 8005d42:	4603      	mov	r3, r0
 8005d44:	4a29      	ldr	r2, [pc, #164]	; (8005dec <UltraSonicCalcDist+0xe0>)
 8005d46:	6013      	str	r3, [r2, #0]
				if (IC_Val2 > IC_Val1)
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <UltraSonicCalcDist+0xe0>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <UltraSonicCalcDist+0xdc>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d907      	bls.n	8005d64 <UltraSonicCalcDist+0x58>
					Difference = IC_Val2-IC_Val1;
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <UltraSonicCalcDist+0xe0>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b23      	ldr	r3, [pc, #140]	; (8005de8 <UltraSonicCalcDist+0xdc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <UltraSonicCalcDist+0xe4>)
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e00d      	b.n	8005d80 <UltraSonicCalcDist+0x74>
				else if (IC_Val1 > IC_Val2)
 8005d64:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <UltraSonicCalcDist+0xdc>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <UltraSonicCalcDist+0xe0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d907      	bls.n	8005d80 <UltraSonicCalcDist+0x74>
					Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8005d70:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <UltraSonicCalcDist+0xe0>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <UltraSonicCalcDist+0xdc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <UltraSonicCalcDist+0xe4>)
 8005d7e:	6013      	str	r3, [r2, #0]
				float refClock = TIMCLOCK/(PRESCALAR);
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <UltraSonicCalcDist+0xe8>)
 8005d82:	60fb      	str	r3, [r7, #12]
				float mFactor = 1000000/refClock;
 8005d84:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005df8 <UltraSonicCalcDist+0xec>
 8005d88:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d90:	edc7 7a02 	vstr	s15, [r7, #8]
				usWidth = Difference*mFactor;
 8005d94:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <UltraSonicCalcDist+0xe4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dac:	ee17 2a90 	vmov	r2, s15
 8005db0:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <UltraSonicCalcDist+0xf0>)
 8005db2:	601a      	str	r2, [r3, #0]
				distInch = usWidth*1000/148;
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <UltraSonicCalcDist+0xf0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	4a0f      	ldr	r2, [pc, #60]	; (8005e00 <UltraSonicCalcDist+0xf4>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	089b      	lsrs	r3, r3, #2
 8005dca:	4a0e      	ldr	r2, [pc, #56]	; (8005e04 <UltraSonicCalcDist+0xf8>)
 8005dcc:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24
				Is_First_Captured = 0; // set it back to false
 8005dd6:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <UltraSonicCalcDist+0xd8>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	200007f0 	.word	0x200007f0
 8005de8:	200007dc 	.word	0x200007dc
 8005dec:	200007e0 	.word	0x200007e0
 8005df0:	200007e4 	.word	0x200007e4
 8005df4:	4b189680 	.word	0x4b189680
 8005df8:	49742400 	.word	0x49742400
 8005dfc:	200007e8 	.word	0x200007e8
 8005e00:	1bacf915 	.word	0x1bacf915
 8005e04:	200007ec 	.word	0x200007ec

08005e08 <driverev_RHS>:
}

/*!
 * Drive the right hand side backward at the specified dutycycle.
 */
void driverev_RHS(int dutycycle){
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	TIM2->CCR4 = dutycycle*0.01*50000;
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fa fcb1 	bl	8000778 <__aeabi_i2d>
 8005e16:	a310      	add	r3, pc, #64	; (adr r3, 8005e58 <driverev_RHS+0x50>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fa30 	bl	8000280 <__aeabi_dmul>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	a30d      	add	r3, pc, #52	; (adr r3, 8005e60 <driverev_RHS+0x58>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fa27 	bl	8000280 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fa fd05 	bl	800084c <__aeabi_d2uiz>
 8005e42:	4603      	mov	r3, r0
 8005e44:	6423      	str	r3, [r4, #64]	; 0x40
	TIM2->CCR3 = 0;
 8005e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	47ae147b 	.word	0x47ae147b
 8005e5c:	3f847ae1 	.word	0x3f847ae1
 8005e60:	00000000 	.word	0x00000000
 8005e64:	40e86a00 	.word	0x40e86a00

08005e68 <driverev_LHS>:
}

/*!
 * Drive the left hand side backward at the specified dutycycle.
 */
void driverev_LHS(int dutycycle){
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = dutycycle*0.01*50000;
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fa fc81 	bl	8000778 <__aeabi_i2d>
 8005e76:	a311      	add	r3, pc, #68	; (adr r3, 8005ebc <driverev_LHS+0x54>)
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f7fa fa00 	bl	8000280 <__aeabi_dmul>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4610      	mov	r0, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	a30e      	add	r3, pc, #56	; (adr r3, 8005ec4 <driverev_LHS+0x5c>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa f9f7 	bl	8000280 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4c08      	ldr	r4, [pc, #32]	; (8005eb8 <driverev_LHS+0x50>)
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	f7fa fcd6 	bl	800084c <__aeabi_d2uiz>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR2 = 0;
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <driverev_LHS+0x50>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd90      	pop	{r4, r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	47ae147b 	.word	0x47ae147b
 8005ec0:	3f847ae1 	.word	0x3f847ae1
 8005ec4:	00000000 	.word	0x00000000
 8005ec8:	40e86a00 	.word	0x40e86a00

08005ecc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fd88 	bl	80079f2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b0a4      	sub	sp, #144	; 0x90
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005f02:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2188      	movs	r1, #136	; 0x88
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f004 ff32 	bl	800ad78 <VL53L0X_WrByte>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f28:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4aae      	ldr	r2, [pc, #696]	; (80061e8 <VL53L0X_DataInit+0x2f4>)
 8005f30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 faef 	bl	8006524 <VL53L0X_GetDeviceParameters>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 8005f4c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d130      	bne.n	8005fb6 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8005f54:	2300      	movs	r3, #0
 8005f56:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8005f58:	2300      	movs	r3, #0
 8005f5a:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8005f60:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 8005f64:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8005f66:	f24b 3333 	movw	r3, #45875	; 0xb333
 8005f6a:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8005f6c:	4b9f      	ldr	r3, [pc, #636]	; (80061ec <VL53L0X_DataInit+0x2f8>)
 8005f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8005f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f74:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8005f76:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 8005f7a:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8005f7c:	4b9c      	ldr	r3, [pc, #624]	; (80061f0 <VL53L0X_DataInit+0x2fc>)
 8005f7e:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8005f80:	4b9c      	ldr	r3, [pc, #624]	; (80061f4 <VL53L0X_DataInit+0x300>)
 8005f82:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 8005f84:	4b9c      	ldr	r3, [pc, #624]	; (80061f8 <VL53L0X_DataInit+0x304>)
 8005f86:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8005f88:	4b9c      	ldr	r3, [pc, #624]	; (80061fc <VL53L0X_DataInit+0x308>)
 8005f8a:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8005f8c:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8005f90:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 8005f92:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 8005f96:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8005f98:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8005f9c:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8005f9e:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 8005fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3308      	adds	r3, #8
 8005faa:	f107 0110 	add.w	r1, r7, #16
 8005fae:	2278      	movs	r2, #120	; 0x78
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f005 f83d 	bl	800b030 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2264      	movs	r2, #100	; 0x64
 8005fba:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005fc4:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005fce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005fd8:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f004 fec5 	bl	800ad78 <VL53L0X_WrByte>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	21ff      	movs	r1, #255	; 0xff
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f004 feb9 	bl	800ad78 <VL53L0X_WrByte>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800600e:	4313      	orrs	r3, r2
 8006010:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006014:	2200      	movs	r2, #0
 8006016:	2100      	movs	r1, #0
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f004 fead 	bl	800ad78 <VL53L0X_WrByte>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006026:	4313      	orrs	r3, r2
 8006028:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800602c:	f107 030f 	add.w	r3, r7, #15
 8006030:	461a      	mov	r2, r3
 8006032:	2191      	movs	r1, #145	; 0x91
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f004 ff21 	bl	800ae7c <VL53L0X_RdByte>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006042:	4313      	orrs	r3, r2
 8006044:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006048:	7bfa      	ldrb	r2, [r7, #15]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006050:	2201      	movs	r2, #1
 8006052:	2100      	movs	r1, #0
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f004 fe8f 	bl	800ad78 <VL53L0X_WrByte>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006062:	4313      	orrs	r3, r2
 8006064:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006068:	2200      	movs	r2, #0
 800606a:	21ff      	movs	r1, #255	; 0xff
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f004 fe83 	bl	800ad78 <VL53L0X_WrByte>
 8006072:	4603      	mov	r3, r0
 8006074:	461a      	mov	r2, r3
 8006076:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800607a:	4313      	orrs	r3, r2
 800607c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f004 fe77 	bl	800ad78 <VL53L0X_WrByte>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006092:	4313      	orrs	r3, r2
 8006094:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006098:	2300      	movs	r3, #0
 800609a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800609e:	e017      	b.n	80060d0 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 80060a0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d118      	bne.n	80060da <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80060a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fd68 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80060c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ca:	3301      	adds	r3, #1
 80060cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	dde3      	ble.n	80060a0 <VL53L0X_DataInit+0x1ac>
 80060d8:	e000      	b.n	80060dc <VL53L0X_DataInit+0x1e8>
		else
			break;
 80060da:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80060dc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d107      	bne.n	80060f4 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80060e4:	2200      	movs	r2, #0
 80060e6:	2102      	movs	r1, #2
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fd4d 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80060f4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d107      	bne.n	800610c <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80060fc:	2200      	movs	r2, #0
 80060fe:	2103      	movs	r1, #3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fd41 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800610c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006114:	2200      	movs	r2, #0
 8006116:	2104      	movs	r1, #4
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fd35 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006124:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8006128:	2b00      	cmp	r3, #0
 800612a:	d107      	bne.n	800613c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800612c:	2200      	movs	r2, #0
 800612e:	2105      	movs	r1, #5
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fd29 	bl	8006b88 <VL53L0X_SetLimitCheckEnable>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800613c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006144:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006148:	2100      	movs	r1, #0
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fdcc 	bl	8006ce8 <VL53L0X_SetLimitCheckValue>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006156:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800615a:	2b00      	cmp	r3, #0
 800615c:	d108      	bne.n	8006170 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800615e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006162:	2101      	movs	r1, #1
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fdbf 	bl	8006ce8 <VL53L0X_SetLimitCheckValue>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006170:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8006174:	2b00      	cmp	r3, #0
 8006176:	d108      	bne.n	800618a <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006178:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800617c:	2102      	movs	r1, #2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fdb2 	bl	8006ce8 <VL53L0X_SetLimitCheckValue>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800618a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006192:	2200      	movs	r2, #0
 8006194:	2103      	movs	r1, #3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fda6 	bl	8006ce8 <VL53L0X_SetLimitCheckValue>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061a2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	22ff      	movs	r2, #255	; 0xff
 80061ae:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80061b2:	22ff      	movs	r2, #255	; 0xff
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f004 fdde 	bl	800ad78 <VL53L0X_WrByte>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 80061ca:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 80061da:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3790      	adds	r7, #144	; 0x90
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	000970a4 	.word	0x000970a4
 80061ec:	044c0000 	.word	0x044c0000
 80061f0:	0003cccc 	.word	0x0003cccc
 80061f4:	02ee0000 	.word	0x02ee0000
 80061f8:	00074ccc 	.word	0x00074ccc
 80061fc:	02260000 	.word	0x02260000

08006200 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b0ac      	sub	sp, #176	; 0xb0
 8006204:	af02      	add	r7, sp, #8
 8006206:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006208:	2300      	movs	r3, #0
 800620a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800620e:	f107 031c 	add.w	r3, r7, #28
 8006212:	2278      	movs	r2, #120	; 0x78
 8006214:	2100      	movs	r1, #0
 8006216:	4618      	mov	r0, r3
 8006218:	f004 ff18 	bl	800b04c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800623e:	2101      	movs	r1, #1
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f002 fb2c 	bl	800889e <VL53L0X_get_info_from_device>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8006252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800625c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006260:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006264:	2b01      	cmp	r3, #1
 8006266:	d80f      	bhi.n	8006288 <VL53L0X_StaticInit+0x88>
 8006268:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800626c:	2b01      	cmp	r3, #1
 800626e:	d103      	bne.n	8006278 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006274:	2b20      	cmp	r3, #32
 8006276:	d807      	bhi.n	8006288 <VL53L0X_StaticInit+0x88>
 8006278:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10f      	bne.n	80062a0 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8006280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006284:	2b0c      	cmp	r3, #12
 8006286:	d90b      	bls.n	80062a0 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006288:	f107 0218 	add.w	r2, r7, #24
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fda8 	bl	8007de8 <VL53L0X_perform_ref_spad_management>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800629e:	e00a      	b.n	80062b6 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80062a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80062a4:	461a      	mov	r2, r3
 80062a6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 ffa8 	bl	8008200 <VL53L0X_set_reference_spads>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80062b6:	4b93      	ldr	r3, [pc, #588]	; (8006504 <VL53L0X_StaticInit+0x304>)
 80062b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80062bc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d111      	bne.n	80062e8 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80062ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80062ce:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80062dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062e0:	e002      	b.n	80062e8 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80062e2:	4b88      	ldr	r3, [pc, #544]	; (8006504 <VL53L0X_StaticInit+0x304>)
 80062e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 80062e8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d107      	bne.n	8006300 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 80062f0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f003 fe6d 	bl	8009fd4 <VL53L0X_load_tuning_settings>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006300:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006308:	2300      	movs	r3, #0
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2304      	movs	r3, #4
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f99c 	bl	8007650 <VL53L0X_SetGpioConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800631e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006322:	2b00      	cmp	r3, #0
 8006324:	d121      	bne.n	800636a <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006326:	2201      	movs	r2, #1
 8006328:	21ff      	movs	r1, #255	; 0xff
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f004 fd24 	bl	800ad78 <VL53L0X_WrByte>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006336:	f107 031a 	add.w	r3, r7, #26
 800633a:	461a      	mov	r2, r3
 800633c:	2184      	movs	r1, #132	; 0x84
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f004 fdc6 	bl	800aed0 <VL53L0X_RdWord>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800634c:	4313      	orrs	r3, r2
 800634e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006352:	2200      	movs	r2, #0
 8006354:	21ff      	movs	r1, #255	; 0xff
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f004 fd0e 	bl	800ad78 <VL53L0X_WrByte>
 800635c:	4603      	mov	r3, r0
 800635e:	461a      	mov	r2, r3
 8006360:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006364:	4313      	orrs	r3, r2
 8006366:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800636a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	461a      	mov	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800637e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006382:	2b00      	cmp	r3, #0
 8006384:	d108      	bne.n	8006398 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006386:	f107 031c 	add.w	r3, r7, #28
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8c9 	bl	8006524 <VL53L0X_GetDeviceParameters>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8006398:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800639c:	2b00      	cmp	r3, #0
 800639e:	d110      	bne.n	80063c2 <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80063a0:	f107 0319 	add.w	r3, r7, #25
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9b1 	bl	800670e <VL53L0X_GetFractionEnable>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 80063b2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80063ba:	7e7a      	ldrb	r2, [r7, #25]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 80063c2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d107      	bne.n	80063da <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3308      	adds	r3, #8
 80063ce:	f107 011c 	add.w	r1, r7, #28
 80063d2:	2278      	movs	r2, #120	; 0x78
 80063d4:	4618      	mov	r0, r3
 80063d6:	f004 fe2b 	bl	800b030 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80063da:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d111      	bne.n	8006406 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 80063e2:	f107 0319 	add.w	r3, r7, #25
 80063e6:	461a      	mov	r2, r3
 80063e8:	2101      	movs	r1, #1
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f004 fd46 	bl	800ae7c <VL53L0X_RdByte>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80063f6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80063fe:	7e7a      	ldrb	r2, [r7, #25]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006406:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d107      	bne.n	800641e <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9f0 	bl	80067f8 <VL53L0X_SetSequenceStepEnable>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800641e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006426:	2200      	movs	r2, #0
 8006428:	2102      	movs	r1, #2
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9e4 	bl	80067f8 <VL53L0X_SetSequenceStepEnable>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006436:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006446:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 800644e:	f107 0313 	add.w	r3, r7, #19
 8006452:	461a      	mov	r2, r3
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9b6 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006462:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800646a:	7cfa      	ldrb	r2, [r7, #19]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006472:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800647a:	f107 0313 	add.w	r3, r7, #19
 800647e:	461a      	mov	r2, r3
 8006480:	2101      	movs	r1, #1
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9a0 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800648e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006496:	7cfa      	ldrb	r2, [r7, #19]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800649e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 80064a6:	f107 030c 	add.w	r3, r7, #12
 80064aa:	461a      	mov	r2, r3
 80064ac:	2103      	movs	r1, #3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f002 ff78 	bl	80093a4 <get_sequence_step_timeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064ba:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80064ca:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 80064d2:	f107 030c 	add.w	r3, r7, #12
 80064d6:	461a      	mov	r2, r3
 80064d8:	2104      	movs	r1, #4
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 ff62 	bl	80093a4 <get_sequence_step_timeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064e6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064f6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	37a8      	adds	r7, #168	; 0xa8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000014 	.word	0x20000014

08006508 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006510:	239d      	movs	r3, #157	; 0x9d
 8006512:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8d6 	bl	80066e8 <VL53L0X_GetDeviceMode>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa9e 	bl	8006a90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006554:	4603      	mov	r3, r0
 8006556:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d107      	bne.n	800657e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	3310      	adds	r3, #16
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fad4 	bl	8006b22 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800657e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fc9d 	bl	8005ecc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d134      	bne.n	8006608 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	e02a      	b.n	80065fa <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80065a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d12a      	bne.n	8006602 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	b299      	uxth	r1, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	3308      	adds	r3, #8
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	3304      	adds	r3, #4
 80065bc:	461a      	mov	r2, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fbf4 	bl	8006dac <VL53L0X_GetLimitCheckValue>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80065ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d117      	bne.n	8006606 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	b299      	uxth	r1, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3318      	adds	r3, #24
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4413      	add	r3, r2
 80065e2:	461a      	mov	r2, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb5b 	bl	8006ca0 <VL53L0X_GetLimitCheckEnable>
 80065ea:	4603      	mov	r3, r0
 80065ec:	461a      	mov	r2, r3
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b05      	cmp	r3, #5
 80065fe:	ddd1      	ble.n	80065a4 <VL53L0X_GetDeviceParameters+0x80>
 8006600:	e002      	b.n	8006608 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006602:	bf00      	nop
 8006604:	e000      	b.n	8006608 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006606:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d107      	bne.n	8006620 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	3374      	adds	r3, #116	; 0x74
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fc56 	bl	8006ec8 <VL53L0X_GetWrapAroundCheckEnable>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d107      	bne.n	8006638 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f89f 	bl	8006772 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d120      	bne.n	8006682 <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8006640:	2300      	movs	r3, #0
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	e01a      	b.n	800667c <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3310      	adds	r3, #16
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	330e      	adds	r3, #14
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	3316      	adds	r3, #22
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	3314      	adds	r3, #20
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3301      	adds	r3, #1
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b06      	cmp	r3, #6
 8006680:	dde1      	ble.n	8006646 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	2b15      	cmp	r3, #21
 80066a4:	bf8c      	ite	hi
 80066a6:	2201      	movhi	r2, #1
 80066a8:	2200      	movls	r2, #0
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	2a00      	cmp	r2, #0
 80066ae:	d10e      	bne.n	80066ce <VL53L0X_SetDeviceMode+0x3e>
 80066b0:	2201      	movs	r2, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <VL53L0X_SetDeviceMode+0x54>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	78fa      	ldrb	r2, [r7, #3]
 80066ca:	721a      	strb	r2, [r3, #8]
		break;
 80066cc:	e001      	b.n	80066d2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80066ce:	23f8      	movs	r3, #248	; 0xf8
 80066d0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	0030000b 	.word	0x0030000b

080066e8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7a1a      	ldrb	r2, [r3, #8]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80066fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	2109      	movs	r1, #9
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f004 fbab 	bl	800ae7c <VL53L0X_RdByte>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800672a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f003 fab4 	bl	8009cca <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f003 fb74 	bl	8009e70 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800678c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
 80067a4:	4613      	mov	r3, r2
 80067a6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80067ac:	78ba      	ldrb	r2, [r7, #2]
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 ffc9 	bl	800974a <VL53L0X_set_vcsel_pulse_period>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80067bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	460b      	mov	r3, r1
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f003 fa3b 	bl	8009c5c <VL53L0X_get_vcsel_pulse_period>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80067ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
 8006804:	4613      	mov	r3, r2
 8006806:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006814:	f107 030f 	add.w	r3, r7, #15
 8006818:	461a      	mov	r2, r3
 800681a:	2101      	movs	r1, #1
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f004 fb2d 	bl	800ae7c <VL53L0X_RdByte>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800682a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d15a      	bne.n	80068e8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006832:	78bb      	ldrb	r3, [r7, #2]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d12b      	bne.n	8006890 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	2b04      	cmp	r3, #4
 800683c:	d825      	bhi.n	800688a <VL53L0X_SetSequenceStepEnable+0x92>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006859 	.word	0x08006859
 8006848:	08006863 	.word	0x08006863
 800684c:	0800686d 	.word	0x0800686d
 8006850:	08006877 	.word	0x08006877
 8006854:	08006881 	.word	0x08006881
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006858:	7dbb      	ldrb	r3, [r7, #22]
 800685a:	f043 0310 	orr.w	r3, r3, #16
 800685e:	75bb      	strb	r3, [r7, #22]
				break;
 8006860:	e043      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006862:	7dbb      	ldrb	r3, [r7, #22]
 8006864:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006868:	75bb      	strb	r3, [r7, #22]
				break;
 800686a:	e03e      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800686c:	7dbb      	ldrb	r3, [r7, #22]
 800686e:	f043 0304 	orr.w	r3, r3, #4
 8006872:	75bb      	strb	r3, [r7, #22]
				break;
 8006874:	e039      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006876:	7dbb      	ldrb	r3, [r7, #22]
 8006878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687c:	75bb      	strb	r3, [r7, #22]
				break;
 800687e:	e034      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006880:	7dbb      	ldrb	r3, [r7, #22]
 8006882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006886:	75bb      	strb	r3, [r7, #22]
				break;
 8006888:	e02f      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800688a:	23fc      	movs	r3, #252	; 0xfc
 800688c:	75fb      	strb	r3, [r7, #23]
 800688e:	e02c      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	2b04      	cmp	r3, #4
 8006894:	d825      	bhi.n	80068e2 <VL53L0X_SetSequenceStepEnable+0xea>
 8006896:	a201      	add	r2, pc, #4	; (adr r2, 800689c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068b1 	.word	0x080068b1
 80068a0:	080068bb 	.word	0x080068bb
 80068a4:	080068c5 	.word	0x080068c5
 80068a8:	080068cf 	.word	0x080068cf
 80068ac:	080068d9 	.word	0x080068d9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80068b0:	7dbb      	ldrb	r3, [r7, #22]
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	75bb      	strb	r3, [r7, #22]
				break;
 80068b8:	e017      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80068ba:	7dbb      	ldrb	r3, [r7, #22]
 80068bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80068c0:	75bb      	strb	r3, [r7, #22]
				break;
 80068c2:	e012      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80068c4:	7dbb      	ldrb	r3, [r7, #22]
 80068c6:	f023 0304 	bic.w	r3, r3, #4
 80068ca:	75bb      	strb	r3, [r7, #22]
				break;
 80068cc:	e00d      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80068ce:	7dbb      	ldrb	r3, [r7, #22]
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	75bb      	strb	r3, [r7, #22]
				break;
 80068d6:	e008      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80068d8:	7dbb      	ldrb	r3, [r7, #22]
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	75bb      	strb	r3, [r7, #22]
				break;
 80068e0:	e003      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068e2:	23fc      	movs	r3, #252	; 0xfc
 80068e4:	75fb      	strb	r3, [r7, #23]
 80068e6:	e000      	b.n	80068ea <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80068e8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	7dba      	ldrb	r2, [r7, #22]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d01e      	beq.n	8006930 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80068f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d107      	bne.n	800690a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80068fa:	7dbb      	ldrb	r3, [r7, #22]
 80068fc:	461a      	mov	r2, r3
 80068fe:	2101      	movs	r1, #1
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f004 fa39 	bl	800ad78 <VL53L0X_WrByte>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800690a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7dba      	ldrb	r2, [r7, #22]
 8006916:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800691a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006928:	6939      	ldr	r1, [r7, #16]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff ff0e 	bl	800674c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	72fb      	strb	r3, [r7, #11]
 800694a:	4613      	mov	r3, r2
 800694c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	2b04      	cmp	r3, #4
 800695c:	d836      	bhi.n	80069cc <sequence_step_enabled+0x90>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <sequence_step_enabled+0x28>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006979 	.word	0x08006979
 8006968:	0800698b 	.word	0x0800698b
 800696c:	0800699d 	.word	0x0800699d
 8006970:	080069af 	.word	0x080069af
 8006974:	080069c1 	.word	0x080069c1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006978:	7abb      	ldrb	r3, [r7, #10]
 800697a:	111b      	asrs	r3, r3, #4
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	701a      	strb	r2, [r3, #0]
		break;
 8006988:	e022      	b.n	80069d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800698a:	7abb      	ldrb	r3, [r7, #10]
 800698c:	10db      	asrs	r3, r3, #3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	701a      	strb	r2, [r3, #0]
		break;
 800699a:	e019      	b.n	80069d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800699c:	7abb      	ldrb	r3, [r7, #10]
 800699e:	109b      	asrs	r3, r3, #2
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	701a      	strb	r2, [r3, #0]
		break;
 80069ac:	e010      	b.n	80069d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80069ae:	7abb      	ldrb	r3, [r7, #10]
 80069b0:	119b      	asrs	r3, r3, #6
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	701a      	strb	r2, [r3, #0]
		break;
 80069be:	e007      	b.n	80069d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80069c0:	7abb      	ldrb	r3, [r7, #10]
 80069c2:	09db      	lsrs	r3, r3, #7
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	701a      	strb	r2, [r3, #0]
		break;
 80069ca:	e001      	b.n	80069d0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069cc:	23fc      	movs	r3, #252	; 0xfc
 80069ce:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80069f2:	f107 030e 	add.w	r3, r7, #14
 80069f6:	461a      	mov	r2, r3
 80069f8:	2101      	movs	r1, #1
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f004 fa3e 	bl	800ae7c <VL53L0X_RdByte>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006a0c:	7bba      	ldrb	r2, [r7, #14]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2100      	movs	r1, #0
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff ff92 	bl	800693c <sequence_step_enabled>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d108      	bne.n	8006a36 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006a24:	7bba      	ldrb	r2, [r7, #14]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff85 	bl	800693c <sequence_step_enabled>
 8006a32:	4603      	mov	r3, r0
 8006a34:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006a3e:	7bba      	ldrb	r2, [r7, #14]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	2102      	movs	r1, #2
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff ff78 	bl	800693c <sequence_step_enabled>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d108      	bne.n	8006a6a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006a58:	7bba      	ldrb	r2, [r7, #14]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	3303      	adds	r3, #3
 8006a5e:	2103      	movs	r1, #3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff6b 	bl	800693c <sequence_step_enabled>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d108      	bne.n	8006a84 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006a72:	7bba      	ldrb	r2, [r7, #14]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	3304      	adds	r3, #4
 8006a78:	2104      	movs	r1, #4
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ff5e 	bl	800693c <sequence_step_enabled>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006a9e:	f107 030c 	add.w	r3, r7, #12
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	21f8      	movs	r1, #248	; 0xf8
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f004 fa12 	bl	800aed0 <VL53L0X_RdWord>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d108      	bne.n	8006aca <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006ab8:	f107 0308 	add.w	r3, r7, #8
 8006abc:	461a      	mov	r2, r3
 8006abe:	2104      	movs	r1, #4
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f004 fa3d 	bl	800af40 <VL53L0X_RdDWord>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006ad2:	89bb      	ldrh	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	89ba      	ldrh	r2, [r7, #12]
 8006adc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7d1b      	ldrb	r3, [r3, #20]
 8006b0a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	7bba      	ldrb	r2, [r7, #14]
 8006b10:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006b30:	f107 030e 	add.w	r3, r7, #14
 8006b34:	461a      	mov	r2, r3
 8006b36:	2120      	movs	r1, #32
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f004 f9c9 	bl	800aed0 <VL53L0X_RdWord>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d118      	bne.n	8006b7c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006b4a:	89fb      	ldrh	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	751a      	strb	r2, [r3, #20]
 8006b62:	e00b      	b.n	8006b7c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006b64:	89fb      	ldrh	r3, [r7, #14]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
 8006b94:	4613      	mov	r3, r2
 8006b96:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006ba8:	887b      	ldrh	r3, [r7, #2]
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	d902      	bls.n	8006bb4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bae:	23fc      	movs	r3, #252	; 0xfc
 8006bb0:	75fb      	strb	r3, [r7, #23]
 8006bb2:	e05b      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006bb4:	787b      	ldrb	r3, [r7, #1]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73bb      	strb	r3, [r7, #14]
 8006bc6:	e00a      	b.n	8006bde <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bc8:	887b      	ldrh	r3, [r7, #2]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	330a      	adds	r3, #10
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006bde:	887b      	ldrh	r3, [r7, #2]
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	d841      	bhi.n	8006c68 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <VL53L0X_SetLimitCheckEnable+0x64>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c05 	.word	0x08006c05
 8006bf0:	08006c0f 	.word	0x08006c0f
 8006bf4:	08006c25 	.word	0x08006c25
 8006bf8:	08006c2f 	.word	0x08006c2f
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c51 	.word	0x08006c51

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7bfa      	ldrb	r2, [r7, #15]
 8006c08:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006c0c:	e02e      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	2144      	movs	r1, #68	; 0x44
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f004 f8d1 	bl	800adc0 <VL53L0X_WrWord>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

			break;
 8006c22:	e023      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006c2c:	e01e      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7bfa      	ldrb	r2, [r7, #15]
 8006c32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006c36:	e019      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006c3e:	7b7b      	ldrb	r3, [r7, #13]
 8006c40:	22fe      	movs	r2, #254	; 0xfe
 8006c42:	2160      	movs	r1, #96	; 0x60
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f004 f8e5 	bl	800ae14 <VL53L0X_UpdateByte>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006c4e:	e00d      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006c56:	7b7b      	ldrb	r3, [r7, #13]
 8006c58:	22ef      	movs	r2, #239	; 0xef
 8006c5a:	2160      	movs	r1, #96	; 0x60
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f004 f8d9 	bl	800ae14 <VL53L0X_UpdateByte>
 8006c62:	4603      	mov	r3, r0
 8006c64:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006c66:	e001      	b.n	8006c6c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c68:	23fc      	movs	r3, #252	; 0xfc
 8006c6a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10f      	bne.n	8006c94 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006c74:	787b      	ldrb	r3, [r7, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c7a:	887b      	ldrh	r3, [r7, #2]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2020 	strb.w	r2, [r3, #32]
 8006c86:	e005      	b.n	8006c94 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d905      	bls.n	8006cc4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cb8:	23fc      	movs	r3, #252	; 0xfc
 8006cba:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e008      	b.n	8006cd6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006cc4:	897b      	ldrh	r3, [r7, #10]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cce:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	7dba      	ldrb	r2, [r7, #22]
 8006cd4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006cfa:	897b      	ldrh	r3, [r7, #10]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d04:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006d06:	7dbb      	ldrb	r3, [r7, #22]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d0c:	897b      	ldrh	r3, [r7, #10]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	330a      	adds	r3, #10
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e040      	b.n	8006d9e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006d1c:	897b      	ldrh	r3, [r7, #10]
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	d830      	bhi.n	8006d84 <VL53L0X_SetLimitCheckValue+0x9c>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <VL53L0X_SetLimitCheckValue+0x40>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d41 	.word	0x08006d41
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	08006d5f 	.word	0x08006d5f
 8006d34:	08006d67 	.word	0x08006d67
 8006d38:	08006d6f 	.word	0x08006d6f
 8006d3c:	08006d6f 	.word	0x08006d6f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006d46:	e01f      	b.n	8006d88 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2144      	movs	r1, #68	; 0x44
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f004 f834 	bl	800adc0 <VL53L0X_WrWord>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006d5c:	e014      	b.n	8006d88 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006d64:	e010      	b.n	8006d88 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006d6c:	e00c      	b.n	8006d88 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	2164      	movs	r1, #100	; 0x64
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f004 f821 	bl	800adc0 <VL53L0X_WrWord>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006d82:	e001      	b.n	8006d88 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d84:	23fc      	movs	r3, #252	; 0xfc
 8006d86:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d90:	897b      	ldrh	r3, [r7, #10]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	330a      	adds	r3, #10
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop

08006dac <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	460b      	mov	r3, r1
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006dc2:	897b      	ldrh	r3, [r7, #10]
 8006dc4:	2b05      	cmp	r3, #5
 8006dc6:	d847      	bhi.n	8006e58 <VL53L0X_GetLimitCheckValue+0xac>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <VL53L0X_GetLimitCheckValue+0x24>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006de9 	.word	0x08006de9
 8006dd4:	08006df5 	.word	0x08006df5
 8006dd8:	08006e1b 	.word	0x08006e1b
 8006ddc:	08006e27 	.word	0x08006e27
 8006de0:	08006e33 	.word	0x08006e33
 8006de4:	08006e33 	.word	0x08006e33

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	77bb      	strb	r3, [r7, #30]
		break;
 8006df2:	e033      	b.n	8006e5c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006df4:	f107 0316 	add.w	r3, r7, #22
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2144      	movs	r1, #68	; 0x44
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f004 f867 	bl	800aed0 <VL53L0X_RdWord>
 8006e02:	4603      	mov	r3, r0
 8006e04:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006e06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006e0e:	8afb      	ldrh	r3, [r7, #22]
 8006e10:	025b      	lsls	r3, r3, #9
 8006e12:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006e14:	2301      	movs	r3, #1
 8006e16:	77bb      	strb	r3, [r7, #30]
		break;
 8006e18:	e020      	b.n	8006e5c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	77bb      	strb	r3, [r7, #30]
		break;
 8006e24:	e01a      	b.n	8006e5c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	77bb      	strb	r3, [r7, #30]
		break;
 8006e30:	e014      	b.n	8006e5c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006e32:	f107 0316 	add.w	r3, r7, #22
 8006e36:	461a      	mov	r2, r3
 8006e38:	2164      	movs	r1, #100	; 0x64
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f004 f848 	bl	800aed0 <VL53L0X_RdWord>
 8006e40:	4603      	mov	r3, r0
 8006e42:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006e44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006e4c:	8afb      	ldrh	r3, [r7, #22]
 8006e4e:	025b      	lsls	r3, r3, #9
 8006e50:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	77bb      	strb	r3, [r7, #30]
		break;
 8006e56:	e001      	b.n	8006e5c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e58:	23fc      	movs	r3, #252	; 0xfc
 8006e5a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d12a      	bne.n	8006eba <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006e64:	7fbb      	ldrb	r3, [r7, #30]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d124      	bne.n	8006eb4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d110      	bne.n	8006e92 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006e70:	897b      	ldrh	r3, [r7, #10]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	330a      	adds	r3, #10
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006e84:	897b      	ldrh	r3, [r7, #10]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4413      	add	r3, r2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2020 	strb.w	r2, [r3, #32]
 8006e90:	e013      	b.n	8006eba <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006e98:	897b      	ldrh	r3, [r7, #10]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	330a      	adds	r3, #10
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006ea6:	897b      	ldrh	r3, [r7, #10]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2020 	strb.w	r2, [r3, #32]
 8006eb2:	e002      	b.n	8006eba <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006eba:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3720      	adds	r7, #32
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop

08006ec8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006ed6:	f107 030e 	add.w	r3, r7, #14
 8006eda:	461a      	mov	r2, r3
 8006edc:	2101      	movs	r1, #1
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f003 ffcc 	bl	800ae7c <VL53L0X_RdByte>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10e      	bne.n	8006f0e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006ef0:	7bba      	ldrb	r2, [r7, #14]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	b25b      	sxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da03      	bge.n	8006f08 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2201      	movs	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	e002      	b.n	8006f0e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006f38:	f107 030e 	add.w	r3, r7, #14
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fbd2 	bl	80066e8 <VL53L0X_GetDeviceMode>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8006f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d107      	bne.n	8006f60 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f924 	bl	80071a4 <VL53L0X_StartMeasurement>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fbcb 	bl	8008704 <VL53L0X_measurement_poll_for_completion>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2203      	movs	r2, #3
 8006f84:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8006f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f001 fb6d 	bl	800868a <VL53L0X_perform_ref_calibration>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8006fd6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8006fd8:	7dbb      	ldrb	r3, [r7, #22]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	f000 8093 	beq.w	8007106 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	f300 80d6 	bgt.w	8007192 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d002      	beq.n	8006ff0 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d047      	beq.n	800707e <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8006fee:	e0d0      	b.n	8007192 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	f107 0210 	add.w	r2, r7, #16
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fc4c 	bl	8007898 <VL53L0X_GetInterruptThresholds>
 8007000:	4603      	mov	r3, r0
 8007002:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800700a:	f240 80bd 	bls.w	8007188 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 800700e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 80b8 	bne.w	8007188 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 800701e:	4960      	ldr	r1, [pc, #384]	; (80071a0 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 ffd7 	bl	8009fd4 <VL53L0X_load_tuning_settings>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800702a:	e0ad      	b.n	8007188 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800702c:	2204      	movs	r2, #4
 800702e:	21ff      	movs	r1, #255	; 0xff
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f003 fea1 	bl	800ad78 <VL53L0X_WrByte>
 8007036:	4603      	mov	r3, r0
 8007038:	461a      	mov	r2, r3
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	4313      	orrs	r3, r2
 800703e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007040:	2200      	movs	r2, #0
 8007042:	2170      	movs	r1, #112	; 0x70
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f003 fe97 	bl	800ad78 <VL53L0X_WrByte>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	4313      	orrs	r3, r2
 8007052:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007054:	2200      	movs	r2, #0
 8007056:	21ff      	movs	r1, #255	; 0xff
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f003 fe8d 	bl	800ad78 <VL53L0X_WrByte>
 800705e:	4603      	mov	r3, r0
 8007060:	461a      	mov	r2, r3
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	4313      	orrs	r3, r2
 8007066:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007068:	2200      	movs	r2, #0
 800706a:	2180      	movs	r1, #128	; 0x80
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f003 fe83 	bl	800ad78 <VL53L0X_WrByte>
 8007072:	4603      	mov	r3, r0
 8007074:	461a      	mov	r2, r3
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	4313      	orrs	r3, r2
 800707a:	75fb      	strb	r3, [r7, #23]
		break;
 800707c:	e084      	b.n	8007188 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	f107 0210 	add.w	r2, r7, #16
 8007086:	2101      	movs	r1, #1
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fc05 	bl	8007898 <VL53L0X_GetInterruptThresholds>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d079      	beq.n	800718c <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8007098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d175      	bne.n	800718c <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d006      	beq.n	80070b4 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 80070a6:	493e      	ldr	r1, [pc, #248]	; (80071a0 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 ff93 	bl	8009fd4 <VL53L0X_load_tuning_settings>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80070b2:	e06b      	b.n	800718c <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80070b4:	2204      	movs	r2, #4
 80070b6:	21ff      	movs	r1, #255	; 0xff
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f003 fe5d 	bl	800ad78 <VL53L0X_WrByte>
 80070be:	4603      	mov	r3, r0
 80070c0:	461a      	mov	r2, r3
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80070c8:	2200      	movs	r2, #0
 80070ca:	2170      	movs	r1, #112	; 0x70
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f003 fe53 	bl	800ad78 <VL53L0X_WrByte>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	4313      	orrs	r3, r2
 80070da:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80070dc:	2200      	movs	r2, #0
 80070de:	21ff      	movs	r1, #255	; 0xff
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f003 fe49 	bl	800ad78 <VL53L0X_WrByte>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80070f0:	2200      	movs	r2, #0
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f003 fe3f 	bl	800ad78 <VL53L0X_WrByte>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461a      	mov	r2, r3
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	4313      	orrs	r3, r2
 8007102:	75fb      	strb	r3, [r7, #23]
		break;
 8007104:	e042      	b.n	800718c <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007106:	f107 030c 	add.w	r3, r7, #12
 800710a:	f107 0210 	add.w	r2, r7, #16
 800710e:	2101      	movs	r1, #1
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fbc1 	bl	8007898 <VL53L0X_GetInterruptThresholds>
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 800711a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d136      	bne.n	8007190 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007128:	491d      	ldr	r1, [pc, #116]	; (80071a0 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f002 ff52 	bl	8009fd4 <VL53L0X_load_tuning_settings>
 8007130:	4603      	mov	r3, r0
 8007132:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8007134:	e02c      	b.n	8007190 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007136:	2204      	movs	r2, #4
 8007138:	21ff      	movs	r1, #255	; 0xff
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f003 fe1c 	bl	800ad78 <VL53L0X_WrByte>
 8007140:	4603      	mov	r3, r0
 8007142:	461a      	mov	r2, r3
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	4313      	orrs	r3, r2
 8007148:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800714a:	2200      	movs	r2, #0
 800714c:	2170      	movs	r1, #112	; 0x70
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f003 fe12 	bl	800ad78 <VL53L0X_WrByte>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	4313      	orrs	r3, r2
 800715c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800715e:	2200      	movs	r2, #0
 8007160:	21ff      	movs	r1, #255	; 0xff
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f003 fe08 	bl	800ad78 <VL53L0X_WrByte>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	4313      	orrs	r3, r2
 8007170:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007172:	2200      	movs	r2, #0
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f003 fdfe 	bl	800ad78 <VL53L0X_WrByte>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	4313      	orrs	r3, r2
 8007184:	75fb      	strb	r3, [r7, #23]
		break;
 8007186:	e003      	b.n	8007190 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8007188:	bf00      	nop
 800718a:	e002      	b.n	8007192 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800718c:	bf00      	nop
 800718e:	e000      	b.n	8007192 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8007190:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007192:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000108 	.word	0x20000108

080071a4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80071b4:	f107 030e 	add.w	r3, r7, #14
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fa94 	bl	80066e8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80071c0:	2201      	movs	r2, #1
 80071c2:	2180      	movs	r1, #128	; 0x80
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f003 fdd7 	bl	800ad78 <VL53L0X_WrByte>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071ce:	2201      	movs	r2, #1
 80071d0:	21ff      	movs	r1, #255	; 0xff
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f003 fdd0 	bl	800ad78 <VL53L0X_WrByte>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f003 fdc9 	bl	800ad78 <VL53L0X_WrByte>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80071f0:	461a      	mov	r2, r3
 80071f2:	2191      	movs	r1, #145	; 0x91
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f003 fdbf 	bl	800ad78 <VL53L0X_WrByte>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80071fe:	2201      	movs	r2, #1
 8007200:	2100      	movs	r1, #0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f003 fdb8 	bl	800ad78 <VL53L0X_WrByte>
 8007208:	4603      	mov	r3, r0
 800720a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800720c:	2200      	movs	r2, #0
 800720e:	21ff      	movs	r1, #255	; 0xff
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f003 fdb1 	bl	800ad78 <VL53L0X_WrByte>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800721a:	2200      	movs	r2, #0
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f003 fdaa 	bl	800ad78 <VL53L0X_WrByte>
 8007224:	4603      	mov	r3, r0
 8007226:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d054      	beq.n	80072d8 <VL53L0X_StartMeasurement+0x134>
 800722e:	2b03      	cmp	r3, #3
 8007230:	dc6c      	bgt.n	800730c <VL53L0X_StartMeasurement+0x168>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <VL53L0X_StartMeasurement+0x98>
 8007236:	2b01      	cmp	r3, #1
 8007238:	d034      	beq.n	80072a4 <VL53L0X_StartMeasurement+0x100>
 800723a:	e067      	b.n	800730c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800723c:	2201      	movs	r2, #1
 800723e:	2100      	movs	r1, #0
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f003 fd99 	bl	800ad78 <VL53L0X_WrByte>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800724e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d15d      	bne.n	8007312 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007260:	f107 030d 	add.w	r3, r7, #13
 8007264:	461a      	mov	r2, r3
 8007266:	2100      	movs	r1, #0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f003 fe07 	bl	800ae7c <VL53L0X_RdByte>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3301      	adds	r3, #1
 8007276:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007278:	7b7a      	ldrb	r2, [r7, #13]
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	4013      	ands	r3, r2
 800727e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007280:	7bfa      	ldrb	r2, [r7, #15]
 8007282:	429a      	cmp	r2, r3
 8007284:	d107      	bne.n	8007296 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d103      	bne.n	8007296 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007294:	d3e1      	bcc.n	800725a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800729c:	d339      	bcc.n	8007312 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800729e:	23f9      	movs	r3, #249	; 0xf9
 80072a0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80072a2:	e036      	b.n	8007312 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80072a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80072ac:	2101      	movs	r1, #1
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff fe86 	bl	8006fc0 <VL53L0X_CheckAndLoadInterruptSettings>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80072b8:	2202      	movs	r2, #2
 80072ba:	2100      	movs	r1, #0
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f003 fd5b 	bl	800ad78 <VL53L0X_WrByte>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80072c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d123      	bne.n	8007316 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2204      	movs	r2, #4
 80072d2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80072d6:	e01e      	b.n	8007316 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80072d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80072e0:	2101      	movs	r1, #1
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fe6c 	bl	8006fc0 <VL53L0X_CheckAndLoadInterruptSettings>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80072ec:	2204      	movs	r2, #4
 80072ee:	2100      	movs	r1, #0
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f003 fd41 	bl	800ad78 <VL53L0X_WrByte>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80072fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2204      	movs	r2, #4
 8007306:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800730a:	e006      	b.n	800731a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800730c:	23f8      	movs	r3, #248	; 0xf8
 800730e:	75fb      	strb	r3, [r7, #23]
 8007310:	e004      	b.n	800731c <VL53L0X_StartMeasurement+0x178>
		break;
 8007312:	bf00      	nop
 8007314:	e002      	b.n	800731c <VL53L0X_StartMeasurement+0x178>
		break;
 8007316:	bf00      	nop
 8007318:	e000      	b.n	800731c <VL53L0X_StartMeasurement+0x178>
		break;
 800731a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800731c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800733c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b04      	cmp	r3, #4
 8007342:	d112      	bne.n	800736a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fb1a 	bl	8007984 <VL53L0X_GetInterruptMaskStatus>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d103      	bne.n	8007362 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2201      	movs	r2, #1
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e01c      	b.n	800739c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e018      	b.n	800739c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800736a:	f107 030d 	add.w	r3, r7, #13
 800736e:	461a      	mov	r2, r3
 8007370:	2114      	movs	r1, #20
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f003 fd82 	bl	800ae7c <VL53L0X_RdByte>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800737c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007384:	7b7b      	ldrb	r3, [r7, #13]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e002      	b.n	800739c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800739c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80073a8:	b5b0      	push	{r4, r5, r7, lr}
 80073aa:	b096      	sub	sp, #88	; 0x58
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80073b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80073bc:	230c      	movs	r3, #12
 80073be:	2114      	movs	r1, #20
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f003 fcad 	bl	800ad20 <VL53L0X_ReadMulti>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80073cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f040 80d1 	bne.w	8007578 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2200      	movs	r2, #0
 80073da:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 80073e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	4413      	add	r3, r2
 80073f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80073fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007402:	b29b      	uxth	r3, r3
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b29a      	uxth	r2, r3
 8007408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800740c:	b29b      	uxth	r3, r3
 800740e:	4413      	add	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	025b      	lsls	r3, r3, #9
 8007414:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800741a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 800741c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007420:	b29b      	uxth	r3, r3
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	b29a      	uxth	r2, r3
 8007426:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800742a:	b29b      	uxth	r3, r3
 800742c:	4413      	add	r3, r2
 800742e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007436:	025b      	lsls	r3, r3, #9
 8007438:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800743e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	b29a      	uxth	r2, r3
 8007448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800744c:	b29b      	uxth	r3, r3
 800744e:	4413      	add	r3, r2
 8007450:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800745a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800745c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007460:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 800746a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8007472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007476:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800747c:	d046      	beq.n	800750c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800747e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007480:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007484:	fb02 f303 	mul.w	r3, r2, r3
 8007488:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800748c:	4a57      	ldr	r2, [pc, #348]	; (80075ec <VL53L0X_GetRangingMeasurementData+0x244>)
 800748e:	fb82 1203 	smull	r1, r2, r2, r3
 8007492:	1192      	asrs	r2, r2, #6
 8007494:	17db      	asrs	r3, r3, #31
 8007496:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007498:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	7d1b      	ldrb	r3, [r3, #20]
 80074a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80074aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02c      	beq.n	800750c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80074b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	121a      	asrs	r2, r3, #8
					<= 0) {
 80074be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d10d      	bne.n	80074e0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80074c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80074cc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80074d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80074d4:	e016      	b.n	8007504 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80074d6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80074da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80074de:	e011      	b.n	8007504 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80074e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80074ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074ec:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80074f4:	121b      	asrs	r3, r3, #8
 80074f6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80074f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fa:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007500:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007504:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007508:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800750c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00d      	beq.n	8007530 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007514:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007518:	089b      	lsrs	r3, r3, #2
 800751a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007520:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007524:	b2db      	uxtb	r3, r3
 8007526:	019b      	lsls	r3, r3, #6
 8007528:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	75da      	strb	r2, [r3, #23]
 800752e:	e006      	b.n	800753e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007536:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2200      	movs	r2, #0
 800753c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800753e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007542:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007546:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	4613      	mov	r3, r2
 8007552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f003 f98f 	bl	800a878 <VL53L0X_get_pal_range_status>
 800755a:	4603      	mov	r3, r0
 800755c:	461a      	mov	r2, r3
 800755e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007562:	4313      	orrs	r3, r2
 8007564:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007568:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007570:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007578:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800757c:	2b00      	cmp	r3, #0
 800757e:	d12f      	bne.n	80075e0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f107 040c 	add.w	r4, r7, #12
 8007586:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800758a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800758c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007592:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800759a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80075a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80075a8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80075ae:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80075b4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80075ba:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80075c0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80075c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80075d0:	f107 050c 	add.w	r5, r7, #12
 80075d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80075dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075e0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3750      	adds	r7, #80	; 0x50
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bdb0      	pop	{r4, r5, r7, pc}
 80075ec:	10624dd3 	.word	0x10624dd3

080075f0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff f845 	bl	8006690 <VL53L0X_SetDeviceMode>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800760a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fc8a 	bl	8006f2c <VL53L0X_PerformSingleMeasurement>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800761c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d105      	bne.n	8007630 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff febe 	bl	80073a8 <VL53L0X_GetRangingMeasurementData>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d105      	bne.n	8007644 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007638:	2100      	movs	r1, #0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f962 	bl	8007904 <VL53L0X_ClearInterruptMask>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	461a      	mov	r2, r3
 800765e:	4603      	mov	r3, r0
 8007660:	70fb      	strb	r3, [r7, #3]
 8007662:	460b      	mov	r3, r1
 8007664:	70bb      	strb	r3, [r7, #2]
 8007666:	4613      	mov	r3, r2
 8007668:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007674:	23f6      	movs	r3, #246	; 0xf6
 8007676:	73fb      	strb	r3, [r7, #15]
 8007678:	e107      	b.n	800788a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800767a:	78bb      	ldrb	r3, [r7, #2]
 800767c:	2b14      	cmp	r3, #20
 800767e:	d110      	bne.n	80076a2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007680:	7e3b      	ldrb	r3, [r7, #24]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007686:	2310      	movs	r3, #16
 8007688:	73bb      	strb	r3, [r7, #14]
 800768a:	e001      	b.n	8007690 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	461a      	mov	r2, r3
 8007694:	2184      	movs	r1, #132	; 0x84
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f003 fb6e 	bl	800ad78 <VL53L0X_WrByte>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
 80076a0:	e0f3      	b.n	800788a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80076a2:	78bb      	ldrb	r3, [r7, #2]
 80076a4:	2b15      	cmp	r3, #21
 80076a6:	f040 8097 	bne.w	80077d8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80076aa:	2201      	movs	r2, #1
 80076ac:	21ff      	movs	r1, #255	; 0xff
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f003 fb62 	bl	800ad78 <VL53L0X_WrByte>
 80076b4:	4603      	mov	r3, r0
 80076b6:	461a      	mov	r2, r3
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80076be:	2200      	movs	r2, #0
 80076c0:	2100      	movs	r1, #0
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f003 fb58 	bl	800ad78 <VL53L0X_WrByte>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80076d2:	2200      	movs	r2, #0
 80076d4:	21ff      	movs	r1, #255	; 0xff
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f003 fb4e 	bl	800ad78 <VL53L0X_WrByte>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80076e6:	2201      	movs	r2, #1
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f003 fb44 	bl	800ad78 <VL53L0X_WrByte>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80076fa:	2202      	movs	r2, #2
 80076fc:	2185      	movs	r1, #133	; 0x85
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f003 fb3a 	bl	800ad78 <VL53L0X_WrByte>
 8007704:	4603      	mov	r3, r0
 8007706:	461a      	mov	r2, r3
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	4313      	orrs	r3, r2
 800770c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800770e:	2204      	movs	r2, #4
 8007710:	21ff      	movs	r1, #255	; 0xff
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f003 fb30 	bl	800ad78 <VL53L0X_WrByte>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	4313      	orrs	r3, r2
 8007720:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007722:	2200      	movs	r2, #0
 8007724:	21cd      	movs	r1, #205	; 0xcd
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f003 fb26 	bl	800ad78 <VL53L0X_WrByte>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4313      	orrs	r3, r2
 8007734:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007736:	2211      	movs	r2, #17
 8007738:	21cc      	movs	r1, #204	; 0xcc
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f003 fb1c 	bl	800ad78 <VL53L0X_WrByte>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	4313      	orrs	r3, r2
 8007748:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800774a:	2207      	movs	r2, #7
 800774c:	21ff      	movs	r1, #255	; 0xff
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f003 fb12 	bl	800ad78 <VL53L0X_WrByte>
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	4313      	orrs	r3, r2
 800775c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800775e:	2200      	movs	r2, #0
 8007760:	21be      	movs	r1, #190	; 0xbe
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f003 fb08 	bl	800ad78 <VL53L0X_WrByte>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4313      	orrs	r3, r2
 8007770:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007772:	2206      	movs	r2, #6
 8007774:	21ff      	movs	r1, #255	; 0xff
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f003 fafe 	bl	800ad78 <VL53L0X_WrByte>
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4313      	orrs	r3, r2
 8007784:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007786:	2209      	movs	r2, #9
 8007788:	21cc      	movs	r1, #204	; 0xcc
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f003 faf4 	bl	800ad78 <VL53L0X_WrByte>
 8007790:	4603      	mov	r3, r0
 8007792:	461a      	mov	r2, r3
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	4313      	orrs	r3, r2
 8007798:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800779a:	2200      	movs	r2, #0
 800779c:	21ff      	movs	r1, #255	; 0xff
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f003 faea 	bl	800ad78 <VL53L0X_WrByte>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461a      	mov	r2, r3
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80077ae:	2201      	movs	r2, #1
 80077b0:	21ff      	movs	r1, #255	; 0xff
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f003 fae0 	bl	800ad78 <VL53L0X_WrByte>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	4313      	orrs	r3, r2
 80077c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077c2:	2200      	movs	r2, #0
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f003 fad6 	bl	800ad78 <VL53L0X_WrByte>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	73fb      	strb	r3, [r7, #15]
 80077d6:	e058      	b.n	800788a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80077d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d121      	bne.n	8007824 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80077e0:	787b      	ldrb	r3, [r7, #1]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d81b      	bhi.n	800781e <VL53L0X_SetGpioConfig+0x1ce>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <VL53L0X_SetGpioConfig+0x19c>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007801 	.word	0x08007801
 80077f0:	08007807 	.word	0x08007807
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007813 	.word	0x08007813
 80077fc:	08007819 	.word	0x08007819
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007800:	2300      	movs	r3, #0
 8007802:	73bb      	strb	r3, [r7, #14]
				break;
 8007804:	e00f      	b.n	8007826 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007806:	2301      	movs	r3, #1
 8007808:	73bb      	strb	r3, [r7, #14]
				break;
 800780a:	e00c      	b.n	8007826 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800780c:	2302      	movs	r3, #2
 800780e:	73bb      	strb	r3, [r7, #14]
				break;
 8007810:	e009      	b.n	8007826 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007812:	2303      	movs	r3, #3
 8007814:	73bb      	strb	r3, [r7, #14]
				break;
 8007816:	e006      	b.n	8007826 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007818:	2304      	movs	r3, #4
 800781a:	73bb      	strb	r3, [r7, #14]
				break;
 800781c:	e003      	b.n	8007826 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800781e:	23f5      	movs	r3, #245	; 0xf5
 8007820:	73fb      	strb	r3, [r7, #15]
 8007822:	e000      	b.n	8007826 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007824:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d107      	bne.n	800783e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	461a      	mov	r2, r3
 8007832:	210a      	movs	r1, #10
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f003 fa9f 	bl	800ad78 <VL53L0X_WrByte>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800783e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10f      	bne.n	8007866 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007846:	7e3b      	ldrb	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	73bb      	strb	r3, [r7, #14]
 8007850:	e001      	b.n	8007856 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007852:	2310      	movs	r3, #16
 8007854:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	22ef      	movs	r2, #239	; 0xef
 800785a:	2184      	movs	r1, #132	; 0x84
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f003 fad9 	bl	800ae14 <VL53L0X_UpdateByte>
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	787a      	ldrb	r2, [r7, #1]
 8007872:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d105      	bne.n	800788a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f83f 	bl	8007904 <VL53L0X_ClearInterruptMask>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800788a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop

08007898 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	460b      	mov	r3, r1
 80078a6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 80078ac:	f107 0314 	add.w	r3, r7, #20
 80078b0:	461a      	mov	r2, r3
 80078b2:	210e      	movs	r1, #14
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f003 fb0b 	bl	800aed0 <VL53L0X_RdWord>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80078be:	8abb      	ldrh	r3, [r7, #20]
 80078c0:	045b      	lsls	r3, r3, #17
 80078c2:	461a      	mov	r2, r3
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <VL53L0X_GetInterruptThresholds+0x68>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80078cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10f      	bne.n	80078f4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	461a      	mov	r2, r3
 80078da:	210c      	movs	r1, #12
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f003 faf7 	bl	800aed0 <VL53L0X_RdWord>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80078e6:	8abb      	ldrh	r3, [r7, #20]
 80078e8:	045b      	lsls	r3, r3, #17
 80078ea:	461a      	mov	r2, r3
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <VL53L0X_GetInterruptThresholds+0x68>)
 80078ee:	4013      	ands	r3, r2
		*pThresholdHigh =
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	1ffe0000 	.word	0x1ffe0000

08007904 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007916:	2201      	movs	r2, #1
 8007918:	210b      	movs	r1, #11
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f003 fa2c 	bl	800ad78 <VL53L0X_WrByte>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007924:	2200      	movs	r2, #0
 8007926:	210b      	movs	r1, #11
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f003 fa25 	bl	800ad78 <VL53L0X_WrByte>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	4313      	orrs	r3, r2
 8007936:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007938:	f107 030d 	add.w	r3, r7, #13
 800793c:	461a      	mov	r2, r3
 800793e:	2113      	movs	r1, #19
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f003 fa9b 	bl	800ae7c <VL53L0X_RdByte>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	4313      	orrs	r3, r2
 800794e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	3301      	adds	r3, #1
 8007954:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007956:	7b7b      	ldrb	r3, [r7, #13]
 8007958:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800795c:	2b00      	cmp	r3, #0
 800795e:	d006      	beq.n	800796e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d803      	bhi.n	800796e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0d3      	beq.n	8007916 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007974:	23f4      	movs	r3, #244	; 0xf4
 8007976:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8007992:	f107 030e 	add.w	r3, r7, #14
 8007996:	461a      	mov	r2, r3
 8007998:	2113      	movs	r1, #19
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f003 fa6e 	bl	800ae7c <VL53L0X_RdByte>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 0207 	and.w	r2, r3, #7
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	f003 0318 	and.w	r3, r3, #24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80079b8:	23fa      	movs	r3, #250	; 0xfa
 80079ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80079bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fa03 	bl	8007de8 <VL53L0X_perform_ref_spad_management>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80079e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007a00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007a04:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a0a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	461a      	mov	r2, r3
 8007a12:	2128      	movs	r1, #40	; 0x28
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f003 fa5b 	bl	800aed0 <VL53L0X_RdWord>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d11e      	bne.n	8007a64 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007a26:	893b      	ldrh	r3, [r7, #8]
 8007a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007a30:	893b      	ldrh	r3, [r7, #8]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	dd0b      	ble.n	8007a54 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007a3c:	893a      	ldrh	r2, [r7, #8]
 8007a3e:	897b      	ldrh	r3, [r7, #10]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	461a      	mov	r2, r3
					* 250;
 8007a48:	23fa      	movs	r3, #250	; 0xfa
 8007a4a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e007      	b.n	8007a64 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007a54:	893b      	ldrh	r3, [r7, #8]
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	23fa      	movs	r3, #250	; 0xfa
 8007a5c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b08b      	sub	sp, #44	; 0x2c
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007a7e:	2308      	movs	r3, #8
 8007a80:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007aa0:	69b9      	ldr	r1, [r7, #24]
 8007aa2:	fb01 f202 	mul.w	r2, r1, r2
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
 8007aae:	e030      	b.n	8007b12 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	4413      	add	r3, r2
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d11e      	bne.n	8007b04 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8007ac6:	7ffa      	ldrb	r2, [r7, #31]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	fa42 f303 	asr.w	r3, r2, r3
 8007ace:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007ad4:	e016      	b.n	8007b04 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <get_next_good_spad+0x88>
				success = 1;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	4413      	add	r3, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	601a      	str	r2, [r3, #0]
				break;
 8007af6:	e009      	b.n	8007b0c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007af8:	7ffb      	ldrb	r3, [r7, #31]
 8007afa:	085b      	lsrs	r3, r3, #1
 8007afc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	3301      	adds	r3, #1
 8007b02:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d3e4      	bcc.n	8007ad6 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d202      	bcs.n	8007b20 <get_next_good_spad+0xb0>
 8007b1a:	7fbb      	ldrb	r3, [r7, #30]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0c7      	beq.n	8007ab0 <get_next_good_spad+0x40>
		}
	}
}
 8007b20:	bf00      	nop
 8007b22:	372c      	adds	r7, #44	; 0x2c
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007b3e:	4a07      	ldr	r2, [pc, #28]	; (8007b5c <is_aperture+0x30>)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <is_aperture+0x22>
		isAperture = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	200002c0 	.word	0x200002c0

08007b60 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b089      	sub	sp, #36	; 0x24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007b70:	2308      	movs	r3, #8
 8007b72:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	fb01 f202 	mul.w	r2, r1, r2
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d302      	bcc.n	8007b9e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007b98:	23ce      	movs	r3, #206	; 0xce
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e010      	b.n	8007bc0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b25a      	sxtb	r2, r3
 8007ba8:	2101      	movs	r1, #1
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb0:	b25b      	sxtb	r3, r3
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b259      	sxtb	r1, r3
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4413      	add	r3, r2
 8007bbc:	b2ca      	uxtb	r2, r1
 8007bbe:	701a      	strb	r2, [r3, #0]

	return status;
 8007bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3724      	adds	r7, #36	; 0x24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007bda:	2306      	movs	r3, #6
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	21b0      	movs	r1, #176	; 0xb0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f003 f86d 	bl	800acc0 <VL53L0X_WriteMulti>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007c00:	2306      	movs	r3, #6
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	21b0      	movs	r1, #176	; 0xb0
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f003 f88a 	bl	800ad20 <VL53L0X_ReadMulti>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c34:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c38:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c3e:	e02b      	b.n	8007c98 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007c40:	f107 031c 	add.w	r3, r7, #28
 8007c44:	6a3a      	ldr	r2, [r7, #32]
 8007c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff11 	bl	8007a70 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d103      	bne.n	8007c5e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007c56:	23ce      	movs	r3, #206	; 0xce
 8007c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007c5c:	e020      	b.n	8007ca0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	461a      	mov	r2, r3
 8007c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c64:	4413      	add	r3, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff ff60 	bl	8007b2c <is_aperture>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	7afb      	ldrb	r3, [r7, #11]
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d003      	beq.n	8007c7e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007c76:	23ce      	movs	r3, #206	; 0xce
 8007c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007c7c:	e010      	b.n	8007ca0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007c82:	6a3a      	ldr	r2, [r7, #32]
 8007c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c86:	6838      	ldr	r0, [r7, #0]
 8007c88:	f7ff ff6a 	bl	8007b60 <enable_spad_bit>
		currentSpad++;
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	3301      	adds	r3, #1
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d3cf      	bcc.n	8007c40 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007ca6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff ff8d 	bl	8007bd0 <set_ref_spad_map>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007cbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d121      	bne.n	8007d08 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	4619      	mov	r1, r3
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff ff93 	bl	8007bf6 <get_ref_spad_map>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007cda:	e011      	b.n	8007d00 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	4413      	add	r3, r2
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	f107 0114 	add.w	r1, r7, #20
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	440b      	add	r3, r1
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d003      	beq.n	8007cfa <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007cf2:	23ce      	movs	r3, #206	; 0xce
 8007cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007cf8:	e006      	b.n	8007d08 <enable_ref_spads+0xec>
			}
			i++;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d3e9      	bcc.n	8007cdc <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007d08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3730      	adds	r7, #48	; 0x30
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	; 0x28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007d34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d107      	bne.n	8007d4c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007d3c:	22c0      	movs	r2, #192	; 0xc0
 8007d3e:	2101      	movs	r1, #1
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f003 f819 	bl	800ad78 <VL53L0X_WrByte>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d108      	bne.n	8007d66 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007d54:	f107 0308 	add.w	r3, r7, #8
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff fc48 	bl	80075f0 <VL53L0X_PerformSingleRangingMeasurement>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007d66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d107      	bne.n	8007d7e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d6e:	2201      	movs	r2, #1
 8007d70:	21ff      	movs	r1, #255	; 0xff
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f003 f800 	bl	800ad78 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007d7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	21b6      	movs	r1, #182	; 0xb6
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f003 f8a0 	bl	800aed0 <VL53L0X_RdWord>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007d96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d107      	bne.n	8007dae <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	21ff      	movs	r1, #255	; 0xff
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f002 ffe8 	bl	800ad78 <VL53L0X_WrByte>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007dae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d112      	bne.n	8007ddc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f002 ffda 	bl	800ad78 <VL53L0X_WrByte>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007dca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007dd8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8007ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3728      	adds	r7, #40	; 0x28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b09d      	sub	sp, #116	; 0x74
 8007dec:	af06      	add	r7, sp, #24
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007dfa:	23b4      	movs	r3, #180	; 0xb4
 8007dfc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007e00:	2303      	movs	r3, #3
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007e04:	232c      	movs	r3, #44	; 0x2c
 8007e06:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007e14:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007e22:	2306      	movs	r3, #6
 8007e24:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8007e4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007e4e:	2300      	movs	r3, #0
 8007e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e52:	e009      	b.n	8007e68 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e64:	3301      	adds	r3, #1
 8007e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d3f1      	bcc.n	8007e54 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e70:	2201      	movs	r2, #1
 8007e72:	21ff      	movs	r1, #255	; 0xff
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f002 ff7f 	bl	800ad78 <VL53L0X_WrByte>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007e80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007e88:	2200      	movs	r2, #0
 8007e8a:	214f      	movs	r1, #79	; 0x4f
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f002 ff73 	bl	800ad78 <VL53L0X_WrByte>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007e98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d107      	bne.n	8007eb0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007ea0:	222c      	movs	r2, #44	; 0x2c
 8007ea2:	214e      	movs	r1, #78	; 0x4e
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f002 ff67 	bl	800ad78 <VL53L0X_WrByte>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d107      	bne.n	8007ec8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	21ff      	movs	r1, #255	; 0xff
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f002 ff5b 	bl	800ad78 <VL53L0X_WrByte>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007ec8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007ed0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	21b6      	movs	r1, #182	; 0xb6
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f002 ff4d 	bl	800ad78 <VL53L0X_WrByte>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007ee4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d107      	bne.n	8007efc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007eec:	2200      	movs	r2, #0
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f002 ff41 	bl	800ad78 <VL53L0X_WrByte>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007efc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007f04:	f107 0210 	add.w	r2, r7, #16
 8007f08:	f107 0111 	add.w	r1, r7, #17
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fbbb 	bl	800868a <VL53L0X_perform_ref_calibration>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007f1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d121      	bne.n	8007f66 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f28:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f30:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 8007f3e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007f42:	f107 0218 	add.w	r2, r7, #24
 8007f46:	9204      	str	r2, [sp, #16]
 8007f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f4a:	9203      	str	r2, [sp, #12]
 8007f4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f4e:	9202      	str	r2, [sp, #8]
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	4623      	mov	r3, r4
 8007f58:	4602      	mov	r2, r0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff fe5e 	bl	8007c1c <enable_ref_spads>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d174      	bne.n	8008058 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007f72:	f107 0312 	add.w	r3, r7, #18
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff fecb 	bl	8007d14 <perform_ref_signal_measurement>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007f84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d161      	bne.n	8008050 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007f8c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007f8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d25d      	bcs.n	8008050 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 8007f94:	2300      	movs	r3, #0
 8007f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f98:	e009      	b.n	8007fae <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007faa:	3301      	adds	r3, #1
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d3f1      	bcc.n	8007f9a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007fb6:	e002      	b.n	8007fbe <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fba:	3301      	adds	r3, #1
 8007fbc:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007fbe:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc4:	4413      	add	r3, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fdb0 	bl	8007b2c <is_aperture>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d3ee      	bcc.n	8007fb8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 8007fee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ff2:	f107 0218 	add.w	r2, r7, #24
 8007ff6:	9204      	str	r2, [sp, #16]
 8007ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffa:	9203      	str	r2, [sp, #12]
 8007ffc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ffe:	9202      	str	r2, [sp, #8]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	4623      	mov	r3, r4
 8008008:	4602      	mov	r2, r0
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f7ff fe06 	bl	8007c1c <enable_ref_spads>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008016:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11b      	bne.n	8008056 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008022:	f107 0312 	add.w	r3, r7, #18
 8008026:	4619      	mov	r1, r3
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff fe73 	bl	8007d14 <perform_ref_signal_measurement>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10c      	bne.n	8008056 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800803c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800803e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008040:	429a      	cmp	r2, r3
 8008042:	d208      	bcs.n	8008056 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800804e:	e002      	b.n	8008056 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008054:	e000      	b.n	8008058 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008056:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008058:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 80af 	bne.w	80081c0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008062:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008064:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008066:	429a      	cmp	r2, r3
 8008068:	f240 80aa 	bls.w	80081c0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800806c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800807c:	f107 031c 	add.w	r3, r7, #28
 8008080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008082:	4618      	mov	r0, r3
 8008084:	f002 ffd4 	bl	800b030 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008088:	8a7b      	ldrh	r3, [r7, #18]
 800808a:	461a      	mov	r2, r3
 800808c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfb8      	it	lt
 8008094:	425b      	neglt	r3, r3
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800809e:	e086      	b.n	80081ae <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 80080a6:	f107 0314 	add.w	r3, r7, #20
 80080aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ae:	f7ff fcdf 	bl	8007a70 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b8:	d103      	bne.n	80080c2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80080ba:	23ce      	movs	r3, #206	; 0xce
 80080bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80080c0:	e07e      	b.n	80081c0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80080c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4413      	add	r3, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fd2e 	bl	8007b2c <is_aperture>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80080e0:	e06e      	b.n	80081c0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	3301      	adds	r3, #1
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 80080f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fd32 	bl	8007b60 <enable_spad_bit>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008102:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10c      	bne.n	8008124 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800810a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810c:	3301      	adds	r3, #1
 800810e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 8008116:	4619      	mov	r1, r3
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fd59 	bl	8007bd0 <set_ref_spad_map>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008124:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008128:	2b00      	cmp	r3, #0
 800812a:	d146      	bne.n	80081ba <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800812c:	f107 0312 	add.w	r3, r7, #18
 8008130:	4619      	mov	r1, r3
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fdee 	bl	8007d14 <perform_ref_signal_measurement>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800813e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008142:	2b00      	cmp	r3, #0
 8008144:	d13b      	bne.n	80081be <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008146:	8a7b      	ldrh	r3, [r7, #18]
 8008148:	461a      	mov	r2, r3
 800814a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfb8      	it	lt
 8008152:	425b      	neglt	r3, r3
 8008154:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008156:	8a7b      	ldrh	r3, [r7, #18]
 8008158:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800815a:	429a      	cmp	r2, r3
 800815c:	d21c      	bcs.n	8008198 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800815e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008162:	429a      	cmp	r2, r3
 8008164:	d914      	bls.n	8008190 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8008166:	f107 031c 	add.w	r3, r7, #28
 800816a:	4619      	mov	r1, r3
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fd2f 	bl	8007bd0 <set_ref_spad_map>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800817e:	f107 011c 	add.w	r1, r7, #28
 8008182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008184:	4618      	mov	r0, r3
 8008186:	f002 ff53 	bl	800b030 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800818a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818c:	3b01      	subs	r3, #1
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008190:	2301      	movs	r3, #1
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e00a      	b.n	80081ae <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 80081a2:	f107 031c 	add.w	r3, r7, #28
 80081a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a8:	4618      	mov	r0, r3
 80081aa:	f002 ff41 	bl	800b030 <memcpy>
		while (!complete) {
 80081ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f43f af74 	beq.w	80080a0 <VL53L0X_perform_ref_spad_management+0x2b8>
 80081b8:	e002      	b.n	80081c0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80081be:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d115      	bne.n	80081f4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081cc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80081d4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80081f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	375c      	adds	r7, #92	; 0x5c
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}

08008200 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b093      	sub	sp, #76	; 0x4c
 8008204:	af06      	add	r7, sp, #24
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800820e:	2300      	movs	r3, #0
 8008210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008218:	23b4      	movs	r3, #180	; 0xb4
 800821a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800821e:	2306      	movs	r3, #6
 8008220:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008222:	232c      	movs	r3, #44	; 0x2c
 8008224:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008226:	2201      	movs	r2, #1
 8008228:	21ff      	movs	r1, #255	; 0xff
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f002 fda4 	bl	800ad78 <VL53L0X_WrByte>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008236:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800823e:	2200      	movs	r2, #0
 8008240:	214f      	movs	r1, #79	; 0x4f
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f002 fd98 	bl	800ad78 <VL53L0X_WrByte>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800824e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008252:	2b00      	cmp	r3, #0
 8008254:	d107      	bne.n	8008266 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008256:	222c      	movs	r2, #44	; 0x2c
 8008258:	214e      	movs	r1, #78	; 0x4e
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f002 fd8c 	bl	800ad78 <VL53L0X_WrByte>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008266:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800826a:	2b00      	cmp	r3, #0
 800826c:	d107      	bne.n	800827e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800826e:	2200      	movs	r2, #0
 8008270:	21ff      	movs	r1, #255	; 0xff
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f002 fd80 	bl	800ad78 <VL53L0X_WrByte>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800827e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008282:	2b00      	cmp	r3, #0
 8008284:	d109      	bne.n	800829a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800828a:	461a      	mov	r2, r3
 800828c:	21b6      	movs	r1, #182	; 0xb6
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f002 fd72 	bl	800ad78 <VL53L0X_WrByte>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
 800829e:	e009      	b.n	80082b4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	3301      	adds	r3, #1
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
 80082b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d3f1      	bcc.n	80082a0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d011      	beq.n	80082e6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80082c2:	e002      	b.n	80082ca <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	3301      	adds	r3, #1
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80082ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	4413      	add	r3, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fc2a 	bl	8007b2c <is_aperture>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <VL53L0X_set_reference_spads+0xe6>
 80082de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d3ee      	bcc.n	80082c4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 80082f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082f6:	79f9      	ldrb	r1, [r7, #7]
 80082f8:	f107 0214 	add.w	r2, r7, #20
 80082fc:	9204      	str	r2, [sp, #16]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	9203      	str	r2, [sp, #12]
 8008302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4623      	mov	r3, r4
 800830e:	4602      	mov	r2, r0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fc83 	bl	8007c1c <enable_ref_spads>
 8008316:	4603      	mov	r3, r0
 8008318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800831c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10c      	bne.n	800833e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	79fa      	ldrb	r2, [r7, #7]
 800833a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800833e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008342:	4618      	mov	r0, r3
 8008344:	3734      	adds	r7, #52	; 0x34
 8008346:	46bd      	mov	sp, r7
 8008348:	bd90      	pop	{r4, r7, pc}

0800834a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800835a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	f043 0301 	orr.w	r3, r3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	2100      	movs	r1, #0
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f002 fd02 	bl	800ad78 <VL53L0X_WrByte>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9bf 	bl	8008704 <VL53L0X_measurement_poll_for_completion>
 8008386:	4603      	mov	r3, r0
 8008388:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800838a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008392:	2100      	movs	r1, #0
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff fab5 	bl	8007904 <VL53L0X_ClearInterruptMask>
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800839e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80083a6:	2200      	movs	r2, #0
 80083a8:	2100      	movs	r1, #0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f002 fce4 	bl	800ad78 <VL53L0X_WrByte>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]

	return Status;
 80083b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	70fb      	strb	r3, [r7, #3]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70bb      	strb	r3, [r7, #2]
 80083d6:	4613      	mov	r3, r2
 80083d8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80083e2:	2201      	movs	r2, #1
 80083e4:	21ff      	movs	r1, #255	; 0xff
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f002 fcc6 	bl	800ad78 <VL53L0X_WrByte>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f002 fcbc 	bl	800ad78 <VL53L0X_WrByte>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	4313      	orrs	r3, r2
 8008408:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800840a:	2200      	movs	r2, #0
 800840c:	21ff      	movs	r1, #255	; 0xff
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f002 fcb2 	bl	800ad78 <VL53L0X_WrByte>
 8008414:	4603      	mov	r3, r0
 8008416:	461a      	mov	r2, r3
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	4313      	orrs	r3, r2
 800841c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01e      	beq.n	8008462 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d009      	beq.n	8008440 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	21cb      	movs	r1, #203	; 0xcb
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f002 fd23 	bl	800ae7c <VL53L0X_RdByte>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	4313      	orrs	r3, r2
 800843e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02a      	beq.n	800849e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008448:	f107 030e 	add.w	r3, r7, #14
 800844c:	461a      	mov	r2, r3
 800844e:	21ee      	movs	r1, #238	; 0xee
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f002 fd13 	bl	800ae7c <VL53L0X_RdByte>
 8008456:	4603      	mov	r3, r0
 8008458:	461a      	mov	r2, r3
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	4313      	orrs	r3, r2
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e01d      	b.n	800849e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800846a:	78bb      	ldrb	r3, [r7, #2]
 800846c:	461a      	mov	r2, r3
 800846e:	21cb      	movs	r1, #203	; 0xcb
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f002 fc81 	bl	800ad78 <VL53L0X_WrByte>
 8008476:	4603      	mov	r3, r0
 8008478:	461a      	mov	r2, r3
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	4313      	orrs	r3, r2
 800847e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008488:	787b      	ldrb	r3, [r7, #1]
 800848a:	2280      	movs	r2, #128	; 0x80
 800848c:	21ee      	movs	r1, #238	; 0xee
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f002 fcc0 	bl	800ae14 <VL53L0X_UpdateByte>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	4313      	orrs	r3, r2
 800849c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800849e:	2201      	movs	r2, #1
 80084a0:	21ff      	movs	r1, #255	; 0xff
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f002 fc68 	bl	800ad78 <VL53L0X_WrByte>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80084b2:	2201      	movs	r2, #1
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f002 fc5e 	bl	800ad78 <VL53L0X_WrByte>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80084c6:	2200      	movs	r2, #0
 80084c8:	21ff      	movs	r1, #255	; 0xff
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f002 fc54 	bl	800ad78 <VL53L0X_WrByte>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	f023 0310 	bic.w	r3, r3, #16
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	701a      	strb	r2, [r3, #0]

	return Status;
 80084e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b08a      	sub	sp, #40	; 0x28
 80084f6:	af04      	add	r7, sp, #16
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	4611      	mov	r1, r2
 80084fe:	461a      	mov	r2, r3
 8008500:	460b      	mov	r3, r1
 8008502:	71fb      	strb	r3, [r7, #7]
 8008504:	4613      	mov	r3, r2
 8008506:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008508:	2300      	movs	r3, #0
 800850a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800851c:	79bb      	ldrb	r3, [r7, #6]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8008528:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800852a:	2201      	movs	r2, #1
 800852c:	2101      	movs	r1, #1
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f002 fc22 	bl	800ad78 <VL53L0X_WrByte>
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008540:	2140      	movs	r1, #64	; 0x40
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff ff01 	bl	800834a <VL53L0X_perform_single_ref_calibration>
 8008548:	4603      	mov	r3, r0
 800854a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800854c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d115      	bne.n	8008580 <VL53L0X_perform_vhv_calibration+0x8e>
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d112      	bne.n	8008580 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800855a:	7d39      	ldrb	r1, [r7, #20]
 800855c:	7d7a      	ldrb	r2, [r7, #21]
 800855e:	2300      	movs	r3, #0
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	2301      	movs	r3, #1
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	f107 0313 	add.w	r3, r7, #19
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	460b      	mov	r3, r1
 8008572:	2101      	movs	r1, #1
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff ff23 	bl	80083c0 <VL53L0X_ref_calibration_io>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
 800857e:	e002      	b.n	8008586 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2200      	movs	r2, #0
 8008584:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d112      	bne.n	80085b4 <VL53L0X_perform_vhv_calibration+0xc2>
 800858e:	79bb      	ldrb	r3, [r7, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00f      	beq.n	80085b4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008594:	7dbb      	ldrb	r3, [r7, #22]
 8008596:	461a      	mov	r2, r3
 8008598:	2101      	movs	r1, #1
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f002 fbec 	bl	800ad78 <VL53L0X_WrByte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80085a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d103      	bne.n	80085b4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	7dba      	ldrb	r2, [r7, #22]
 80085b0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80085b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	; 0x28
 80085c4:	af04      	add	r7, sp, #16
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4611      	mov	r1, r2
 80085cc:	461a      	mov	r2, r3
 80085ce:	460b      	mov	r3, r1
 80085d0:	71fb      	strb	r3, [r7, #7]
 80085d2:	4613      	mov	r3, r2
 80085d4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80085e6:	79bb      	ldrb	r3, [r7, #6]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80085f2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80085f4:	2202      	movs	r2, #2
 80085f6:	2101      	movs	r1, #1
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f002 fbbd 	bl	800ad78 <VL53L0X_WrByte>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008602:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800860a:	2100      	movs	r1, #0
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff fe9c 	bl	800834a <VL53L0X_perform_single_ref_calibration>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d115      	bne.n	800864a <VL53L0X_perform_phase_calibration+0x8a>
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d112      	bne.n	800864a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008624:	7d39      	ldrb	r1, [r7, #20]
 8008626:	7d7a      	ldrb	r2, [r7, #21]
 8008628:	2301      	movs	r3, #1
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	2300      	movs	r3, #0
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	f107 0313 	add.w	r3, r7, #19
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	460b      	mov	r3, r1
 800863c:	2101      	movs	r1, #1
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff febe 	bl	80083c0 <VL53L0X_ref_calibration_io>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]
 8008648:	e002      	b.n	8008650 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d112      	bne.n	800867e <VL53L0X_perform_phase_calibration+0xbe>
 8008658:	79bb      	ldrb	r3, [r7, #6]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00f      	beq.n	800867e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800865e:	7dbb      	ldrb	r3, [r7, #22]
 8008660:	461a      	mov	r2, r3
 8008662:	2101      	movs	r1, #1
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f002 fb87 	bl	800ad78 <VL53L0X_WrByte>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800866e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d103      	bne.n	800867e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	7dba      	ldrb	r2, [r7, #22]
 800867a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800867e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b086      	sub	sp, #24
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80086a6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 80086a8:	78fa      	ldrb	r2, [r7, #3]
 80086aa:	2300      	movs	r3, #0
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff ff1f 	bl	80084f2 <VL53L0X_perform_vhv_calibration>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80086b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	2300      	movs	r3, #0
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ff7a 	bl	80085c0 <VL53L0X_perform_phase_calibration>
 80086cc:	4603      	mov	r3, r0
 80086ce:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80086d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10f      	bne.n	80086f8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80086d8:	7dbb      	ldrb	r3, [r7, #22]
 80086da:	461a      	mov	r2, r3
 80086dc:	2101      	movs	r1, #1
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f002 fb4a 	bl	800ad78 <VL53L0X_WrByte>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80086e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d103      	bne.n	80086f8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	7dba      	ldrb	r2, [r7, #22]
 80086f4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80086f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008718:	f107 030f 	add.w	r3, r7, #15
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fe fe02 	bl	8007328 <VL53L0X_GetMeasurementDataReady>
 8008724:	4603      	mov	r3, r0
 8008726:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d110      	bne.n	8008752 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d00f      	beq.n	8008756 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008742:	d302      	bcc.n	800874a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008744:	23f9      	movs	r3, #249	; 0xf9
 8008746:	75fb      	strb	r3, [r7, #23]
			break;
 8008748:	e006      	b.n	8008758 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f002 fc34 	bl	800afb8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008750:	e7e2      	b.n	8008718 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008756:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	3301      	adds	r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	4603      	mov	r3, r0
 8008792:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	3b01      	subs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80087bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087c0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80087c2:	e002      	b.n	80087ca <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	089b      	lsrs	r3, r3, #2
 80087c8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d8f8      	bhi.n	80087c4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80087d2:	e017      	b.n	8008804 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d30b      	bcc.n	80087f8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	4413      	add	r3, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	4413      	add	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	e002      	b.n	80087fe <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	089b      	lsrs	r3, r3, #2
 8008802:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e4      	bne.n	80087d4 <VL53L0X_isqrt+0x24>
	}

	return res;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008820:	2300      	movs	r3, #0
 8008822:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008824:	2200      	movs	r2, #0
 8008826:	2183      	movs	r1, #131	; 0x83
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f002 faa5 	bl	800ad78 <VL53L0X_WrByte>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	4313      	orrs	r3, r2
 8008836:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8008838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11e      	bne.n	800887e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008844:	f107 030f 	add.w	r3, r7, #15
 8008848:	461a      	mov	r2, r3
 800884a:	2183      	movs	r1, #131	; 0x83
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f002 fb15 	bl	800ae7c <VL53L0X_RdByte>
 8008852:	4603      	mov	r3, r0
 8008854:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10a      	bne.n	8008872 <VL53L0X_device_read_strobe+0x5a>
 800885c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	3301      	adds	r3, #1
 8008868:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008870:	d3e8      	bcc.n	8008844 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008878:	d301      	bcc.n	800887e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800887a:	23f9      	movs	r3, #249	; 0xf9
 800887c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800887e:	2201      	movs	r2, #1
 8008880:	2183      	movs	r1, #131	; 0x83
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f002 fa78 	bl	800ad78 <VL53L0X_WrByte>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	4313      	orrs	r3, r2
 8008890:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008892:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b098      	sub	sp, #96	; 0x60
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80088ce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80088d2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80088e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 80088ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	f000 8408 	beq.w	8009104 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80088f4:	2201      	movs	r2, #1
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f002 fa3d 	bl	800ad78 <VL53L0X_WrByte>
 80088fe:	4603      	mov	r3, r0
 8008900:	461a      	mov	r2, r3
 8008902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008906:	4313      	orrs	r3, r2
 8008908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800890c:	2201      	movs	r2, #1
 800890e:	21ff      	movs	r1, #255	; 0xff
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f002 fa31 	bl	800ad78 <VL53L0X_WrByte>
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
 800891a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800891e:	4313      	orrs	r3, r2
 8008920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f002 fa25 	bl	800ad78 <VL53L0X_WrByte>
 800892e:	4603      	mov	r3, r0
 8008930:	461a      	mov	r2, r3
 8008932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008936:	4313      	orrs	r3, r2
 8008938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800893c:	2206      	movs	r2, #6
 800893e:	21ff      	movs	r1, #255	; 0xff
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f002 fa19 	bl	800ad78 <VL53L0X_WrByte>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894e:	4313      	orrs	r3, r2
 8008950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008954:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008958:	461a      	mov	r2, r3
 800895a:	2183      	movs	r1, #131	; 0x83
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f002 fa8d 	bl	800ae7c <VL53L0X_RdByte>
 8008962:	4603      	mov	r3, r0
 8008964:	461a      	mov	r2, r3
 8008966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800896a:	4313      	orrs	r3, r2
 800896c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008970:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008974:	f043 0304 	orr.w	r3, r3, #4
 8008978:	b2db      	uxtb	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	2183      	movs	r1, #131	; 0x83
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f002 f9fa 	bl	800ad78 <VL53L0X_WrByte>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800898c:	4313      	orrs	r3, r2
 800898e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008992:	2207      	movs	r2, #7
 8008994:	21ff      	movs	r1, #255	; 0xff
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 f9ee 	bl	800ad78 <VL53L0X_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a4:	4313      	orrs	r3, r2
 80089a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80089aa:	2201      	movs	r2, #1
 80089ac:	2181      	movs	r1, #129	; 0x81
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f002 f9e2 	bl	800ad78 <VL53L0X_WrByte>
 80089b4:	4603      	mov	r3, r0
 80089b6:	461a      	mov	r2, r3
 80089b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089bc:	4313      	orrs	r3, r2
 80089be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f002 faf8 	bl	800afb8 <VL53L0X_PollingDelay>
 80089c8:	4603      	mov	r3, r0
 80089ca:	461a      	mov	r2, r3
 80089cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089d0:	4313      	orrs	r3, r2
 80089d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80089d6:	2201      	movs	r2, #1
 80089d8:	2180      	movs	r1, #128	; 0x80
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f002 f9cc 	bl	800ad78 <VL53L0X_WrByte>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e8:	4313      	orrs	r3, r2
 80089ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8098 	beq.w	8008b2a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80089fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089fe:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 8091 	bne.w	8008b2a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008a08:	226b      	movs	r2, #107	; 0x6b
 8008a0a:	2194      	movs	r1, #148	; 0x94
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f002 f9b3 	bl	800ad78 <VL53L0X_WrByte>
 8008a12:	4603      	mov	r3, r0
 8008a14:	461a      	mov	r2, r3
 8008a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff fef9 	bl	8008818 <VL53L0X_device_read_strobe>
 8008a26:	4603      	mov	r3, r0
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a38:	461a      	mov	r2, r3
 8008a3a:	2190      	movs	r1, #144	; 0x90
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f002 fa7f 	bl	800af40 <VL53L0X_RdDWord>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	0bdb      	lsrs	r3, r3, #15
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008a6c:	2224      	movs	r2, #36	; 0x24
 8008a6e:	2194      	movs	r1, #148	; 0x94
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f002 f981 	bl	800ad78 <VL53L0X_WrByte>
 8008a76:	4603      	mov	r3, r0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff fec7 	bl	8008818 <VL53L0X_device_read_strobe>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2190      	movs	r1, #144	; 0x90
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f002 fa4d 	bl	800af40 <VL53L0X_RdDWord>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	0e1b      	lsrs	r3, r3, #24
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	0c1b      	lsrs	r3, r3, #16
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008ad2:	2225      	movs	r2, #37	; 0x25
 8008ad4:	2194      	movs	r1, #148	; 0x94
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f002 f94e 	bl	800ad78 <VL53L0X_WrByte>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff fe94 	bl	8008818 <VL53L0X_device_read_strobe>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008af8:	4313      	orrs	r3, r2
 8008afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b02:	461a      	mov	r2, r3
 8008b04:	2190      	movs	r1, #144	; 0x90
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f002 fa1a 	bl	800af40 <VL53L0X_RdDWord>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b14:	4313      	orrs	r3, r2
 8008b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	0e1b      	lsrs	r3, r3, #24
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 8189 	beq.w	8008e48 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008b36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b3a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 8182 	bne.w	8008e48 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008b44:	2202      	movs	r2, #2
 8008b46:	2194      	movs	r1, #148	; 0x94
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f002 f915 	bl	800ad78 <VL53L0X_WrByte>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff fe5b 	bl	8008818 <VL53L0X_device_read_strobe>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008b70:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008b74:	461a      	mov	r2, r3
 8008b76:	2190      	movs	r1, #144	; 0x90
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f002 f97f 	bl	800ae7c <VL53L0X_RdByte>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461a      	mov	r2, r3
 8008b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b86:	4313      	orrs	r3, r2
 8008b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008b8c:	227b      	movs	r2, #123	; 0x7b
 8008b8e:	2194      	movs	r1, #148	; 0x94
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f002 f8f1 	bl	800ad78 <VL53L0X_WrByte>
 8008b96:	4603      	mov	r3, r0
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fe37 	bl	8008818 <VL53L0X_device_read_strobe>
 8008baa:	4603      	mov	r3, r0
 8008bac:	461a      	mov	r2, r3
 8008bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008bb8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	2190      	movs	r1, #144	; 0x90
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f002 f95b 	bl	800ae7c <VL53L0X_RdByte>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008bd4:	2277      	movs	r2, #119	; 0x77
 8008bd6:	2194      	movs	r1, #148	; 0x94
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f002 f8cd 	bl	800ad78 <VL53L0X_WrByte>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff fe13 	bl	8008818 <VL53L0X_device_read_strobe>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c04:	461a      	mov	r2, r3
 8008c06:	2190      	movs	r1, #144	; 0x90
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f002 f999 	bl	800af40 <VL53L0X_RdDWord>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	461a      	mov	r2, r3
 8008c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c16:	4313      	orrs	r3, r2
 8008c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	0e5b      	lsrs	r3, r3, #25
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	0c9b      	lsrs	r3, r3, #18
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	0adb      	lsrs	r3, r3, #11
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	091b      	lsrs	r3, r3, #4
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008c66:	2278      	movs	r2, #120	; 0x78
 8008c68:	2194      	movs	r1, #148	; 0x94
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f002 f884 	bl	800ad78 <VL53L0X_WrByte>
 8008c70:	4603      	mov	r3, r0
 8008c72:	461a      	mov	r2, r3
 8008c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff fdca 	bl	8008818 <VL53L0X_device_read_strobe>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c96:	461a      	mov	r2, r3
 8008c98:	2190      	movs	r1, #144	; 0x90
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f002 f950 	bl	800af40 <VL53L0X_RdDWord>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	0f5b      	lsrs	r3, r3, #29
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cbe:	4413      	add	r3, r2
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	0d9b      	lsrs	r3, r3, #22
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	0bdb      	lsrs	r3, r3, #15
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	019b      	lsls	r3, r3, #6
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008d0e:	2279      	movs	r2, #121	; 0x79
 8008d10:	2194      	movs	r1, #148	; 0x94
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f002 f830 	bl	800ad78 <VL53L0X_WrByte>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fd76 	bl	8008818 <VL53L0X_device_read_strobe>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d34:	4313      	orrs	r3, r2
 8008d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2190      	movs	r1, #144	; 0x90
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f002 f8fc 	bl	800af40 <VL53L0X_RdDWord>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	0e9b      	lsrs	r3, r3, #26
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d60:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008d62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d66:	4413      	add	r3, r2
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	0cdb      	lsrs	r3, r3, #19
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	0b1b      	lsrs	r3, r3, #12
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008da8:	227a      	movs	r2, #122	; 0x7a
 8008daa:	2194      	movs	r1, #148	; 0x94
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 ffe3 	bl	800ad78 <VL53L0X_WrByte>
 8008db2:	4603      	mov	r3, r0
 8008db4:	461a      	mov	r2, r3
 8008db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff fd29 	bl	8008818 <VL53L0X_device_read_strobe>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dd8:	461a      	mov	r2, r3
 8008dda:	2190      	movs	r1, #144	; 0x90
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f002 f8af 	bl	800af40 <VL53L0X_RdDWord>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	0f9b      	lsrs	r3, r3, #30
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfa:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e00:	4413      	add	r3, r2
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	0ddb      	lsrs	r3, r3, #23
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	0c1b      	lsrs	r3, r3, #16
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	0a5b      	lsrs	r3, r3, #9
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	089b      	lsrs	r3, r3, #2
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008e42:	2300      	movs	r3, #0
 8008e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80f1 	beq.w	8009036 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e58:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 80ea 	bne.w	8009036 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008e62:	227b      	movs	r2, #123	; 0x7b
 8008e64:	2194      	movs	r1, #148	; 0x94
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 ff86 	bl	800ad78 <VL53L0X_WrByte>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e74:	4313      	orrs	r3, r2
 8008e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fccc 	bl	8008818 <VL53L0X_device_read_strobe>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e92:	461a      	mov	r2, r3
 8008e94:	2190      	movs	r1, #144	; 0x90
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f002 f852 	bl	800af40 <VL53L0X_RdDWord>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008eaa:	227c      	movs	r2, #124	; 0x7c
 8008eac:	2194      	movs	r1, #148	; 0x94
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 ff62 	bl	800ad78 <VL53L0X_WrByte>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fca8 	bl	8008818 <VL53L0X_device_read_strobe>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eda:	461a      	mov	r2, r3
 8008edc:	2190      	movs	r1, #144	; 0x90
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f002 f82e 	bl	800af40 <VL53L0X_RdDWord>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eec:	4313      	orrs	r3, r2
 8008eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008ef2:	2273      	movs	r2, #115	; 0x73
 8008ef4:	2194      	movs	r1, #148	; 0x94
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 ff3e 	bl	800ad78 <VL53L0X_WrByte>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fc84 	bl	8008818 <VL53L0X_device_read_strobe>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f22:	461a      	mov	r2, r3
 8008f24:	2190      	movs	r1, #144	; 0x90
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f002 f80a 	bl	800af40 <VL53L0X_RdDWord>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008f42:	2274      	movs	r2, #116	; 0x74
 8008f44:	2194      	movs	r1, #148	; 0x94
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 ff16 	bl	800ad78 <VL53L0X_WrByte>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f54:	4313      	orrs	r3, r2
 8008f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fc5c 	bl	8008818 <VL53L0X_device_read_strobe>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f72:	461a      	mov	r2, r3
 8008f74:	2190      	movs	r1, #144	; 0x90
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 ffe2 	bl	800af40 <VL53L0X_RdDWord>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f90:	4313      	orrs	r3, r2
 8008f92:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008f94:	2275      	movs	r2, #117	; 0x75
 8008f96:	2194      	movs	r1, #148	; 0x94
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 feed 	bl	800ad78 <VL53L0X_WrByte>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fc33 	bl	8008818 <VL53L0X_device_read_strobe>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	2190      	movs	r1, #144	; 0x90
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 ffb9 	bl	800af40 <VL53L0X_RdDWord>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008fe4:	2276      	movs	r2, #118	; 0x76
 8008fe6:	2194      	movs	r1, #148	; 0x94
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 fec5 	bl	800ad78 <VL53L0X_WrByte>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fc0b 	bl	8008818 <VL53L0X_device_read_strobe>
 8009002:	4603      	mov	r3, r0
 8009004:	461a      	mov	r2, r3
 8009006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800900a:	4313      	orrs	r3, r2
 800900c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009014:	461a      	mov	r2, r3
 8009016:	2190      	movs	r1, #144	; 0x90
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 ff91 	bl	800af40 <VL53L0X_RdDWord>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009026:	4313      	orrs	r3, r2
 8009028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009032:	4313      	orrs	r3, r2
 8009034:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009036:	2200      	movs	r2, #0
 8009038:	2181      	movs	r1, #129	; 0x81
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fe9c 	bl	800ad78 <VL53L0X_WrByte>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009048:	4313      	orrs	r3, r2
 800904a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800904e:	2206      	movs	r2, #6
 8009050:	21ff      	movs	r1, #255	; 0xff
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fe90 	bl	800ad78 <VL53L0X_WrByte>
 8009058:	4603      	mov	r3, r0
 800905a:	461a      	mov	r2, r3
 800905c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009060:	4313      	orrs	r3, r2
 8009062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009066:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800906a:	461a      	mov	r2, r3
 800906c:	2183      	movs	r1, #131	; 0x83
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 ff04 	bl	800ae7c <VL53L0X_RdByte>
 8009074:	4603      	mov	r3, r0
 8009076:	461a      	mov	r2, r3
 8009078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907c:	4313      	orrs	r3, r2
 800907e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009082:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009086:	f023 0304 	bic.w	r3, r3, #4
 800908a:	b2db      	uxtb	r3, r3
 800908c:	461a      	mov	r2, r3
 800908e:	2183      	movs	r1, #131	; 0x83
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 fe71 	bl	800ad78 <VL53L0X_WrByte>
 8009096:	4603      	mov	r3, r0
 8009098:	461a      	mov	r2, r3
 800909a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800909e:	4313      	orrs	r3, r2
 80090a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090a4:	2201      	movs	r2, #1
 80090a6:	21ff      	movs	r1, #255	; 0xff
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fe65 	bl	800ad78 <VL53L0X_WrByte>
 80090ae:	4603      	mov	r3, r0
 80090b0:	461a      	mov	r2, r3
 80090b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80090bc:	2201      	movs	r2, #1
 80090be:	2100      	movs	r1, #0
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fe59 	bl	800ad78 <VL53L0X_WrByte>
 80090c6:	4603      	mov	r3, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090d4:	2200      	movs	r2, #0
 80090d6:	21ff      	movs	r1, #255	; 0xff
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fe4d 	bl	800ad78 <VL53L0X_WrByte>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e6:	4313      	orrs	r3, r2
 80090e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80090ec:	2200      	movs	r2, #0
 80090ee:	2180      	movs	r1, #128	; 0x80
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 fe41 	bl	800ad78 <VL53L0X_WrByte>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461a      	mov	r2, r3
 80090fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fe:	4313      	orrs	r3, r2
 8009100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009104:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 8090 	bne.w	800922e <VL53L0X_get_info_from_device+0x990>
 800910e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009112:	2b07      	cmp	r3, #7
 8009114:	f000 808b 	beq.w	800922e <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d024      	beq.n	800916c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009122:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009126:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800912a:	2b00      	cmp	r3, #0
 800912c:	d11e      	bne.n	800916c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009134:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800913e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009142:	2300      	movs	r3, #0
 8009144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009146:	e00e      	b.n	8009166 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009148:	f107 0208 	add.w	r2, r7, #8
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	4413      	add	r3, r2
 8009150:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009156:	4413      	add	r3, r2
 8009158:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800915c:	460a      	mov	r2, r1
 800915e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009162:	3301      	adds	r3, #1
 8009164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009168:	2b05      	cmp	r3, #5
 800916a:	dded      	ble.n	8009148 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d019      	beq.n	80091aa <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800917a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800917e:	2b00      	cmp	r3, #0
 8009180:	d113      	bne.n	80091aa <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009182:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800918c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800919e:	f107 0310 	add.w	r3, r7, #16
 80091a2:	4619      	mov	r1, r3
 80091a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091a6:	f002 f9fd 	bl	800b5a4 <strcpy>

		}

		if (((option & 4) == 4) &&
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d030      	beq.n	8009216 <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80091b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091b8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d12a      	bne.n	8009216 <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80091c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80091d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d2:	025b      	lsls	r3, r3, #9
 80091d4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091da:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80091e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d011      	beq.n	800920e <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 80091ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80091f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 80091fe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 8009202:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009206:	425b      	negs	r3, r3
 8009208:	b29b      	uxth	r3, r3
 800920a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800920e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009216:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	4313      	orrs	r3, r2
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009224:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800922e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009232:	4618      	mov	r0, r3
 8009234:	3760      	adds	r7, #96	; 0x60
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 800923a:	b480      	push	{r7}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	460b      	mov	r3, r1
 8009244:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8009246:	f240 6277 	movw	r2, #1655	; 0x677
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009252:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009256:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	fb02 f303 	mul.w	r3, r2, r3
 8009266:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009268:	68bb      	ldr	r3, [r7, #8]
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009276:	b480      	push	{r7}
 8009278:	b087      	sub	sp, #28
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d017      	beq.n	80092c0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3b01      	subs	r3, #1
 8009294:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009296:	e005      	b.n	80092a4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	085b      	lsrs	r3, r3, #1
 800929c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800929e:	89fb      	ldrh	r3, [r7, #14]
 80092a0:	3301      	adds	r3, #1
 80092a2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1f4      	bne.n	8009298 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80092ae:	89fb      	ldrh	r3, [r7, #14]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80092bc:	4413      	add	r3, r2
 80092be:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80092c0:	8afb      	ldrh	r3, [r7, #22]

}
 80092c2:	4618      	mov	r0, r3
 80092c4:	371c      	adds	r7, #28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	4603      	mov	r3, r0
 80092d6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80092dc:	88fb      	ldrh	r3, [r7, #6]
 80092de:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	0a12      	lsrs	r2, r2, #8
 80092e4:	b292      	uxth	r2, r2
 80092e6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80092ec:	68fb      	ldr	r3, [r7, #12]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	4619      	mov	r1, r3
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff ff91 	bl	800923a <VL53L0X_calc_macro_period_ps>
 8009318:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009320:	4a0a      	ldr	r2, [pc, #40]	; (800934c <VL53L0X_calc_timeout_mclks+0x50>)
 8009322:	fba2 2303 	umull	r2, r3, r2, r3
 8009326:	099b      	lsrs	r3, r3, #6
 8009328:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009330:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	441a      	add	r2, r3
	timeout_period_mclks =
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8009342:	69fb      	ldr	r3, [r7, #28]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3720      	adds	r7, #32
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	10624dd3 	.word	0x10624dd3

08009350 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	807b      	strh	r3, [r7, #2]
 800935c:	4613      	mov	r3, r2
 800935e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009364:	787b      	ldrb	r3, [r7, #1]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ff66 	bl	800923a <VL53L0X_calc_macro_period_ps>
 800936e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009376:	4a0a      	ldr	r2, [pc, #40]	; (80093a0 <VL53L0X_calc_timeout_us+0x50>)
 8009378:	fba2 2303 	umull	r2, r3, r2, r3
 800937c:	099b      	lsrs	r3, r3, #6
 800937e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	fb02 f303 	mul.w	r3, r2, r3
 8009388:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800938c:	4a04      	ldr	r2, [pc, #16]	; (80093a0 <VL53L0X_calc_timeout_us+0x50>)
 800938e:	fba2 2303 	umull	r2, r3, r2, r3
 8009392:	099b      	lsrs	r3, r3, #6
 8009394:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009396:	697b      	ldr	r3, [r7, #20]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	10624dd3 	.word	0x10624dd3

080093a4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08c      	sub	sp, #48	; 0x30
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	460b      	mov	r3, r1
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80093ca:	7afb      	ldrb	r3, [r7, #11]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <get_sequence_step_timeout+0x38>
 80093d0:	7afb      	ldrb	r3, [r7, #11]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d002      	beq.n	80093dc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d128      	bne.n	800942e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80093dc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80093e0:	461a      	mov	r2, r3
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f7fd f9ef 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80093f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80093f8:	f107 0320 	add.w	r3, r7, #32
 80093fc:	461a      	mov	r2, r3
 80093fe:	2146      	movs	r1, #70	; 0x46
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f001 fd3b 	bl	800ae7c <VL53L0X_RdByte>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800940c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009410:	b29b      	uxth	r3, r3
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff ff5b 	bl	80092ce <VL53L0X_decode_timeout>
 8009418:	4603      	mov	r3, r0
 800941a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800941c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009422:	4619      	mov	r1, r3
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f7ff ff93 	bl	8009350 <VL53L0X_calc_timeout_us>
 800942a:	62b8      	str	r0, [r7, #40]	; 0x28
 800942c:	e092      	b.n	8009554 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	2b03      	cmp	r3, #3
 8009432:	d135      	bne.n	80094a0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009434:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009438:	461a      	mov	r2, r3
 800943a:	2100      	movs	r1, #0
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7fd f9c3 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009448:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 8081 	bne.w	8009554 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009452:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009456:	461a      	mov	r2, r3
 8009458:	2100      	movs	r1, #0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7fd f9b4 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009466:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800946a:	2b00      	cmp	r3, #0
 800946c:	d109      	bne.n	8009482 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800946e:	f107 031e 	add.w	r3, r7, #30
 8009472:	461a      	mov	r2, r3
 8009474:	2151      	movs	r1, #81	; 0x51
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f001 fd2a 	bl	800aed0 <VL53L0X_RdWord>
 800947c:	4603      	mov	r3, r0
 800947e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009482:	8bfb      	ldrh	r3, [r7, #30]
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff ff22 	bl	80092ce <VL53L0X_decode_timeout>
 800948a:	4603      	mov	r3, r0
 800948c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800948e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009494:	4619      	mov	r1, r3
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff ff5a 	bl	8009350 <VL53L0X_calc_timeout_us>
 800949c:	62b8      	str	r0, [r7, #40]	; 0x28
 800949e:	e059      	b.n	8009554 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d156      	bne.n	8009554 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80094a6:	f107 0314 	add.w	r3, r7, #20
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7fd fa97 	bl	80069e0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01d      	beq.n	80094f8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80094bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80094c0:	461a      	mov	r2, r3
 80094c2:	2100      	movs	r1, #0
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7fd f97f 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80094d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10f      	bne.n	80094f8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80094d8:	f107 031e 	add.w	r3, r7, #30
 80094dc:	461a      	mov	r2, r3
 80094de:	2151      	movs	r1, #81	; 0x51
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 fcf5 	bl	800aed0 <VL53L0X_RdWord>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80094ec:	8bfb      	ldrh	r3, [r7, #30]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff feed 	bl	80092ce <VL53L0X_decode_timeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80094f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d109      	bne.n	8009514 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009500:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009504:	461a      	mov	r2, r3
 8009506:	2101      	movs	r1, #1
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7fd f95d 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009514:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10f      	bne.n	800953c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800951c:	f107 031c 	add.w	r3, r7, #28
 8009520:	461a      	mov	r2, r3
 8009522:	2171      	movs	r1, #113	; 0x71
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 fcd3 	bl	800aed0 <VL53L0X_RdWord>
 800952a:	4603      	mov	r3, r0
 800952c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009530:	8bbb      	ldrh	r3, [r7, #28]
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fecb 	bl	80092ce <VL53L0X_decode_timeout>
 8009538:	4603      	mov	r3, r0
 800953a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800953c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800953e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009544:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff feff 	bl	8009350 <VL53L0X_calc_timeout_us>
 8009552:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009558:	601a      	str	r2, [r3, #0]

	return Status;
 800955a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800955e:	4618      	mov	r0, r3
 8009560:	3730      	adds	r7, #48	; 0x30
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b08a      	sub	sp, #40	; 0x28
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	460b      	mov	r3, r1
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009574:	2300      	movs	r3, #0
 8009576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <set_sequence_step_timeout+0x26>
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d002      	beq.n	800958c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009586:	7afb      	ldrb	r3, [r7, #11]
 8009588:	2b02      	cmp	r3, #2
 800958a:	d138      	bne.n	80095fe <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800958c:	f107 031b 	add.w	r3, r7, #27
 8009590:	461a      	mov	r2, r3
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7fd f917 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80095a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11a      	bne.n	80095de <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80095a8:	7efb      	ldrb	r3, [r7, #27]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff fea4 	bl	80092fc <VL53L0X_calc_timeout_mclks>
 80095b4:	4603      	mov	r3, r0
 80095b6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80095b8:	8bbb      	ldrh	r3, [r7, #28]
 80095ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095be:	d903      	bls.n	80095c8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80095c0:	23ff      	movs	r3, #255	; 0xff
 80095c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80095c6:	e004      	b.n	80095d2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80095c8:	8bbb      	ldrh	r3, [r7, #28]
 80095ca:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80095cc:	3b01      	subs	r3, #1
 80095ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80095de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 80ab 	bne.w	800973e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80095e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095ec:	461a      	mov	r2, r3
 80095ee:	2146      	movs	r1, #70	; 0x46
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f001 fbc1 	bl	800ad78 <VL53L0X_WrByte>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80095fc:	e09f      	b.n	800973e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80095fe:	7afb      	ldrb	r3, [r7, #11]
 8009600:	2b03      	cmp	r3, #3
 8009602:	d135      	bne.n	8009670 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009608:	2b00      	cmp	r3, #0
 800960a:	d11b      	bne.n	8009644 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800960c:	f107 031b 	add.w	r3, r7, #27
 8009610:	461a      	mov	r2, r3
 8009612:	2100      	movs	r1, #0
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7fd f8d7 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 800961a:	4603      	mov	r3, r0
 800961c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009620:	7efb      	ldrb	r3, [r7, #27]
 8009622:	461a      	mov	r2, r3
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7ff fe68 	bl	80092fc <VL53L0X_calc_timeout_mclks>
 800962c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800962e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff fe1f 	bl	8009276 <VL53L0X_encode_timeout>
 8009638:	4603      	mov	r3, r0
 800963a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800963c:	8b3a      	ldrh	r2, [r7, #24]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009648:	2b00      	cmp	r3, #0
 800964a:	d108      	bne.n	800965e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800964c:	8b3b      	ldrh	r3, [r7, #24]
 800964e:	461a      	mov	r2, r3
 8009650:	2151      	movs	r1, #81	; 0x51
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f001 fbb4 	bl	800adc0 <VL53L0X_WrWord>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800965e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009662:	2b00      	cmp	r3, #0
 8009664:	d16b      	bne.n	800973e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800966e:	e066      	b.n	800973e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	2b04      	cmp	r3, #4
 8009674:	d160      	bne.n	8009738 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009676:	f107 0310 	add.w	r3, r7, #16
 800967a:	4619      	mov	r1, r3
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7fd f9af 	bl	80069e0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009686:	7cfb      	ldrb	r3, [r7, #19]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01d      	beq.n	80096c8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800968c:	f107 031b 	add.w	r3, r7, #27
 8009690:	461a      	mov	r2, r3
 8009692:	2100      	movs	r1, #0
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7fd f897 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 800969a:	4603      	mov	r3, r0
 800969c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 80096a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10f      	bne.n	80096c8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80096a8:	f107 0318 	add.w	r3, r7, #24
 80096ac:	461a      	mov	r2, r3
 80096ae:	2151      	movs	r1, #81	; 0x51
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f001 fc0d 	bl	800aed0 <VL53L0X_RdWord>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80096bc:	8b3b      	ldrh	r3, [r7, #24]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff fe05 	bl	80092ce <VL53L0X_decode_timeout>
 80096c4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80096c6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80096c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096d0:	f107 031b 	add.w	r3, r7, #27
 80096d4:	461a      	mov	r2, r3
 80096d6:	2101      	movs	r1, #1
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7fd f875 	bl	80067c8 <VL53L0X_GetVcselPulsePeriod>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80096e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d128      	bne.n	800973e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80096ec:	7efb      	ldrb	r3, [r7, #27]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff fe02 	bl	80092fc <VL53L0X_calc_timeout_mclks>
 80096f8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80096fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096fc:	6a3a      	ldr	r2, [r7, #32]
 80096fe:	4413      	add	r3, r2
 8009700:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009702:	6a38      	ldr	r0, [r7, #32]
 8009704:	f7ff fdb7 	bl	8009276 <VL53L0X_encode_timeout>
 8009708:	4603      	mov	r3, r0
 800970a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800970c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009710:	2b00      	cmp	r3, #0
 8009712:	d108      	bne.n	8009726 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009714:	8bfb      	ldrh	r3, [r7, #30]
 8009716:	461a      	mov	r2, r3
 8009718:	2171      	movs	r1, #113	; 0x71
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f001 fb50 	bl	800adc0 <VL53L0X_WrWord>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8009736:	e002      	b.n	800973e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009738:	23fc      	movs	r3, #252	; 0xfc
 800973a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800973e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009742:	4618      	mov	r0, r3
 8009744:	3728      	adds	r7, #40	; 0x28
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b08a      	sub	sp, #40	; 0x28
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
 8009756:	4613      	mov	r3, r2
 8009758:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009760:	230c      	movs	r3, #12
 8009762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009766:	2312      	movs	r3, #18
 8009768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800976c:	2308      	movs	r3, #8
 800976e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009772:	230e      	movs	r3, #14
 8009774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800977c:	78bb      	ldrb	r3, [r7, #2]
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009788:	23fc      	movs	r3, #252	; 0xfc
 800978a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800978e:	e020      	b.n	80097d2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10d      	bne.n	80097b2 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009796:	78ba      	ldrb	r2, [r7, #2]
 8009798:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800979c:	429a      	cmp	r2, r3
 800979e:	d304      	bcc.n	80097aa <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80097a0:	78ba      	ldrb	r2, [r7, #2]
 80097a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d903      	bls.n	80097b2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097aa:	23fc      	movs	r3, #252	; 0xfc
 80097ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097b0:	e00f      	b.n	80097d2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d10c      	bne.n	80097d2 <VL53L0X_set_vcsel_pulse_period+0x88>
 80097b8:	78ba      	ldrb	r2, [r7, #2]
 80097ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097be:	429a      	cmp	r2, r3
 80097c0:	d304      	bcc.n	80097cc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80097c2:	78ba      	ldrb	r2, [r7, #2]
 80097c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d902      	bls.n	80097d2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097cc:	23fc      	movs	r3, #252	; 0xfc
 80097ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80097d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80097da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097de:	e239      	b.n	8009c54 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d150      	bne.n	8009888 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80097e6:	78bb      	ldrb	r3, [r7, #2]
 80097e8:	2b0c      	cmp	r3, #12
 80097ea:	d110      	bne.n	800980e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80097ec:	2218      	movs	r2, #24
 80097ee:	2157      	movs	r1, #87	; 0x57
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fac1 	bl	800ad78 <VL53L0X_WrByte>
 80097f6:	4603      	mov	r3, r0
 80097f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80097fc:	2208      	movs	r2, #8
 80097fe:	2156      	movs	r1, #86	; 0x56
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 fab9 	bl	800ad78 <VL53L0X_WrByte>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800980c:	e17f      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800980e:	78bb      	ldrb	r3, [r7, #2]
 8009810:	2b0e      	cmp	r3, #14
 8009812:	d110      	bne.n	8009836 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009814:	2230      	movs	r2, #48	; 0x30
 8009816:	2157      	movs	r1, #87	; 0x57
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 faad 	bl	800ad78 <VL53L0X_WrByte>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009824:	2208      	movs	r2, #8
 8009826:	2156      	movs	r1, #86	; 0x56
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 faa5 	bl	800ad78 <VL53L0X_WrByte>
 800982e:	4603      	mov	r3, r0
 8009830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009834:	e16b      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009836:	78bb      	ldrb	r3, [r7, #2]
 8009838:	2b10      	cmp	r3, #16
 800983a:	d110      	bne.n	800985e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800983c:	2240      	movs	r2, #64	; 0x40
 800983e:	2157      	movs	r1, #87	; 0x57
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 fa99 	bl	800ad78 <VL53L0X_WrByte>
 8009846:	4603      	mov	r3, r0
 8009848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800984c:	2208      	movs	r2, #8
 800984e:	2156      	movs	r1, #86	; 0x56
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f001 fa91 	bl	800ad78 <VL53L0X_WrByte>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800985c:	e157      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800985e:	78bb      	ldrb	r3, [r7, #2]
 8009860:	2b12      	cmp	r3, #18
 8009862:	f040 8154 	bne.w	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009866:	2250      	movs	r2, #80	; 0x50
 8009868:	2157      	movs	r1, #87	; 0x57
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fa84 	bl	800ad78 <VL53L0X_WrByte>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009876:	2208      	movs	r2, #8
 8009878:	2156      	movs	r1, #86	; 0x56
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 fa7c 	bl	800ad78 <VL53L0X_WrByte>
 8009880:	4603      	mov	r3, r0
 8009882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009886:	e142      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	2b01      	cmp	r3, #1
 800988c:	f040 813f 	bne.w	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009890:	78bb      	ldrb	r3, [r7, #2]
 8009892:	2b08      	cmp	r3, #8
 8009894:	d14c      	bne.n	8009930 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009896:	2210      	movs	r2, #16
 8009898:	2148      	movs	r1, #72	; 0x48
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 fa6c 	bl	800ad78 <VL53L0X_WrByte>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80098a6:	2208      	movs	r2, #8
 80098a8:	2147      	movs	r1, #71	; 0x47
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fa64 	bl	800ad78 <VL53L0X_WrByte>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80098b6:	2202      	movs	r2, #2
 80098b8:	2132      	movs	r1, #50	; 0x32
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fa5c 	bl	800ad78 <VL53L0X_WrByte>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c8:	4313      	orrs	r3, r2
 80098ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80098ce:	220c      	movs	r2, #12
 80098d0:	2130      	movs	r1, #48	; 0x30
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 fa50 	bl	800ad78 <VL53L0X_WrByte>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80098e6:	2201      	movs	r2, #1
 80098e8:	21ff      	movs	r1, #255	; 0xff
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f001 fa44 	bl	800ad78 <VL53L0X_WrByte>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461a      	mov	r2, r3
 80098f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098f8:	4313      	orrs	r3, r2
 80098fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80098fe:	2230      	movs	r2, #48	; 0x30
 8009900:	2130      	movs	r1, #48	; 0x30
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 fa38 	bl	800ad78 <VL53L0X_WrByte>
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009910:	4313      	orrs	r3, r2
 8009912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009916:	2200      	movs	r2, #0
 8009918:	21ff      	movs	r1, #255	; 0xff
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f001 fa2c 	bl	800ad78 <VL53L0X_WrByte>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009928:	4313      	orrs	r3, r2
 800992a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800992e:	e0ee      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009930:	78bb      	ldrb	r3, [r7, #2]
 8009932:	2b0a      	cmp	r3, #10
 8009934:	d14c      	bne.n	80099d0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009936:	2228      	movs	r2, #40	; 0x28
 8009938:	2148      	movs	r1, #72	; 0x48
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 fa1c 	bl	800ad78 <VL53L0X_WrByte>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009946:	2208      	movs	r2, #8
 8009948:	2147      	movs	r1, #71	; 0x47
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 fa14 	bl	800ad78 <VL53L0X_WrByte>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009956:	2203      	movs	r2, #3
 8009958:	2132      	movs	r1, #50	; 0x32
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 fa0c 	bl	800ad78 <VL53L0X_WrByte>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009968:	4313      	orrs	r3, r2
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800996e:	2209      	movs	r2, #9
 8009970:	2130      	movs	r1, #48	; 0x30
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 fa00 	bl	800ad78 <VL53L0X_WrByte>
 8009978:	4603      	mov	r3, r0
 800997a:	461a      	mov	r2, r3
 800997c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009980:	4313      	orrs	r3, r2
 8009982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009986:	2201      	movs	r2, #1
 8009988:	21ff      	movs	r1, #255	; 0xff
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 f9f4 	bl	800ad78 <VL53L0X_WrByte>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009998:	4313      	orrs	r3, r2
 800999a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800999e:	2220      	movs	r2, #32
 80099a0:	2130      	movs	r1, #48	; 0x30
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f9e8 	bl	800ad78 <VL53L0X_WrByte>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b0:	4313      	orrs	r3, r2
 80099b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80099b6:	2200      	movs	r2, #0
 80099b8:	21ff      	movs	r1, #255	; 0xff
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 f9dc 	bl	800ad78 <VL53L0X_WrByte>
 80099c0:	4603      	mov	r3, r0
 80099c2:	461a      	mov	r2, r3
 80099c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099ce:	e09e      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80099d0:	78bb      	ldrb	r3, [r7, #2]
 80099d2:	2b0c      	cmp	r3, #12
 80099d4:	d14c      	bne.n	8009a70 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80099d6:	2238      	movs	r2, #56	; 0x38
 80099d8:	2148      	movs	r1, #72	; 0x48
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f001 f9cc 	bl	800ad78 <VL53L0X_WrByte>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80099e6:	2208      	movs	r2, #8
 80099e8:	2147      	movs	r1, #71	; 0x47
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 f9c4 	bl	800ad78 <VL53L0X_WrByte>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80099f6:	2203      	movs	r2, #3
 80099f8:	2132      	movs	r1, #50	; 0x32
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 f9bc 	bl	800ad78 <VL53L0X_WrByte>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009a0e:	2208      	movs	r2, #8
 8009a10:	2130      	movs	r1, #48	; 0x30
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 f9b0 	bl	800ad78 <VL53L0X_WrByte>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a20:	4313      	orrs	r3, r2
 8009a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009a26:	2201      	movs	r2, #1
 8009a28:	21ff      	movs	r1, #255	; 0xff
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 f9a4 	bl	800ad78 <VL53L0X_WrByte>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009a3e:	2220      	movs	r2, #32
 8009a40:	2130      	movs	r1, #48	; 0x30
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 f998 	bl	800ad78 <VL53L0X_WrByte>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a50:	4313      	orrs	r3, r2
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009a56:	2200      	movs	r2, #0
 8009a58:	21ff      	movs	r1, #255	; 0xff
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 f98c 	bl	800ad78 <VL53L0X_WrByte>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a6e:	e04e      	b.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009a70:	78bb      	ldrb	r3, [r7, #2]
 8009a72:	2b0e      	cmp	r3, #14
 8009a74:	d14b      	bne.n	8009b0e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009a76:	2248      	movs	r2, #72	; 0x48
 8009a78:	2148      	movs	r1, #72	; 0x48
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 f97c 	bl	800ad78 <VL53L0X_WrByte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009a86:	2208      	movs	r2, #8
 8009a88:	2147      	movs	r1, #71	; 0x47
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f001 f974 	bl	800ad78 <VL53L0X_WrByte>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009a96:	2203      	movs	r2, #3
 8009a98:	2132      	movs	r1, #50	; 0x32
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 f96c 	bl	800ad78 <VL53L0X_WrByte>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009aae:	2207      	movs	r2, #7
 8009ab0:	2130      	movs	r1, #48	; 0x30
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 f960 	bl	800ad78 <VL53L0X_WrByte>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	21ff      	movs	r1, #255	; 0xff
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 f954 	bl	800ad78 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009ade:	2220      	movs	r2, #32
 8009ae0:	2130      	movs	r1, #48	; 0x30
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f001 f948 	bl	800ad78 <VL53L0X_WrByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af0:	4313      	orrs	r3, r2
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009af6:	2200      	movs	r2, #0
 8009af8:	21ff      	movs	r1, #255	; 0xff
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 f93c 	bl	800ad78 <VL53L0X_WrByte>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009b0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d17f      	bne.n	8009c16 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009b16:	78bb      	ldrb	r3, [r7, #2]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe fe36 	bl	800878a <VL53L0X_encode_vcsel_period>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d045      	beq.n	8009bba <VL53L0X_set_vcsel_pulse_period+0x470>
 8009b2e:	e06e      	b.n	8009c0e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009b30:	f107 0314 	add.w	r3, r7, #20
 8009b34:	461a      	mov	r2, r3
 8009b36:	2103      	movs	r1, #3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff fc33 	bl	80093a4 <get_sequence_step_timeout>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009b4c:	f107 0310 	add.w	r3, r7, #16
 8009b50:	461a      	mov	r2, r3
 8009b52:	2102      	movs	r1, #2
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff fc25 	bl	80093a4 <get_sequence_step_timeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009b68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2150      	movs	r1, #80	; 0x50
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f901 	bl	800ad78 <VL53L0X_WrByte>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d108      	bne.n	8009b96 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	461a      	mov	r2, r3
 8009b88:	2103      	movs	r1, #3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fceb 	bl	8009566 <set_sequence_step_timeout>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d108      	bne.n	8009bb0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff fcde 	bl	8009566 <set_sequence_step_timeout>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	78ba      	ldrb	r2, [r7, #2]
 8009bb4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009bb8:	e02e      	b.n	8009c18 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009bba:	f107 0318 	add.w	r3, r7, #24
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fbee 	bl	80093a4 <get_sequence_step_timeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009bd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009bda:	461a      	mov	r2, r3
 8009bdc:	2170      	movs	r1, #112	; 0x70
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 f8ca 	bl	800ad78 <VL53L0X_WrByte>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2104      	movs	r1, #4
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff fcb4 	bl	8009566 <set_sequence_step_timeout>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	78ba      	ldrb	r2, [r7, #2]
 8009c08:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009c0c:	e004      	b.n	8009c18 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c0e:	23fc      	movs	r3, #252	; 0xfc
 8009c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c14:	e000      	b.n	8009c18 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009c16:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009c18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d109      	bne.n	8009c34 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009c26:	69f9      	ldr	r1, [r7, #28]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fc fd8f 	bl	800674c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d109      	bne.n	8009c50 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009c3c:	f107 010f 	add.w	r1, r7, #15
 8009c40:	2301      	movs	r3, #1
 8009c42:	2200      	movs	r2, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7fe fcbb 	bl	80085c0 <VL53L0X_perform_phase_calibration>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3728      	adds	r7, #40	; 0x28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	460b      	mov	r3, r1
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d00a      	beq.n	8009c8e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009c78:	e013      	b.n	8009ca2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009c7a:	f107 0316 	add.w	r3, r7, #22
 8009c7e:	461a      	mov	r2, r3
 8009c80:	2150      	movs	r1, #80	; 0x50
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f001 f8fa 	bl	800ae7c <VL53L0X_RdByte>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009c8c:	e00b      	b.n	8009ca6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009c8e:	f107 0316 	add.w	r3, r7, #22
 8009c92:	461a      	mov	r2, r3
 8009c94:	2170      	movs	r1, #112	; 0x70
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f001 f8f0 	bl	800ae7c <VL53L0X_RdByte>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009ca0:	e001      	b.n	8009ca6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ca2:	23fc      	movs	r3, #252	; 0xfc
 8009ca4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d107      	bne.n	8009cbe <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009cae:	7dbb      	ldrb	r3, [r7, #22]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fd57 	bl	8008764 <VL53L0X_decode_vcsel_period>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	701a      	strb	r2, [r3, #0]

	return Status;
 8009cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b090      	sub	sp, #64	; 0x40
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009cda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009cde:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009ce0:	f240 7376 	movw	r3, #1910	; 0x776
 8009ce4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8009ce6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009cea:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009cec:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8009cf2:	f240 234e 	movw	r3, #590	; 0x24e
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8009cf8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009cfe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009d02:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009d04:	f240 2326 	movw	r3, #550	; 0x226
 8009d08:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009d1e:	f107 0310 	add.w	r3, r7, #16
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7fc fe5b 	bl	80069e0 <VL53L0X_GetSequenceStepEnables>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8009d30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d15b      	bne.n	8009df0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8009d38:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d105      	bne.n	8009d4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009d3e:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 8009d44:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d052      	beq.n	8009df0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009d4a:	f107 030c 	add.w	r3, r7, #12
 8009d4e:	461a      	mov	r2, r3
 8009d50:	2102      	movs	r1, #2
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fb26 	bl	80093a4 <get_sequence_step_timeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 8009d5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 8009d66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d6a:	e07d      	b.n	8009e68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009d6c:	7c3b      	ldrb	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00f      	beq.n	8009d92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009d72:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d76:	4413      	add	r3, r2
 8009d78:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d204      	bcs.n	8009d8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d8a:	e002      	b.n	8009d92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d8c:	23fc      	movs	r3, #252	; 0xfc
 8009d8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009d92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 8009d9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d9e:	e063      	b.n	8009e68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009da0:	7cbb      	ldrb	r3, [r7, #18]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d011      	beq.n	8009dca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	4413      	add	r3, r2
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d204      	bcs.n	8009dc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dc0:	e016      	b.n	8009df0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dc2:	23fc      	movs	r3, #252	; 0xfc
 8009dc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009dc8:	e012      	b.n	8009df0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009dca:	7c7b      	ldrb	r3, [r7, #17]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00f      	beq.n	8009df0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dd4:	4413      	add	r3, r2
 8009dd6:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d204      	bcs.n	8009dea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009de8:	e002      	b.n	8009df0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dea:	23fc      	movs	r3, #252	; 0xfc
 8009dec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009df0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8009df8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009dfc:	e034      	b.n	8009e68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009dfe:	7cfb      	ldrb	r3, [r7, #19]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d019      	beq.n	8009e38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	461a      	mov	r2, r3
 8009e0a:	2103      	movs	r1, #3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fac9 	bl	80093a4 <get_sequence_step_timeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6a3a      	ldr	r2, [r7, #32]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d204      	bcs.n	8009e32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e30:	e002      	b.n	8009e38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e32:	23fc      	movs	r3, #252	; 0xfc
 8009e34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009e38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d111      	bne.n	8009e64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009e40:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00e      	beq.n	8009e64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 8009e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e50:	2104      	movs	r1, #4
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7ff fb87 	bl	8009566 <set_sequence_step_timeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009e64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3740      	adds	r7, #64	; 0x40
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b090      	sub	sp, #64	; 0x40
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009e80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009e84:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009e86:	f240 7376 	movw	r3, #1910	; 0x776
 8009e8a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009e8c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009e92:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009e96:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009e98:	f240 234e 	movw	r3, #590	; 0x24e
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009e9e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009ea2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009ea4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009eaa:	f240 2326 	movw	r3, #550	; 0x226
 8009eae:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb8:	441a      	add	r2, r3
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009ebe:	f107 0318 	add.w	r3, r7, #24
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7fc fd8b 	bl	80069e0 <VL53L0X_GetSequenceStepEnables>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009ed0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009ed8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009edc:	e075      	b.n	8009fca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009ede:	7e3b      	ldrb	r3, [r7, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d105      	bne.n	8009ef0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009ee4:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009eea:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d030      	beq.n	8009f52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009ef0:	f107 0310 	add.w	r3, r7, #16
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff fa53 	bl	80093a4 <get_sequence_step_timeout>
 8009efe:	4603      	mov	r3, r0
 8009f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009f04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d122      	bne.n	8009f52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009f0c:	7e3b      	ldrb	r3, [r7, #24]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d007      	beq.n	8009f22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009f16:	6939      	ldr	r1, [r7, #16]
 8009f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009f1c:	441a      	add	r2, r3
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009f22:	7ebb      	ldrb	r3, [r7, #26]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d009      	beq.n	8009f3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009f2c:	6939      	ldr	r1, [r7, #16]
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	440b      	add	r3, r1
 8009f32:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009f34:	441a      	add	r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	e00a      	b.n	8009f52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009f3c:	7e7b      	ldrb	r3, [r7, #25]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009f46:	6939      	ldr	r1, [r7, #16]
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009f4c:	441a      	add	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d114      	bne.n	8009f84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009f5a:	7efb      	ldrb	r3, [r7, #27]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d011      	beq.n	8009f84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	461a      	mov	r2, r3
 8009f66:	2103      	movs	r1, #3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff fa1b 	bl	80093a4 <get_sequence_step_timeout>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009f78:	68f9      	ldr	r1, [r7, #12]
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009f7e:	441a      	add	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d114      	bne.n	8009fb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009f8c:	7f3b      	ldrb	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d011      	beq.n	8009fb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009f92:	f107 0314 	add.w	r3, r7, #20
 8009f96:	461a      	mov	r2, r3
 8009f98:	2104      	movs	r1, #4
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fa02 	bl	80093a4 <get_sequence_step_timeout>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009faa:	6979      	ldr	r1, [r7, #20]
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009fb0:	441a      	add	r2, r3
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009fb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d103      	bne.n	8009fc6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009fc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3740      	adds	r7, #64	; 0x40
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009fe6:	e0c6      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	4413      	add	r3, r2
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009ff8:	7cfb      	ldrb	r3, [r7, #19]
 8009ffa:	2bff      	cmp	r3, #255	; 0xff
 8009ffc:	f040 808d 	bne.w	800a11a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	4413      	add	r3, r2
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	747b      	strb	r3, [r7, #17]
			Index++;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	3301      	adds	r3, #1
 800a00e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a010:	7c7b      	ldrb	r3, [r7, #17]
 800a012:	2b03      	cmp	r3, #3
 800a014:	d87e      	bhi.n	800a114 <VL53L0X_load_tuning_settings+0x140>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <VL53L0X_load_tuning_settings+0x48>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a02d 	.word	0x0800a02d
 800a020:	0800a067 	.word	0x0800a067
 800a024:	0800a0a1 	.word	0x0800a0a1
 800a028:	0800a0db 	.word	0x0800a0db
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	4413      	add	r3, r2
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	743b      	strb	r3, [r7, #16]
				Index++;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	3301      	adds	r3, #1
 800a03a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4413      	add	r3, r2
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	3301      	adds	r3, #1
 800a04a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a04c:	7c3b      	ldrb	r3, [r7, #16]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	b29a      	uxth	r2, r3
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	b29b      	uxth	r3, r3
 800a058:	4413      	add	r3, r2
 800a05a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	89ba      	ldrh	r2, [r7, #12]
 800a060:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800a064:	e087      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	4413      	add	r3, r2
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	743b      	strb	r3, [r7, #16]
				Index++;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3301      	adds	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	4413      	add	r3, r2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	3301      	adds	r3, #1
 800a084:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a086:	7c3b      	ldrb	r3, [r7, #16]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	b29b      	uxth	r3, r3
 800a092:	4413      	add	r3, r2
 800a094:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	89ba      	ldrh	r2, [r7, #12]
 800a09a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800a09e:	e06a      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	743b      	strb	r3, [r7, #16]
				Index++;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a0c0:	7c3b      	ldrb	r3, [r7, #16]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	021b      	lsls	r3, r3, #8
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	4413      	add	r3, r2
 800a0ce:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	89ba      	ldrh	r2, [r7, #12]
 800a0d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 800a0d8:	e04d      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	4413      	add	r3, r2
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	743b      	strb	r3, [r7, #16]
				Index++;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a0fa:	7c3b      	ldrb	r3, [r7, #16]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	b29a      	uxth	r2, r3
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	b29b      	uxth	r3, r3
 800a106:	4413      	add	r3, r2
 800a108:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	89ba      	ldrh	r2, [r7, #12]
 800a10e:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800a112:	e030      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a114:	23fc      	movs	r3, #252	; 0xfc
 800a116:	77fb      	strb	r3, [r7, #31]
 800a118:	e02d      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a11a:	7cfb      	ldrb	r3, [r7, #19]
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d828      	bhi.n	800a172 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	4413      	add	r3, r2
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	3301      	adds	r3, #1
 800a12e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a130:	2300      	movs	r3, #0
 800a132:	61bb      	str	r3, [r7, #24]
 800a134:	e00f      	b.n	800a156 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	4413      	add	r3, r2
 800a13c:	7819      	ldrb	r1, [r3, #0]
 800a13e:	f107 0208 	add.w	r2, r7, #8
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	4413      	add	r3, r2
 800a146:	460a      	mov	r2, r1
 800a148:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	3301      	adds	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	3301      	adds	r3, #1
 800a154:	61bb      	str	r3, [r7, #24]
 800a156:	7cfb      	ldrb	r3, [r7, #19]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	dbeb      	blt.n	800a136 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a15e:	7cfb      	ldrb	r3, [r7, #19]
 800a160:	f107 0208 	add.w	r2, r7, #8
 800a164:	7cb9      	ldrb	r1, [r7, #18]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fdaa 	bl	800acc0 <VL53L0X_WriteMulti>
 800a16c:	4603      	mov	r3, r0
 800a16e:	77fb      	strb	r3, [r7, #31]
 800a170:	e001      	b.n	800a176 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a172:	23fc      	movs	r3, #252	; 0xfc
 800a174:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	4413      	add	r3, r2
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <VL53L0X_load_tuning_settings+0x1b8>
 800a182:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f43f af2e 	beq.w	8009fe8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a18c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a1ae:	f107 0313 	add.w	r3, r7, #19
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7fc fc9f 	bl	8006af8 <VL53L0X_GetXTalkCompensationEnable>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a1be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d111      	bne.n	800a1ea <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a1c6:	7cfb      	ldrb	r3, [r7, #19]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00e      	beq.n	800a1ea <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	8a9b      	ldrh	r3, [r3, #20]
 800a1d6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	fb02 f303 	mul.w	r3, r2, r3
 800a1de:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	3380      	adds	r3, #128	; 0x80
 800a1e4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a1ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3720      	adds	r7, #32
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a20e:	f107 0310 	add.w	r3, r7, #16
 800a212:	461a      	mov	r2, r3
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff ffbe 	bl	800a198 <VL53L0X_get_total_xtalk_rate>
 800a21c:	4603      	mov	r3, r0
 800a21e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d105      	bne.n	800a234 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	441a      	add	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]

	return Status;
 800a234:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800a240:	b084      	sub	sp, #16
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	f107 0c18 	add.w	ip, r7, #24
 800a24c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a250:	2300      	movs	r3, #0
 800a252:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800a260:	2300      	movs	r3, #0
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	e00d      	b.n	800a282 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f107 0218 	add.w	r2, r7, #24
 800a26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a272:	429a      	cmp	r2, r3
 800a274:	d802      	bhi.n	800a27c <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60bb      	str	r3, [r7, #8]
			break;
 800a27a:	e006      	b.n	800a28a <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3301      	adds	r3, #1
 800a280:	607b      	str	r3, [r7, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a286:	429a      	cmp	r2, r3
 800a288:	d8ed      	bhi.n	800a266 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800a28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d105      	bne.n	800a29e <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800a292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a294:	3b01      	subs	r3, #1
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e008      	b.n	800a2b0 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e002      	b.n	800a2b0 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2b4:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ba:	601a      	str	r2, [r3, #0]

	return Status;
 800a2bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	b004      	add	sp, #16
 800a2cc:	4770      	bx	lr

0800a2ce <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800a2ce:	b5b0      	push	{r4, r5, r7, lr}
 800a2d0:	b0ba      	sub	sp, #232	; 0xe8
 800a2d2:	af0e      	add	r7, sp, #56	; 0x38
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a2e8:	f107 031c 	add.w	r3, r7, #28
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7fc f918 	bl	8006524 <VL53L0X_GetDeviceParameters>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 800a2fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d803      	bhi.n	800a30a <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800a302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a308:	e07c      	b.n	800a404 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 800a30a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d304      	bcc.n	800a31c <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800a312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a31a:	e073      	b.n	800a404 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 800a31c:	f107 0314 	add.w	r3, r7, #20
 800a320:	930d      	str	r3, [sp, #52]	; 0x34
 800a322:	f107 0318 	add.w	r3, r7, #24
 800a326:	930c      	str	r3, [sp, #48]	; 0x30
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a32c:	2307      	movs	r3, #7
 800a32e:	930a      	str	r3, [sp, #40]	; 0x28
 800a330:	466d      	mov	r5, sp
 800a332:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800a336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a33a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a33c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a33e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a342:	e885 0003 	stmia.w	r5, {r0, r1}
 800a346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a34a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a34c:	f7ff ff78 	bl	800a240 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	429a      	cmp	r2, r3
 800a356:	d109      	bne.n	800a36c <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	3314      	adds	r3, #20
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	33b0      	adds	r3, #176	; 0xb0
 800a360:	443b      	add	r3, r7
 800a362:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800a366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a36a:	e04b      	b.n	800a404 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	330e      	adds	r3, #14
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	33b0      	adds	r3, #176	; 0xb0
 800a374:	443b      	add	r3, r7
 800a376:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800a37a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	330e      	adds	r3, #14
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	33b0      	adds	r3, #176	; 0xb0
 800a386:	443b      	add	r3, r7
 800a388:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800a38c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	3314      	adds	r3, #20
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	33b0      	adds	r3, #176	; 0xb0
 800a398:	443b      	add	r3, r7
 800a39a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800a39e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	33b0      	adds	r3, #176	; 0xb0
 800a3aa:	443b      	add	r3, r7
 800a3ac:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800a3b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800a3b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a3b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d01d      	beq.n	800a3fc <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800a3c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a3c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3c8:	1ad2      	subs	r2, r2, r3
 800a3ca:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a3ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3d2:	1acb      	subs	r3, r1, r3
 800a3d4:	0a1b      	lsrs	r3, r3, #8
 800a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800a3de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a3ec:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800a3f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3fa:	e003      	b.n	800a404 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800a3fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800a404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a408:	0c1a      	lsrs	r2, r3, #16
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a40e:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 800a412:	4618      	mov	r0, r3
 800a414:	37b0      	adds	r7, #176	; 0xb0
 800a416:	46bd      	mov	sp, r7
 800a418:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a41c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b0b0      	sub	sp, #192	; 0xc0
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a428:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a42c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a430:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800a438:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a43c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a440:	f241 235c 	movw	r3, #4700	; 0x125c
 800a444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a448:	4b98      	ldr	r3, [pc, #608]	; (800a6ac <VL53L0X_calc_sigma_estimate+0x290>)
 800a44a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a44e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a456:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a45a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a466:	4b92      	ldr	r3, [pc, #584]	; (800a6b0 <VL53L0X_calc_sigma_estimate+0x294>)
 800a468:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a46a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a46e:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a470:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a474:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800a476:	f240 6377 	movw	r3, #1655	; 0x677
 800a47a:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a490:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a494:	0c1b      	lsrs	r3, r3, #16
 800a496:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	461a      	mov	r2, r3
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fea8 	bl	800a1f6 <VL53L0X_get_total_signal_rate>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a4ac:	f107 0318 	add.w	r3, r7, #24
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff fe6f 	bl	800a198 <VL53L0X_get_total_xtalk_rate>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4c6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ca:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a4cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4d2:	0c1b      	lsrs	r3, r3, #16
 800a4d4:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4dc:	fb02 f303 	mul.w	r3, r2, r3
 800a4e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a4e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a4e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d902      	bls.n	800a4f4 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a4ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a4f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d160      	bne.n	800a5be <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800a50c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a510:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a514:	461a      	mov	r2, r3
 800a516:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7fe feee 	bl	80092fc <VL53L0X_calc_timeout_mclks>
 800a520:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a532:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a536:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a53a:	461a      	mov	r2, r3
 800a53c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f7fe fedb 	bl	80092fc <VL53L0X_calc_timeout_mclks>
 800a546:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a548:	2303      	movs	r3, #3
 800a54a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800a54e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a552:	2b08      	cmp	r3, #8
 800a554:	d102      	bne.n	800a55c <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800a556:	2302      	movs	r3, #2
 800a558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a55e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a560:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a562:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a566:	fb02 f303 	mul.w	r3, r2, r3
 800a56a:	02db      	lsls	r3, r3, #11
 800a56c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a570:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a574:	4a4f      	ldr	r2, [pc, #316]	; (800a6b4 <VL53L0X_calc_sigma_estimate+0x298>)
 800a576:	fba2 2303 	umull	r2, r3, r2, r3
 800a57a:	099b      	lsrs	r3, r3, #6
 800a57c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 800a57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a580:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a582:	fb02 f303 	mul.w	r3, r2, r3
 800a586:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a58a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a58e:	4a49      	ldr	r2, [pc, #292]	; (800a6b4 <VL53L0X_calc_sigma_estimate+0x298>)
 800a590:	fba2 2303 	umull	r2, r3, r2, r3
 800a594:	099b      	lsrs	r3, r3, #6
 800a596:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	3380      	adds	r3, #128	; 0x80
 800a59c:	0a1b      	lsrs	r3, r3, #8
 800a59e:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a5ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5b0:	3380      	adds	r3, #128	; 0x80
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	021b      	lsls	r3, r3, #8
 800a5bc:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a5be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800a5c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5ca:	e14a      	b.n	800a862 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800a5cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a5e4:	e13b      	b.n	800a85e <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a5e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a5fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5fc:	041a      	lsls	r2, r3, #16
 800a5fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a600:	fbb2 f3f3 	udiv	r3, r2, r3
 800a604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a608:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a60c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a610:	429a      	cmp	r2, r3
 800a612:	d903      	bls.n	800a61c <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a61c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a620:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a624:	fb02 f303 	mul.w	r3, r2, r3
 800a628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a62c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a630:	4613      	mov	r3, r2
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	4413      	add	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe f8b9 	bl	80087b0 <VL53L0X_isqrt>
 800a63e:	4603      	mov	r3, r0
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	891b      	ldrh	r3, [r3, #8]
 800a648:	461a      	mov	r2, r3
 800a64a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a64c:	fb02 f303 	mul.w	r3, r2, r3
 800a650:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a654:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a65a:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a65c:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a65e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a662:	4a14      	ldr	r2, [pc, #80]	; (800a6b4 <VL53L0X_calc_sigma_estimate+0x298>)
 800a664:	fba2 2303 	umull	r2, r3, r2, r3
 800a668:	099b      	lsrs	r3, r3, #6
 800a66a:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a66c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a66e:	041b      	lsls	r3, r3, #16
 800a670:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a674:	4a0f      	ldr	r2, [pc, #60]	; (800a6b4 <VL53L0X_calc_sigma_estimate+0x298>)
 800a676:	fba2 2303 	umull	r2, r3, r2, r3
 800a67a:	099b      	lsrs	r3, r3, #6
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800a67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a688:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfb8      	it	lt
 800a690:	425b      	neglt	r3, r3
 800a692:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	7e1b      	ldrb	r3, [r3, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 800a6a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a6a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6aa:	e032      	b.n	800a712 <VL53L0X_calc_sigma_estimate+0x2f6>
 800a6ac:	028f87ae 	.word	0x028f87ae
 800a6b0:	0006999a 	.word	0x0006999a
 800a6b4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800a6b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a6cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6d0:	fb02 f303 	mul.w	r3, r2, r3
 800a6d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a6d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a6dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6de:	4413      	add	r3, r2
 800a6e0:	0c1b      	lsrs	r3, r3, #16
 800a6e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6ea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a6ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800a6f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6f6:	085b      	lsrs	r3, r3, #1
 800a6f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a6fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a700:	fb03 f303 	mul.w	r3, r3, r3
 800a704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a70c:	0b9b      	lsrs	r3, r3, #14
 800a70e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a718:	fb02 f303 	mul.w	r3, r2, r3
 800a71c:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a720:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72a:	fb03 f303 	mul.w	r3, r3, r3
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 800a730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a734:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a73c:	0c1b      	lsrs	r3, r3, #16
 800a73e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	fb03 f303 	mul.w	r3, r3, r3
 800a746:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	4413      	add	r3, r2
 800a74e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a752:	f7fe f82d 	bl	80087b0 <VL53L0X_isqrt>
 800a756:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	041b      	lsls	r3, r3, #16
 800a75c:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	3332      	adds	r3, #50	; 0x32
 800a762:	4a42      	ldr	r2, [pc, #264]	; (800a86c <VL53L0X_calc_sigma_estimate+0x450>)
 800a764:	fba2 2303 	umull	r2, r3, r2, r3
 800a768:	095a      	lsrs	r2, r3, #5
 800a76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a778:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a77c:	fb02 f303 	mul.w	r3, r2, r3
 800a780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a788:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a78c:	3308      	adds	r3, #8
 800a78e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a796:	4a36      	ldr	r2, [pc, #216]	; (800a870 <VL53L0X_calc_sigma_estimate+0x454>)
 800a798:	fba2 2303 	umull	r2, r3, r2, r3
 800a79c:	0b5b      	lsrs	r3, r3, #13
 800a79e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a7a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a7a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d903      	bls.n	800a7b6 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a7ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800a7b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a7ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a7c4:	4a2b      	ldr	r2, [pc, #172]	; (800a874 <VL53L0X_calc_sigma_estimate+0x458>)
 800a7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ca:	099b      	lsrs	r3, r3, #6
 800a7cc:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a7d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7d6:	441a      	add	r2, r3
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fd ffe6 	bl	80087b0 <VL53L0X_isqrt>
 800a7e4:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7f2:	4a20      	ldr	r2, [pc, #128]	; (800a874 <VL53L0X_calc_sigma_estimate+0x458>)
 800a7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f8:	099b      	lsrs	r3, r3, #6
 800a7fa:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a7fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a800:	fb03 f303 	mul.w	r3, r3, r3
 800a804:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	fb03 f303 	mul.w	r3, r3, r3
 800a80c:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a80e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	4413      	add	r3, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7fd ffcb 	bl	80087b0 <VL53L0X_isqrt>
 800a81a:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a822:	fb02 f303 	mul.w	r3, r2, r3
 800a826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a82a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <VL53L0X_calc_sigma_estimate+0x428>
 800a830:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <VL53L0X_calc_sigma_estimate+0x428>
 800a838:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a83c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a840:	429a      	cmp	r2, r3
 800a842:	d903      	bls.n	800a84c <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800a844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a852:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a85e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a862:	4618      	mov	r0, r3
 800a864:	37c0      	adds	r7, #192	; 0xc0
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	51eb851f 	.word	0x51eb851f
 800a870:	d1b71759 	.word	0xd1b71759
 800a874:	10624dd3 	.word	0x10624dd3

0800a878 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b090      	sub	sp, #64	; 0x40
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	607a      	str	r2, [r7, #4]
 800a882:	461a      	mov	r2, r3
 800a884:	460b      	mov	r3, r1
 800a886:	72fb      	strb	r3, [r7, #11]
 800a888:	4613      	mov	r3, r2
 800a88a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a88c:	2300      	movs	r3, #0
 800a88e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a8ca:	7afb      	ldrb	r3, [r7, #11]
 800a8cc:	10db      	asrs	r3, r3, #3
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f003 030f 	and.w	r3, r3, #15
 800a8d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a8d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d017      	beq.n	800a910 <VL53L0X_get_pal_range_status+0x98>
 800a8e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8e4:	2b05      	cmp	r3, #5
 800a8e6:	d013      	beq.n	800a910 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a8e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8ec:	2b07      	cmp	r3, #7
 800a8ee:	d00f      	beq.n	800a910 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a8f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8f4:	2b0c      	cmp	r3, #12
 800a8f6:	d00b      	beq.n	800a910 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a8f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8fc:	2b0d      	cmp	r3, #13
 800a8fe:	d007      	beq.n	800a910 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a900:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a904:	2b0e      	cmp	r3, #14
 800a906:	d003      	beq.n	800a910 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a908:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a90c:	2b0f      	cmp	r3, #15
 800a90e:	d103      	bne.n	800a918 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a916:	e002      	b.n	800a91e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a91e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a926:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a92a:	461a      	mov	r2, r3
 800a92c:	2100      	movs	r1, #0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7fc f9b6 	bl	8006ca0 <VL53L0X_GetLimitCheckEnable>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a93a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d03c      	beq.n	800a9bc <VL53L0X_get_pal_range_status+0x144>
 800a942:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a946:	2b00      	cmp	r3, #0
 800a948:	d138      	bne.n	800a9bc <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a94e:	461a      	mov	r2, r3
 800a950:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff fd62 	bl	800a41c <VL53L0X_calc_sigma_estimate>
 800a958:	4603      	mov	r3, r0
 800a95a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800a95e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10a      	bne.n	800a97c <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800a966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f107 0210 	add.w	r2, r7, #16
 800a96e:	4619      	mov	r1, r3
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff fcac 	bl	800a2ce <VL53L0X_calc_dmax>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a97c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a980:	2b00      	cmp	r3, #0
 800a982:	d103      	bne.n	800a98c <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	b29a      	uxth	r2, r3
 800a988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a98c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a990:	2b00      	cmp	r3, #0
 800a992:	d113      	bne.n	800a9bc <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a994:	f107 0320 	add.w	r3, r7, #32
 800a998:	461a      	mov	r2, r3
 800a99a:	2100      	movs	r1, #0
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7fc fa05 	bl	8006dac <VL53L0X_GetLimitCheckValue>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d006      	beq.n	800a9bc <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800a9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d902      	bls.n	800a9bc <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a9bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d109      	bne.n	800a9d8 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a9c4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	2102      	movs	r1, #2
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7fc f967 	bl	8006ca0 <VL53L0X_GetLimitCheckEnable>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a9d8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d044      	beq.n	800aa6a <VL53L0X_get_pal_range_status+0x1f2>
 800a9e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d140      	bne.n	800aa6a <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a9e8:	f107 031c 	add.w	r3, r7, #28
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f7fc f9db 	bl	8006dac <VL53L0X_GetLimitCheckValue>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a9fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d107      	bne.n	800aa14 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa04:	2201      	movs	r2, #1
 800aa06:	21ff      	movs	r1, #255	; 0xff
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f9b5 	bl	800ad78 <VL53L0X_WrByte>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800aa14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d109      	bne.n	800aa30 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800aa1c:	f107 0316 	add.w	r3, r7, #22
 800aa20:	461a      	mov	r2, r3
 800aa22:	21b6      	movs	r1, #182	; 0xb6
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fa53 	bl	800aed0 <VL53L0X_RdWord>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800aa30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d107      	bne.n	800aa48 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aa38:	2200      	movs	r2, #0
 800aa3a:	21ff      	movs	r1, #255	; 0xff
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f99b 	bl	800ad78 <VL53L0X_WrByte>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800aa48:	8afb      	ldrh	r3, [r7, #22]
 800aa4a:	025b      	lsls	r3, r3, #9
 800aa4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa52:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800aa5c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800aa5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d902      	bls.n	800aa6a <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800aa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aa72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa76:	461a      	mov	r2, r3
 800aa78:	2103      	movs	r1, #3
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7fc f910 	bl	8006ca0 <VL53L0X_GetLimitCheckEnable>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800aa86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d023      	beq.n	800aad6 <VL53L0X_get_pal_range_status+0x25e>
 800aa8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d11f      	bne.n	800aad6 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800aa96:	893b      	ldrh	r3, [r7, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa0:	e005      	b.n	800aaae <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	021a      	lsls	r2, r3, #8
 800aaa6:	893b      	ldrh	r3, [r7, #8]
 800aaa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800aaae:	f107 0318 	add.w	r3, r7, #24
 800aab2:	461a      	mov	r2, r3
 800aab4:	2103      	movs	r1, #3
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7fc f978 	bl	8006dac <VL53L0X_GetLimitCheckValue>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800aac8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800aaca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aacc:	429a      	cmp	r2, r3
 800aace:	d202      	bcs.n	800aad6 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800aad0:	2301      	movs	r3, #1
 800aad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aad6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d14a      	bne.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800aade:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d103      	bne.n	800aaee <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800aae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae8:	22ff      	movs	r2, #255	; 0xff
 800aaea:	701a      	strb	r2, [r3, #0]
 800aaec:	e042      	b.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800aaee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d007      	beq.n	800ab06 <VL53L0X_get_pal_range_status+0x28e>
 800aaf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d003      	beq.n	800ab06 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800aafe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d103      	bne.n	800ab0e <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ab06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab08:	2205      	movs	r2, #5
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e032      	b.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ab0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab12:	2b06      	cmp	r3, #6
 800ab14:	d003      	beq.n	800ab1e <VL53L0X_get_pal_range_status+0x2a6>
 800ab16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab1a:	2b09      	cmp	r3, #9
 800ab1c:	d103      	bne.n	800ab26 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ab1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab20:	2204      	movs	r2, #4
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	e026      	b.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ab26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab2a:	2b08      	cmp	r3, #8
 800ab2c:	d007      	beq.n	800ab3e <VL53L0X_get_pal_range_status+0x2c6>
 800ab2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab32:	2b0a      	cmp	r3, #10
 800ab34:	d003      	beq.n	800ab3e <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800ab36:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d103      	bne.n	800ab46 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab40:	2203      	movs	r2, #3
 800ab42:	701a      	strb	r2, [r3, #0]
 800ab44:	e016      	b.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ab46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d003      	beq.n	800ab56 <VL53L0X_get_pal_range_status+0x2de>
 800ab4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d103      	bne.n	800ab5e <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ab56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab58:	2202      	movs	r2, #2
 800ab5a:	701a      	strb	r2, [r3, #0]
 800ab5c:	e00a      	b.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800ab5e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d103      	bne.n	800ab6e <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ab66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab68:	2201      	movs	r2, #1
 800ab6a:	701a      	strb	r2, [r3, #0]
 800ab6c:	e002      	b.n	800ab74 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ab6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ab74:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ab78:	461a      	mov	r2, r3
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f7fc f88f 	bl	8006ca0 <VL53L0X_GetLimitCheckEnable>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d14f      	bne.n	800ac30 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ab90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <VL53L0X_get_pal_range_status+0x328>
 800ab98:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d103      	bne.n	800aba8 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba6:	e002      	b.n	800abae <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800abb4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800abb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d003      	beq.n	800abc8 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800abc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d103      	bne.n	800abd0 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800abc8:	2301      	movs	r3, #1
 800abca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abce:	e002      	b.n	800abd6 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800abdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800abe0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d003      	beq.n	800abf0 <VL53L0X_get_pal_range_status+0x378>
 800abe8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800abec:	2b01      	cmp	r3, #1
 800abee:	d103      	bne.n	800abf8 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abf6:	e002      	b.n	800abfe <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ac04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ac08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <VL53L0X_get_pal_range_status+0x3a0>
 800ac10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d103      	bne.n	800ac20 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1e:	e002      	b.n	800ac26 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ac2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3740      	adds	r7, #64	; 0x40
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	330a      	adds	r3, #10
 800ac4c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800ac5a:	b299      	uxth	r1, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	4613      	mov	r3, r2
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	f7f7 fe36 	bl	80028d8 <HAL_I2C_Master_Transmit>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ac70:	693b      	ldr	r3, [r7, #16]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b088      	sub	sp, #32
 800ac7e:	af02      	add	r7, sp, #8
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	330a      	adds	r3, #10
 800ac8a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800ac98:	f043 0301 	orr.w	r3, r3, #1
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	b299      	uxth	r1, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	4613      	mov	r3, r2
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	f7f7 ff12 	bl	8002ad4 <HAL_I2C_Master_Receive>
 800acb0:	4603      	mov	r3, r0
 800acb2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800acb4:	693b      	ldr	r3, [r7, #16]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	607a      	str	r2, [r7, #4]
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	460b      	mov	r3, r1
 800acce:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acd0:	2300      	movs	r3, #0
 800acd2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b3f      	cmp	r3, #63	; 0x3f
 800acd8:	d902      	bls.n	800ace0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800acda:	f06f 0303 	mvn.w	r3, #3
 800acde:	e016      	b.n	800ad0e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ace0:	4a0d      	ldr	r2, [pc, #52]	; (800ad18 <VL53L0X_WriteMulti+0x58>)
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	480c      	ldr	r0, [pc, #48]	; (800ad1c <VL53L0X_WriteMulti+0x5c>)
 800acec:	f000 f9a0 	bl	800b030 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	461a      	mov	r2, r3
 800acf6:	4908      	ldr	r1, [pc, #32]	; (800ad18 <VL53L0X_WriteMulti+0x58>)
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f7ff ff9f 	bl	800ac3c <_I2CWrite>
 800acfe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad06:	23ec      	movs	r3, #236	; 0xec
 800ad08:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ad0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	200007f4 	.word	0x200007f4
 800ad1c:	200007f5 	.word	0x200007f5

0800ad20 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	607a      	str	r2, [r7, #4]
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ad34:	f107 030b 	add.w	r3, r7, #11
 800ad38:	2201      	movs	r2, #1
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff ff7d 	bl	800ac3c <_I2CWrite>
 800ad42:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad4a:	23ec      	movs	r3, #236	; 0xec
 800ad4c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad4e:	e00c      	b.n	800ad6a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff ff90 	bl	800ac7a <_I2CRead>
 800ad5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad62:	23ec      	movs	r3, #236	; 0xec
 800ad64:	75fb      	strb	r3, [r7, #23]
 800ad66:	e000      	b.n	800ad6a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ad68:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ad6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
 800ad84:	4613      	mov	r3, r2
 800ad86:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ad8c:	4a0b      	ldr	r2, [pc, #44]	; (800adbc <VL53L0X_WrByte+0x44>)
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ad92:	4a0a      	ldr	r2, [pc, #40]	; (800adbc <VL53L0X_WrByte+0x44>)
 800ad94:	78bb      	ldrb	r3, [r7, #2]
 800ad96:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ad98:	2202      	movs	r2, #2
 800ad9a:	4908      	ldr	r1, [pc, #32]	; (800adbc <VL53L0X_WrByte+0x44>)
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff ff4d 	bl	800ac3c <_I2CWrite>
 800ada2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800adaa:	23ec      	movs	r3, #236	; 0xec
 800adac:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800adae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	200007f4 	.word	0x200007f4

0800adc0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
 800adcc:	4613      	mov	r3, r2
 800adce:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800add0:	2300      	movs	r3, #0
 800add2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800add4:	4a0e      	ldr	r2, [pc, #56]	; (800ae10 <VL53L0X_WrWord+0x50>)
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800adda:	883b      	ldrh	r3, [r7, #0]
 800addc:	0a1b      	lsrs	r3, r3, #8
 800adde:	b29b      	uxth	r3, r3
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <VL53L0X_WrWord+0x50>)
 800ade4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ade6:	883b      	ldrh	r3, [r7, #0]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <VL53L0X_WrWord+0x50>)
 800adec:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800adee:	2203      	movs	r2, #3
 800adf0:	4907      	ldr	r1, [pc, #28]	; (800ae10 <VL53L0X_WrWord+0x50>)
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff ff22 	bl	800ac3c <_I2CWrite>
 800adf8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae00:	23ec      	movs	r3, #236	; 0xec
 800ae02:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ae04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	200007f4 	.word	0x200007f4

0800ae14 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	70fb      	strb	r3, [r7, #3]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70bb      	strb	r3, [r7, #2]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ae32:	f107 020e 	add.w	r2, r7, #14
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f81e 	bl	800ae7c <VL53L0X_RdByte>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ae44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d110      	bne.n	800ae6e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ae4c:	7bba      	ldrb	r2, [r7, #14]
 800ae4e:	78bb      	ldrb	r3, [r7, #2]
 800ae50:	4013      	ands	r3, r2
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	787b      	ldrb	r3, [r7, #1]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ae5c:	7bba      	ldrb	r2, [r7, #14]
 800ae5e:	78fb      	ldrb	r3, [r7, #3]
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff ff88 	bl	800ad78 <VL53L0X_WrByte>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	e000      	b.n	800ae70 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ae6e:	bf00      	nop
done:
    return Status;
 800ae70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	460b      	mov	r3, r1
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ae8e:	f107 030b 	add.w	r3, r7, #11
 800ae92:	2201      	movs	r2, #1
 800ae94:	4619      	mov	r1, r3
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff fed0 	bl	800ac3c <_I2CWrite>
 800ae9c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aea4:	23ec      	movs	r3, #236	; 0xec
 800aea6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aea8:	e00c      	b.n	800aec4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800aeaa:	2201      	movs	r2, #1
 800aeac:	6879      	ldr	r1, [r7, #4]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f7ff fee3 	bl	800ac7a <_I2CRead>
 800aeb4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aebc:	23ec      	movs	r3, #236	; 0xec
 800aebe:	75fb      	strb	r3, [r7, #23]
 800aec0:	e000      	b.n	800aec4 <VL53L0X_RdByte+0x48>
    }
done:
 800aec2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800aec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	460b      	mov	r3, r1
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aede:	2300      	movs	r3, #0
 800aee0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aee2:	f107 030b 	add.w	r3, r7, #11
 800aee6:	2201      	movs	r2, #1
 800aee8:	4619      	mov	r1, r3
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fea6 	bl	800ac3c <_I2CWrite>
 800aef0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aef8:	23ec      	movs	r3, #236	; 0xec
 800aefa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aefc:	e017      	b.n	800af2e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800aefe:	2202      	movs	r2, #2
 800af00:	490e      	ldr	r1, [pc, #56]	; (800af3c <VL53L0X_RdWord+0x6c>)
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff feb9 	bl	800ac7a <_I2CRead>
 800af08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af10:	23ec      	movs	r3, #236	; 0xec
 800af12:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af14:	e00b      	b.n	800af2e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800af16:	4b09      	ldr	r3, [pc, #36]	; (800af3c <VL53L0X_RdWord+0x6c>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	b29a      	uxth	r2, r3
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <VL53L0X_RdWord+0x6c>)
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	b29b      	uxth	r3, r3
 800af26:	4413      	add	r3, r2
 800af28:	b29a      	uxth	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800af2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	200007f4 	.word	0x200007f4

0800af40 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	460b      	mov	r3, r1
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af4e:	2300      	movs	r3, #0
 800af50:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800af52:	f107 030b 	add.w	r3, r7, #11
 800af56:	2201      	movs	r2, #1
 800af58:	4619      	mov	r1, r3
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fe6e 	bl	800ac3c <_I2CWrite>
 800af60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af68:	23ec      	movs	r3, #236	; 0xec
 800af6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af6c:	e01b      	b.n	800afa6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800af6e:	2204      	movs	r2, #4
 800af70:	4910      	ldr	r1, [pc, #64]	; (800afb4 <VL53L0X_RdDWord+0x74>)
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f7ff fe81 	bl	800ac7a <_I2CRead>
 800af78:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af80:	23ec      	movs	r3, #236	; 0xec
 800af82:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af84:	e00f      	b.n	800afa6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <VL53L0X_RdDWord+0x74>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	061a      	lsls	r2, r3, #24
 800af8c:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <VL53L0X_RdDWord+0x74>)
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	041b      	lsls	r3, r3, #16
 800af92:	441a      	add	r2, r3
 800af94:	4b07      	ldr	r3, [pc, #28]	; (800afb4 <VL53L0X_RdDWord+0x74>)
 800af96:	789b      	ldrb	r3, [r3, #2]
 800af98:	021b      	lsls	r3, r3, #8
 800af9a:	4413      	add	r3, r2
 800af9c:	4a05      	ldr	r2, [pc, #20]	; (800afb4 <VL53L0X_RdDWord+0x74>)
 800af9e:	78d2      	ldrb	r2, [r2, #3]
 800afa0:	441a      	add	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800afa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	200007f4 	.word	0x200007f4

0800afb8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800afc4:	2002      	movs	r0, #2
 800afc6:	f7f7 f857 	bl	8002078 <HAL_Delay>
    return status;
 800afca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <__errno>:
 800afd8:	4b01      	ldr	r3, [pc, #4]	; (800afe0 <__errno+0x8>)
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	200002d0 	.word	0x200002d0

0800afe4 <__libc_init_array>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	4d0d      	ldr	r5, [pc, #52]	; (800b01c <__libc_init_array+0x38>)
 800afe8:	4c0d      	ldr	r4, [pc, #52]	; (800b020 <__libc_init_array+0x3c>)
 800afea:	1b64      	subs	r4, r4, r5
 800afec:	10a4      	asrs	r4, r4, #2
 800afee:	2600      	movs	r6, #0
 800aff0:	42a6      	cmp	r6, r4
 800aff2:	d109      	bne.n	800b008 <__libc_init_array+0x24>
 800aff4:	4d0b      	ldr	r5, [pc, #44]	; (800b024 <__libc_init_array+0x40>)
 800aff6:	4c0c      	ldr	r4, [pc, #48]	; (800b028 <__libc_init_array+0x44>)
 800aff8:	f000 fc94 	bl	800b924 <_init>
 800affc:	1b64      	subs	r4, r4, r5
 800affe:	10a4      	asrs	r4, r4, #2
 800b000:	2600      	movs	r6, #0
 800b002:	42a6      	cmp	r6, r4
 800b004:	d105      	bne.n	800b012 <__libc_init_array+0x2e>
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00c:	4798      	blx	r3
 800b00e:	3601      	adds	r6, #1
 800b010:	e7ee      	b.n	800aff0 <__libc_init_array+0xc>
 800b012:	f855 3b04 	ldr.w	r3, [r5], #4
 800b016:	4798      	blx	r3
 800b018:	3601      	adds	r6, #1
 800b01a:	e7f2      	b.n	800b002 <__libc_init_array+0x1e>
 800b01c:	0800ba34 	.word	0x0800ba34
 800b020:	0800ba34 	.word	0x0800ba34
 800b024:	0800ba34 	.word	0x0800ba34
 800b028:	0800ba38 	.word	0x0800ba38

0800b02c <__retarget_lock_acquire_recursive>:
 800b02c:	4770      	bx	lr

0800b02e <__retarget_lock_release_recursive>:
 800b02e:	4770      	bx	lr

0800b030 <memcpy>:
 800b030:	440a      	add	r2, r1
 800b032:	4291      	cmp	r1, r2
 800b034:	f100 33ff 	add.w	r3, r0, #4294967295
 800b038:	d100      	bne.n	800b03c <memcpy+0xc>
 800b03a:	4770      	bx	lr
 800b03c:	b510      	push	{r4, lr}
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b046:	4291      	cmp	r1, r2
 800b048:	d1f9      	bne.n	800b03e <memcpy+0xe>
 800b04a:	bd10      	pop	{r4, pc}

0800b04c <memset>:
 800b04c:	4402      	add	r2, r0
 800b04e:	4603      	mov	r3, r0
 800b050:	4293      	cmp	r3, r2
 800b052:	d100      	bne.n	800b056 <memset+0xa>
 800b054:	4770      	bx	lr
 800b056:	f803 1b01 	strb.w	r1, [r3], #1
 800b05a:	e7f9      	b.n	800b050 <memset+0x4>

0800b05c <_free_r>:
 800b05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b05e:	2900      	cmp	r1, #0
 800b060:	d044      	beq.n	800b0ec <_free_r+0x90>
 800b062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b066:	9001      	str	r0, [sp, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f1a1 0404 	sub.w	r4, r1, #4
 800b06e:	bfb8      	it	lt
 800b070:	18e4      	addlt	r4, r4, r3
 800b072:	f000 fab9 	bl	800b5e8 <__malloc_lock>
 800b076:	4a1e      	ldr	r2, [pc, #120]	; (800b0f0 <_free_r+0x94>)
 800b078:	9801      	ldr	r0, [sp, #4]
 800b07a:	6813      	ldr	r3, [r2, #0]
 800b07c:	b933      	cbnz	r3, 800b08c <_free_r+0x30>
 800b07e:	6063      	str	r3, [r4, #4]
 800b080:	6014      	str	r4, [r2, #0]
 800b082:	b003      	add	sp, #12
 800b084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b088:	f000 bab4 	b.w	800b5f4 <__malloc_unlock>
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	d908      	bls.n	800b0a2 <_free_r+0x46>
 800b090:	6825      	ldr	r5, [r4, #0]
 800b092:	1961      	adds	r1, r4, r5
 800b094:	428b      	cmp	r3, r1
 800b096:	bf01      	itttt	eq
 800b098:	6819      	ldreq	r1, [r3, #0]
 800b09a:	685b      	ldreq	r3, [r3, #4]
 800b09c:	1949      	addeq	r1, r1, r5
 800b09e:	6021      	streq	r1, [r4, #0]
 800b0a0:	e7ed      	b.n	800b07e <_free_r+0x22>
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	b10b      	cbz	r3, 800b0ac <_free_r+0x50>
 800b0a8:	42a3      	cmp	r3, r4
 800b0aa:	d9fa      	bls.n	800b0a2 <_free_r+0x46>
 800b0ac:	6811      	ldr	r1, [r2, #0]
 800b0ae:	1855      	adds	r5, r2, r1
 800b0b0:	42a5      	cmp	r5, r4
 800b0b2:	d10b      	bne.n	800b0cc <_free_r+0x70>
 800b0b4:	6824      	ldr	r4, [r4, #0]
 800b0b6:	4421      	add	r1, r4
 800b0b8:	1854      	adds	r4, r2, r1
 800b0ba:	42a3      	cmp	r3, r4
 800b0bc:	6011      	str	r1, [r2, #0]
 800b0be:	d1e0      	bne.n	800b082 <_free_r+0x26>
 800b0c0:	681c      	ldr	r4, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	6053      	str	r3, [r2, #4]
 800b0c6:	4421      	add	r1, r4
 800b0c8:	6011      	str	r1, [r2, #0]
 800b0ca:	e7da      	b.n	800b082 <_free_r+0x26>
 800b0cc:	d902      	bls.n	800b0d4 <_free_r+0x78>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	6003      	str	r3, [r0, #0]
 800b0d2:	e7d6      	b.n	800b082 <_free_r+0x26>
 800b0d4:	6825      	ldr	r5, [r4, #0]
 800b0d6:	1961      	adds	r1, r4, r5
 800b0d8:	428b      	cmp	r3, r1
 800b0da:	bf04      	itt	eq
 800b0dc:	6819      	ldreq	r1, [r3, #0]
 800b0de:	685b      	ldreq	r3, [r3, #4]
 800b0e0:	6063      	str	r3, [r4, #4]
 800b0e2:	bf04      	itt	eq
 800b0e4:	1949      	addeq	r1, r1, r5
 800b0e6:	6021      	streq	r1, [r4, #0]
 800b0e8:	6054      	str	r4, [r2, #4]
 800b0ea:	e7ca      	b.n	800b082 <_free_r+0x26>
 800b0ec:	b003      	add	sp, #12
 800b0ee:	bd30      	pop	{r4, r5, pc}
 800b0f0:	20000838 	.word	0x20000838

0800b0f4 <sbrk_aligned>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	4e0e      	ldr	r6, [pc, #56]	; (800b130 <sbrk_aligned+0x3c>)
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	6831      	ldr	r1, [r6, #0]
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	b911      	cbnz	r1, 800b106 <sbrk_aligned+0x12>
 800b100:	f000 fa20 	bl	800b544 <_sbrk_r>
 800b104:	6030      	str	r0, [r6, #0]
 800b106:	4621      	mov	r1, r4
 800b108:	4628      	mov	r0, r5
 800b10a:	f000 fa1b 	bl	800b544 <_sbrk_r>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	d00a      	beq.n	800b128 <sbrk_aligned+0x34>
 800b112:	1cc4      	adds	r4, r0, #3
 800b114:	f024 0403 	bic.w	r4, r4, #3
 800b118:	42a0      	cmp	r0, r4
 800b11a:	d007      	beq.n	800b12c <sbrk_aligned+0x38>
 800b11c:	1a21      	subs	r1, r4, r0
 800b11e:	4628      	mov	r0, r5
 800b120:	f000 fa10 	bl	800b544 <_sbrk_r>
 800b124:	3001      	adds	r0, #1
 800b126:	d101      	bne.n	800b12c <sbrk_aligned+0x38>
 800b128:	f04f 34ff 	mov.w	r4, #4294967295
 800b12c:	4620      	mov	r0, r4
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	2000083c 	.word	0x2000083c

0800b134 <_malloc_r>:
 800b134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b138:	1ccd      	adds	r5, r1, #3
 800b13a:	f025 0503 	bic.w	r5, r5, #3
 800b13e:	3508      	adds	r5, #8
 800b140:	2d0c      	cmp	r5, #12
 800b142:	bf38      	it	cc
 800b144:	250c      	movcc	r5, #12
 800b146:	2d00      	cmp	r5, #0
 800b148:	4607      	mov	r7, r0
 800b14a:	db01      	blt.n	800b150 <_malloc_r+0x1c>
 800b14c:	42a9      	cmp	r1, r5
 800b14e:	d905      	bls.n	800b15c <_malloc_r+0x28>
 800b150:	230c      	movs	r3, #12
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	2600      	movs	r6, #0
 800b156:	4630      	mov	r0, r6
 800b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15c:	4e2e      	ldr	r6, [pc, #184]	; (800b218 <_malloc_r+0xe4>)
 800b15e:	f000 fa43 	bl	800b5e8 <__malloc_lock>
 800b162:	6833      	ldr	r3, [r6, #0]
 800b164:	461c      	mov	r4, r3
 800b166:	bb34      	cbnz	r4, 800b1b6 <_malloc_r+0x82>
 800b168:	4629      	mov	r1, r5
 800b16a:	4638      	mov	r0, r7
 800b16c:	f7ff ffc2 	bl	800b0f4 <sbrk_aligned>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	4604      	mov	r4, r0
 800b174:	d14d      	bne.n	800b212 <_malloc_r+0xde>
 800b176:	6834      	ldr	r4, [r6, #0]
 800b178:	4626      	mov	r6, r4
 800b17a:	2e00      	cmp	r6, #0
 800b17c:	d140      	bne.n	800b200 <_malloc_r+0xcc>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	4631      	mov	r1, r6
 800b182:	4638      	mov	r0, r7
 800b184:	eb04 0803 	add.w	r8, r4, r3
 800b188:	f000 f9dc 	bl	800b544 <_sbrk_r>
 800b18c:	4580      	cmp	r8, r0
 800b18e:	d13a      	bne.n	800b206 <_malloc_r+0xd2>
 800b190:	6821      	ldr	r1, [r4, #0]
 800b192:	3503      	adds	r5, #3
 800b194:	1a6d      	subs	r5, r5, r1
 800b196:	f025 0503 	bic.w	r5, r5, #3
 800b19a:	3508      	adds	r5, #8
 800b19c:	2d0c      	cmp	r5, #12
 800b19e:	bf38      	it	cc
 800b1a0:	250c      	movcc	r5, #12
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	f7ff ffa5 	bl	800b0f4 <sbrk_aligned>
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	d02b      	beq.n	800b206 <_malloc_r+0xd2>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	442b      	add	r3, r5
 800b1b2:	6023      	str	r3, [r4, #0]
 800b1b4:	e00e      	b.n	800b1d4 <_malloc_r+0xa0>
 800b1b6:	6822      	ldr	r2, [r4, #0]
 800b1b8:	1b52      	subs	r2, r2, r5
 800b1ba:	d41e      	bmi.n	800b1fa <_malloc_r+0xc6>
 800b1bc:	2a0b      	cmp	r2, #11
 800b1be:	d916      	bls.n	800b1ee <_malloc_r+0xba>
 800b1c0:	1961      	adds	r1, r4, r5
 800b1c2:	42a3      	cmp	r3, r4
 800b1c4:	6025      	str	r5, [r4, #0]
 800b1c6:	bf18      	it	ne
 800b1c8:	6059      	strne	r1, [r3, #4]
 800b1ca:	6863      	ldr	r3, [r4, #4]
 800b1cc:	bf08      	it	eq
 800b1ce:	6031      	streq	r1, [r6, #0]
 800b1d0:	5162      	str	r2, [r4, r5]
 800b1d2:	604b      	str	r3, [r1, #4]
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	f104 060b 	add.w	r6, r4, #11
 800b1da:	f000 fa0b 	bl	800b5f4 <__malloc_unlock>
 800b1de:	f026 0607 	bic.w	r6, r6, #7
 800b1e2:	1d23      	adds	r3, r4, #4
 800b1e4:	1af2      	subs	r2, r6, r3
 800b1e6:	d0b6      	beq.n	800b156 <_malloc_r+0x22>
 800b1e8:	1b9b      	subs	r3, r3, r6
 800b1ea:	50a3      	str	r3, [r4, r2]
 800b1ec:	e7b3      	b.n	800b156 <_malloc_r+0x22>
 800b1ee:	6862      	ldr	r2, [r4, #4]
 800b1f0:	42a3      	cmp	r3, r4
 800b1f2:	bf0c      	ite	eq
 800b1f4:	6032      	streq	r2, [r6, #0]
 800b1f6:	605a      	strne	r2, [r3, #4]
 800b1f8:	e7ec      	b.n	800b1d4 <_malloc_r+0xa0>
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	6864      	ldr	r4, [r4, #4]
 800b1fe:	e7b2      	b.n	800b166 <_malloc_r+0x32>
 800b200:	4634      	mov	r4, r6
 800b202:	6876      	ldr	r6, [r6, #4]
 800b204:	e7b9      	b.n	800b17a <_malloc_r+0x46>
 800b206:	230c      	movs	r3, #12
 800b208:	603b      	str	r3, [r7, #0]
 800b20a:	4638      	mov	r0, r7
 800b20c:	f000 f9f2 	bl	800b5f4 <__malloc_unlock>
 800b210:	e7a1      	b.n	800b156 <_malloc_r+0x22>
 800b212:	6025      	str	r5, [r4, #0]
 800b214:	e7de      	b.n	800b1d4 <_malloc_r+0xa0>
 800b216:	bf00      	nop
 800b218:	20000838 	.word	0x20000838

0800b21c <_printf_common>:
 800b21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b220:	4616      	mov	r6, r2
 800b222:	4699      	mov	r9, r3
 800b224:	688a      	ldr	r2, [r1, #8]
 800b226:	690b      	ldr	r3, [r1, #16]
 800b228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b22c:	4293      	cmp	r3, r2
 800b22e:	bfb8      	it	lt
 800b230:	4613      	movlt	r3, r2
 800b232:	6033      	str	r3, [r6, #0]
 800b234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b238:	4607      	mov	r7, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	b10a      	cbz	r2, 800b242 <_printf_common+0x26>
 800b23e:	3301      	adds	r3, #1
 800b240:	6033      	str	r3, [r6, #0]
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	0699      	lsls	r1, r3, #26
 800b246:	bf42      	ittt	mi
 800b248:	6833      	ldrmi	r3, [r6, #0]
 800b24a:	3302      	addmi	r3, #2
 800b24c:	6033      	strmi	r3, [r6, #0]
 800b24e:	6825      	ldr	r5, [r4, #0]
 800b250:	f015 0506 	ands.w	r5, r5, #6
 800b254:	d106      	bne.n	800b264 <_printf_common+0x48>
 800b256:	f104 0a19 	add.w	sl, r4, #25
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	6832      	ldr	r2, [r6, #0]
 800b25e:	1a9b      	subs	r3, r3, r2
 800b260:	42ab      	cmp	r3, r5
 800b262:	dc26      	bgt.n	800b2b2 <_printf_common+0x96>
 800b264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b268:	1e13      	subs	r3, r2, #0
 800b26a:	6822      	ldr	r2, [r4, #0]
 800b26c:	bf18      	it	ne
 800b26e:	2301      	movne	r3, #1
 800b270:	0692      	lsls	r2, r2, #26
 800b272:	d42b      	bmi.n	800b2cc <_printf_common+0xb0>
 800b274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b278:	4649      	mov	r1, r9
 800b27a:	4638      	mov	r0, r7
 800b27c:	47c0      	blx	r8
 800b27e:	3001      	adds	r0, #1
 800b280:	d01e      	beq.n	800b2c0 <_printf_common+0xa4>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	68e5      	ldr	r5, [r4, #12]
 800b286:	6832      	ldr	r2, [r6, #0]
 800b288:	f003 0306 	and.w	r3, r3, #6
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	bf08      	it	eq
 800b290:	1aad      	subeq	r5, r5, r2
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	6922      	ldr	r2, [r4, #16]
 800b296:	bf0c      	ite	eq
 800b298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b29c:	2500      	movne	r5, #0
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	bfc4      	itt	gt
 800b2a2:	1a9b      	subgt	r3, r3, r2
 800b2a4:	18ed      	addgt	r5, r5, r3
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	341a      	adds	r4, #26
 800b2aa:	42b5      	cmp	r5, r6
 800b2ac:	d11a      	bne.n	800b2e4 <_printf_common+0xc8>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e008      	b.n	800b2c4 <_printf_common+0xa8>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	47c0      	blx	r8
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d103      	bne.n	800b2c8 <_printf_common+0xac>
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c8:	3501      	adds	r5, #1
 800b2ca:	e7c6      	b.n	800b25a <_printf_common+0x3e>
 800b2cc:	18e1      	adds	r1, r4, r3
 800b2ce:	1c5a      	adds	r2, r3, #1
 800b2d0:	2030      	movs	r0, #48	; 0x30
 800b2d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2d6:	4422      	add	r2, r4
 800b2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2e0:	3302      	adds	r3, #2
 800b2e2:	e7c7      	b.n	800b274 <_printf_common+0x58>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	47c0      	blx	r8
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d0e6      	beq.n	800b2c0 <_printf_common+0xa4>
 800b2f2:	3601      	adds	r6, #1
 800b2f4:	e7d9      	b.n	800b2aa <_printf_common+0x8e>
	...

0800b2f8 <_printf_i>:
 800b2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2fc:	7e0f      	ldrb	r7, [r1, #24]
 800b2fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b300:	2f78      	cmp	r7, #120	; 0x78
 800b302:	4691      	mov	r9, r2
 800b304:	4680      	mov	r8, r0
 800b306:	460c      	mov	r4, r1
 800b308:	469a      	mov	sl, r3
 800b30a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b30e:	d807      	bhi.n	800b320 <_printf_i+0x28>
 800b310:	2f62      	cmp	r7, #98	; 0x62
 800b312:	d80a      	bhi.n	800b32a <_printf_i+0x32>
 800b314:	2f00      	cmp	r7, #0
 800b316:	f000 80d8 	beq.w	800b4ca <_printf_i+0x1d2>
 800b31a:	2f58      	cmp	r7, #88	; 0x58
 800b31c:	f000 80a3 	beq.w	800b466 <_printf_i+0x16e>
 800b320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b328:	e03a      	b.n	800b3a0 <_printf_i+0xa8>
 800b32a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b32e:	2b15      	cmp	r3, #21
 800b330:	d8f6      	bhi.n	800b320 <_printf_i+0x28>
 800b332:	a101      	add	r1, pc, #4	; (adr r1, 800b338 <_printf_i+0x40>)
 800b334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b338:	0800b391 	.word	0x0800b391
 800b33c:	0800b3a5 	.word	0x0800b3a5
 800b340:	0800b321 	.word	0x0800b321
 800b344:	0800b321 	.word	0x0800b321
 800b348:	0800b321 	.word	0x0800b321
 800b34c:	0800b321 	.word	0x0800b321
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b321 	.word	0x0800b321
 800b358:	0800b321 	.word	0x0800b321
 800b35c:	0800b321 	.word	0x0800b321
 800b360:	0800b321 	.word	0x0800b321
 800b364:	0800b4b1 	.word	0x0800b4b1
 800b368:	0800b3d5 	.word	0x0800b3d5
 800b36c:	0800b493 	.word	0x0800b493
 800b370:	0800b321 	.word	0x0800b321
 800b374:	0800b321 	.word	0x0800b321
 800b378:	0800b4d3 	.word	0x0800b4d3
 800b37c:	0800b321 	.word	0x0800b321
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b321 	.word	0x0800b321
 800b388:	0800b321 	.word	0x0800b321
 800b38c:	0800b49b 	.word	0x0800b49b
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	602a      	str	r2, [r5, #0]
 800b398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b39c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0a3      	b.n	800b4ec <_printf_i+0x1f4>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	6829      	ldr	r1, [r5, #0]
 800b3a8:	0606      	lsls	r6, r0, #24
 800b3aa:	f101 0304 	add.w	r3, r1, #4
 800b3ae:	d50a      	bpl.n	800b3c6 <_printf_i+0xce>
 800b3b0:	680e      	ldr	r6, [r1, #0]
 800b3b2:	602b      	str	r3, [r5, #0]
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	da03      	bge.n	800b3c0 <_printf_i+0xc8>
 800b3b8:	232d      	movs	r3, #45	; 0x2d
 800b3ba:	4276      	negs	r6, r6
 800b3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c0:	485e      	ldr	r0, [pc, #376]	; (800b53c <_printf_i+0x244>)
 800b3c2:	230a      	movs	r3, #10
 800b3c4:	e019      	b.n	800b3fa <_printf_i+0x102>
 800b3c6:	680e      	ldr	r6, [r1, #0]
 800b3c8:	602b      	str	r3, [r5, #0]
 800b3ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3ce:	bf18      	it	ne
 800b3d0:	b236      	sxthne	r6, r6
 800b3d2:	e7ef      	b.n	800b3b4 <_printf_i+0xbc>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	6029      	str	r1, [r5, #0]
 800b3dc:	0601      	lsls	r1, r0, #24
 800b3de:	d501      	bpl.n	800b3e4 <_printf_i+0xec>
 800b3e0:	681e      	ldr	r6, [r3, #0]
 800b3e2:	e002      	b.n	800b3ea <_printf_i+0xf2>
 800b3e4:	0646      	lsls	r6, r0, #25
 800b3e6:	d5fb      	bpl.n	800b3e0 <_printf_i+0xe8>
 800b3e8:	881e      	ldrh	r6, [r3, #0]
 800b3ea:	4854      	ldr	r0, [pc, #336]	; (800b53c <_printf_i+0x244>)
 800b3ec:	2f6f      	cmp	r7, #111	; 0x6f
 800b3ee:	bf0c      	ite	eq
 800b3f0:	2308      	moveq	r3, #8
 800b3f2:	230a      	movne	r3, #10
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3fa:	6865      	ldr	r5, [r4, #4]
 800b3fc:	60a5      	str	r5, [r4, #8]
 800b3fe:	2d00      	cmp	r5, #0
 800b400:	bfa2      	ittt	ge
 800b402:	6821      	ldrge	r1, [r4, #0]
 800b404:	f021 0104 	bicge.w	r1, r1, #4
 800b408:	6021      	strge	r1, [r4, #0]
 800b40a:	b90e      	cbnz	r6, 800b410 <_printf_i+0x118>
 800b40c:	2d00      	cmp	r5, #0
 800b40e:	d04d      	beq.n	800b4ac <_printf_i+0x1b4>
 800b410:	4615      	mov	r5, r2
 800b412:	fbb6 f1f3 	udiv	r1, r6, r3
 800b416:	fb03 6711 	mls	r7, r3, r1, r6
 800b41a:	5dc7      	ldrb	r7, [r0, r7]
 800b41c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b420:	4637      	mov	r7, r6
 800b422:	42bb      	cmp	r3, r7
 800b424:	460e      	mov	r6, r1
 800b426:	d9f4      	bls.n	800b412 <_printf_i+0x11a>
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d10b      	bne.n	800b444 <_printf_i+0x14c>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	07de      	lsls	r6, r3, #31
 800b430:	d508      	bpl.n	800b444 <_printf_i+0x14c>
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	6861      	ldr	r1, [r4, #4]
 800b436:	4299      	cmp	r1, r3
 800b438:	bfde      	ittt	le
 800b43a:	2330      	movle	r3, #48	; 0x30
 800b43c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b440:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b444:	1b52      	subs	r2, r2, r5
 800b446:	6122      	str	r2, [r4, #16]
 800b448:	f8cd a000 	str.w	sl, [sp]
 800b44c:	464b      	mov	r3, r9
 800b44e:	aa03      	add	r2, sp, #12
 800b450:	4621      	mov	r1, r4
 800b452:	4640      	mov	r0, r8
 800b454:	f7ff fee2 	bl	800b21c <_printf_common>
 800b458:	3001      	adds	r0, #1
 800b45a:	d14c      	bne.n	800b4f6 <_printf_i+0x1fe>
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	b004      	add	sp, #16
 800b462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b466:	4835      	ldr	r0, [pc, #212]	; (800b53c <_printf_i+0x244>)
 800b468:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b46c:	6829      	ldr	r1, [r5, #0]
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	f851 6b04 	ldr.w	r6, [r1], #4
 800b474:	6029      	str	r1, [r5, #0]
 800b476:	061d      	lsls	r5, r3, #24
 800b478:	d514      	bpl.n	800b4a4 <_printf_i+0x1ac>
 800b47a:	07df      	lsls	r7, r3, #31
 800b47c:	bf44      	itt	mi
 800b47e:	f043 0320 	orrmi.w	r3, r3, #32
 800b482:	6023      	strmi	r3, [r4, #0]
 800b484:	b91e      	cbnz	r6, 800b48e <_printf_i+0x196>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	f023 0320 	bic.w	r3, r3, #32
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	2310      	movs	r3, #16
 800b490:	e7b0      	b.n	800b3f4 <_printf_i+0xfc>
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	f043 0320 	orr.w	r3, r3, #32
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	2378      	movs	r3, #120	; 0x78
 800b49c:	4828      	ldr	r0, [pc, #160]	; (800b540 <_printf_i+0x248>)
 800b49e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4a2:	e7e3      	b.n	800b46c <_printf_i+0x174>
 800b4a4:	0659      	lsls	r1, r3, #25
 800b4a6:	bf48      	it	mi
 800b4a8:	b2b6      	uxthmi	r6, r6
 800b4aa:	e7e6      	b.n	800b47a <_printf_i+0x182>
 800b4ac:	4615      	mov	r5, r2
 800b4ae:	e7bb      	b.n	800b428 <_printf_i+0x130>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	6826      	ldr	r6, [r4, #0]
 800b4b4:	6961      	ldr	r1, [r4, #20]
 800b4b6:	1d18      	adds	r0, r3, #4
 800b4b8:	6028      	str	r0, [r5, #0]
 800b4ba:	0635      	lsls	r5, r6, #24
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	d501      	bpl.n	800b4c4 <_printf_i+0x1cc>
 800b4c0:	6019      	str	r1, [r3, #0]
 800b4c2:	e002      	b.n	800b4ca <_printf_i+0x1d2>
 800b4c4:	0670      	lsls	r0, r6, #25
 800b4c6:	d5fb      	bpl.n	800b4c0 <_printf_i+0x1c8>
 800b4c8:	8019      	strh	r1, [r3, #0]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	6123      	str	r3, [r4, #16]
 800b4ce:	4615      	mov	r5, r2
 800b4d0:	e7ba      	b.n	800b448 <_printf_i+0x150>
 800b4d2:	682b      	ldr	r3, [r5, #0]
 800b4d4:	1d1a      	adds	r2, r3, #4
 800b4d6:	602a      	str	r2, [r5, #0]
 800b4d8:	681d      	ldr	r5, [r3, #0]
 800b4da:	6862      	ldr	r2, [r4, #4]
 800b4dc:	2100      	movs	r1, #0
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f7f4 fe7e 	bl	80001e0 <memchr>
 800b4e4:	b108      	cbz	r0, 800b4ea <_printf_i+0x1f2>
 800b4e6:	1b40      	subs	r0, r0, r5
 800b4e8:	6060      	str	r0, [r4, #4]
 800b4ea:	6863      	ldr	r3, [r4, #4]
 800b4ec:	6123      	str	r3, [r4, #16]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4f4:	e7a8      	b.n	800b448 <_printf_i+0x150>
 800b4f6:	6923      	ldr	r3, [r4, #16]
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	47d0      	blx	sl
 800b500:	3001      	adds	r0, #1
 800b502:	d0ab      	beq.n	800b45c <_printf_i+0x164>
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	079b      	lsls	r3, r3, #30
 800b508:	d413      	bmi.n	800b532 <_printf_i+0x23a>
 800b50a:	68e0      	ldr	r0, [r4, #12]
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	4298      	cmp	r0, r3
 800b510:	bfb8      	it	lt
 800b512:	4618      	movlt	r0, r3
 800b514:	e7a4      	b.n	800b460 <_printf_i+0x168>
 800b516:	2301      	movs	r3, #1
 800b518:	4632      	mov	r2, r6
 800b51a:	4649      	mov	r1, r9
 800b51c:	4640      	mov	r0, r8
 800b51e:	47d0      	blx	sl
 800b520:	3001      	adds	r0, #1
 800b522:	d09b      	beq.n	800b45c <_printf_i+0x164>
 800b524:	3501      	adds	r5, #1
 800b526:	68e3      	ldr	r3, [r4, #12]
 800b528:	9903      	ldr	r1, [sp, #12]
 800b52a:	1a5b      	subs	r3, r3, r1
 800b52c:	42ab      	cmp	r3, r5
 800b52e:	dcf2      	bgt.n	800b516 <_printf_i+0x21e>
 800b530:	e7eb      	b.n	800b50a <_printf_i+0x212>
 800b532:	2500      	movs	r5, #0
 800b534:	f104 0619 	add.w	r6, r4, #25
 800b538:	e7f5      	b.n	800b526 <_printf_i+0x22e>
 800b53a:	bf00      	nop
 800b53c:	0800b9f8 	.word	0x0800b9f8
 800b540:	0800ba09 	.word	0x0800ba09

0800b544 <_sbrk_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d06      	ldr	r5, [pc, #24]	; (800b560 <_sbrk_r+0x1c>)
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f7f6 fbc0 	bl	8001cd4 <_sbrk>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_sbrk_r+0x1a>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_sbrk_r+0x1a>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20000840 	.word	0x20000840

0800b564 <siprintf>:
 800b564:	b40e      	push	{r1, r2, r3}
 800b566:	b500      	push	{lr}
 800b568:	b09c      	sub	sp, #112	; 0x70
 800b56a:	ab1d      	add	r3, sp, #116	; 0x74
 800b56c:	9002      	str	r0, [sp, #8]
 800b56e:	9006      	str	r0, [sp, #24]
 800b570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b574:	4809      	ldr	r0, [pc, #36]	; (800b59c <siprintf+0x38>)
 800b576:	9107      	str	r1, [sp, #28]
 800b578:	9104      	str	r1, [sp, #16]
 800b57a:	4909      	ldr	r1, [pc, #36]	; (800b5a0 <siprintf+0x3c>)
 800b57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b580:	9105      	str	r1, [sp, #20]
 800b582:	6800      	ldr	r0, [r0, #0]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	a902      	add	r1, sp, #8
 800b588:	f000 f8c4 	bl	800b714 <_svfiprintf_r>
 800b58c:	9b02      	ldr	r3, [sp, #8]
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
 800b592:	b01c      	add	sp, #112	; 0x70
 800b594:	f85d eb04 	ldr.w	lr, [sp], #4
 800b598:	b003      	add	sp, #12
 800b59a:	4770      	bx	lr
 800b59c:	200002d0 	.word	0x200002d0
 800b5a0:	ffff0208 	.word	0xffff0208

0800b5a4 <strcpy>:
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5aa:	f803 2b01 	strb.w	r2, [r3], #1
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d1f9      	bne.n	800b5a6 <strcpy+0x2>
 800b5b2:	4770      	bx	lr

0800b5b4 <memmove>:
 800b5b4:	4288      	cmp	r0, r1
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	eb01 0402 	add.w	r4, r1, r2
 800b5bc:	d902      	bls.n	800b5c4 <memmove+0x10>
 800b5be:	4284      	cmp	r4, r0
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	d807      	bhi.n	800b5d4 <memmove+0x20>
 800b5c4:	1e43      	subs	r3, r0, #1
 800b5c6:	42a1      	cmp	r1, r4
 800b5c8:	d008      	beq.n	800b5dc <memmove+0x28>
 800b5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5d2:	e7f8      	b.n	800b5c6 <memmove+0x12>
 800b5d4:	4402      	add	r2, r0
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	428a      	cmp	r2, r1
 800b5da:	d100      	bne.n	800b5de <memmove+0x2a>
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5e6:	e7f7      	b.n	800b5d8 <memmove+0x24>

0800b5e8 <__malloc_lock>:
 800b5e8:	4801      	ldr	r0, [pc, #4]	; (800b5f0 <__malloc_lock+0x8>)
 800b5ea:	f7ff bd1f 	b.w	800b02c <__retarget_lock_acquire_recursive>
 800b5ee:	bf00      	nop
 800b5f0:	20000834 	.word	0x20000834

0800b5f4 <__malloc_unlock>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	; (800b5fc <__malloc_unlock+0x8>)
 800b5f6:	f7ff bd1a 	b.w	800b02e <__retarget_lock_release_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	20000834 	.word	0x20000834

0800b600 <_realloc_r>:
 800b600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b604:	4680      	mov	r8, r0
 800b606:	4614      	mov	r4, r2
 800b608:	460e      	mov	r6, r1
 800b60a:	b921      	cbnz	r1, 800b616 <_realloc_r+0x16>
 800b60c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b610:	4611      	mov	r1, r2
 800b612:	f7ff bd8f 	b.w	800b134 <_malloc_r>
 800b616:	b92a      	cbnz	r2, 800b624 <_realloc_r+0x24>
 800b618:	f7ff fd20 	bl	800b05c <_free_r>
 800b61c:	4625      	mov	r5, r4
 800b61e:	4628      	mov	r0, r5
 800b620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b624:	f000 f976 	bl	800b914 <_malloc_usable_size_r>
 800b628:	4284      	cmp	r4, r0
 800b62a:	4607      	mov	r7, r0
 800b62c:	d802      	bhi.n	800b634 <_realloc_r+0x34>
 800b62e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b632:	d812      	bhi.n	800b65a <_realloc_r+0x5a>
 800b634:	4621      	mov	r1, r4
 800b636:	4640      	mov	r0, r8
 800b638:	f7ff fd7c 	bl	800b134 <_malloc_r>
 800b63c:	4605      	mov	r5, r0
 800b63e:	2800      	cmp	r0, #0
 800b640:	d0ed      	beq.n	800b61e <_realloc_r+0x1e>
 800b642:	42bc      	cmp	r4, r7
 800b644:	4622      	mov	r2, r4
 800b646:	4631      	mov	r1, r6
 800b648:	bf28      	it	cs
 800b64a:	463a      	movcs	r2, r7
 800b64c:	f7ff fcf0 	bl	800b030 <memcpy>
 800b650:	4631      	mov	r1, r6
 800b652:	4640      	mov	r0, r8
 800b654:	f7ff fd02 	bl	800b05c <_free_r>
 800b658:	e7e1      	b.n	800b61e <_realloc_r+0x1e>
 800b65a:	4635      	mov	r5, r6
 800b65c:	e7df      	b.n	800b61e <_realloc_r+0x1e>

0800b65e <__ssputs_r>:
 800b65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b662:	688e      	ldr	r6, [r1, #8]
 800b664:	429e      	cmp	r6, r3
 800b666:	4682      	mov	sl, r0
 800b668:	460c      	mov	r4, r1
 800b66a:	4690      	mov	r8, r2
 800b66c:	461f      	mov	r7, r3
 800b66e:	d838      	bhi.n	800b6e2 <__ssputs_r+0x84>
 800b670:	898a      	ldrh	r2, [r1, #12]
 800b672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b676:	d032      	beq.n	800b6de <__ssputs_r+0x80>
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	6909      	ldr	r1, [r1, #16]
 800b67c:	eba5 0901 	sub.w	r9, r5, r1
 800b680:	6965      	ldr	r5, [r4, #20]
 800b682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b68a:	3301      	adds	r3, #1
 800b68c:	444b      	add	r3, r9
 800b68e:	106d      	asrs	r5, r5, #1
 800b690:	429d      	cmp	r5, r3
 800b692:	bf38      	it	cc
 800b694:	461d      	movcc	r5, r3
 800b696:	0553      	lsls	r3, r2, #21
 800b698:	d531      	bpl.n	800b6fe <__ssputs_r+0xa0>
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7ff fd4a 	bl	800b134 <_malloc_r>
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	b950      	cbnz	r0, 800b6ba <__ssputs_r+0x5c>
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	f8ca 3000 	str.w	r3, [sl]
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ba:	6921      	ldr	r1, [r4, #16]
 800b6bc:	464a      	mov	r2, r9
 800b6be:	f7ff fcb7 	bl	800b030 <memcpy>
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	6126      	str	r6, [r4, #16]
 800b6d0:	6165      	str	r5, [r4, #20]
 800b6d2:	444e      	add	r6, r9
 800b6d4:	eba5 0509 	sub.w	r5, r5, r9
 800b6d8:	6026      	str	r6, [r4, #0]
 800b6da:	60a5      	str	r5, [r4, #8]
 800b6dc:	463e      	mov	r6, r7
 800b6de:	42be      	cmp	r6, r7
 800b6e0:	d900      	bls.n	800b6e4 <__ssputs_r+0x86>
 800b6e2:	463e      	mov	r6, r7
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	f7ff ff63 	bl	800b5b4 <memmove>
 800b6ee:	68a3      	ldr	r3, [r4, #8]
 800b6f0:	1b9b      	subs	r3, r3, r6
 800b6f2:	60a3      	str	r3, [r4, #8]
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	4433      	add	r3, r6
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e7db      	b.n	800b6b6 <__ssputs_r+0x58>
 800b6fe:	462a      	mov	r2, r5
 800b700:	f7ff ff7e 	bl	800b600 <_realloc_r>
 800b704:	4606      	mov	r6, r0
 800b706:	2800      	cmp	r0, #0
 800b708:	d1e1      	bne.n	800b6ce <__ssputs_r+0x70>
 800b70a:	6921      	ldr	r1, [r4, #16]
 800b70c:	4650      	mov	r0, sl
 800b70e:	f7ff fca5 	bl	800b05c <_free_r>
 800b712:	e7c7      	b.n	800b6a4 <__ssputs_r+0x46>

0800b714 <_svfiprintf_r>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	4698      	mov	r8, r3
 800b71a:	898b      	ldrh	r3, [r1, #12]
 800b71c:	061b      	lsls	r3, r3, #24
 800b71e:	b09d      	sub	sp, #116	; 0x74
 800b720:	4607      	mov	r7, r0
 800b722:	460d      	mov	r5, r1
 800b724:	4614      	mov	r4, r2
 800b726:	d50e      	bpl.n	800b746 <_svfiprintf_r+0x32>
 800b728:	690b      	ldr	r3, [r1, #16]
 800b72a:	b963      	cbnz	r3, 800b746 <_svfiprintf_r+0x32>
 800b72c:	2140      	movs	r1, #64	; 0x40
 800b72e:	f7ff fd01 	bl	800b134 <_malloc_r>
 800b732:	6028      	str	r0, [r5, #0]
 800b734:	6128      	str	r0, [r5, #16]
 800b736:	b920      	cbnz	r0, 800b742 <_svfiprintf_r+0x2e>
 800b738:	230c      	movs	r3, #12
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	e0d1      	b.n	800b8e6 <_svfiprintf_r+0x1d2>
 800b742:	2340      	movs	r3, #64	; 0x40
 800b744:	616b      	str	r3, [r5, #20]
 800b746:	2300      	movs	r3, #0
 800b748:	9309      	str	r3, [sp, #36]	; 0x24
 800b74a:	2320      	movs	r3, #32
 800b74c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b750:	f8cd 800c 	str.w	r8, [sp, #12]
 800b754:	2330      	movs	r3, #48	; 0x30
 800b756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b900 <_svfiprintf_r+0x1ec>
 800b75a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b75e:	f04f 0901 	mov.w	r9, #1
 800b762:	4623      	mov	r3, r4
 800b764:	469a      	mov	sl, r3
 800b766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76a:	b10a      	cbz	r2, 800b770 <_svfiprintf_r+0x5c>
 800b76c:	2a25      	cmp	r2, #37	; 0x25
 800b76e:	d1f9      	bne.n	800b764 <_svfiprintf_r+0x50>
 800b770:	ebba 0b04 	subs.w	fp, sl, r4
 800b774:	d00b      	beq.n	800b78e <_svfiprintf_r+0x7a>
 800b776:	465b      	mov	r3, fp
 800b778:	4622      	mov	r2, r4
 800b77a:	4629      	mov	r1, r5
 800b77c:	4638      	mov	r0, r7
 800b77e:	f7ff ff6e 	bl	800b65e <__ssputs_r>
 800b782:	3001      	adds	r0, #1
 800b784:	f000 80aa 	beq.w	800b8dc <_svfiprintf_r+0x1c8>
 800b788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b78a:	445a      	add	r2, fp
 800b78c:	9209      	str	r2, [sp, #36]	; 0x24
 800b78e:	f89a 3000 	ldrb.w	r3, [sl]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 80a2 	beq.w	800b8dc <_svfiprintf_r+0x1c8>
 800b798:	2300      	movs	r3, #0
 800b79a:	f04f 32ff 	mov.w	r2, #4294967295
 800b79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a2:	f10a 0a01 	add.w	sl, sl, #1
 800b7a6:	9304      	str	r3, [sp, #16]
 800b7a8:	9307      	str	r3, [sp, #28]
 800b7aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b7b0:	4654      	mov	r4, sl
 800b7b2:	2205      	movs	r2, #5
 800b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b8:	4851      	ldr	r0, [pc, #324]	; (800b900 <_svfiprintf_r+0x1ec>)
 800b7ba:	f7f4 fd11 	bl	80001e0 <memchr>
 800b7be:	9a04      	ldr	r2, [sp, #16]
 800b7c0:	b9d8      	cbnz	r0, 800b7fa <_svfiprintf_r+0xe6>
 800b7c2:	06d0      	lsls	r0, r2, #27
 800b7c4:	bf44      	itt	mi
 800b7c6:	2320      	movmi	r3, #32
 800b7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7cc:	0711      	lsls	r1, r2, #28
 800b7ce:	bf44      	itt	mi
 800b7d0:	232b      	movmi	r3, #43	; 0x2b
 800b7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7da:	2b2a      	cmp	r3, #42	; 0x2a
 800b7dc:	d015      	beq.n	800b80a <_svfiprintf_r+0xf6>
 800b7de:	9a07      	ldr	r2, [sp, #28]
 800b7e0:	4654      	mov	r4, sl
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f04f 0c0a 	mov.w	ip, #10
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ee:	3b30      	subs	r3, #48	; 0x30
 800b7f0:	2b09      	cmp	r3, #9
 800b7f2:	d94e      	bls.n	800b892 <_svfiprintf_r+0x17e>
 800b7f4:	b1b0      	cbz	r0, 800b824 <_svfiprintf_r+0x110>
 800b7f6:	9207      	str	r2, [sp, #28]
 800b7f8:	e014      	b.n	800b824 <_svfiprintf_r+0x110>
 800b7fa:	eba0 0308 	sub.w	r3, r0, r8
 800b7fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b802:	4313      	orrs	r3, r2
 800b804:	9304      	str	r3, [sp, #16]
 800b806:	46a2      	mov	sl, r4
 800b808:	e7d2      	b.n	800b7b0 <_svfiprintf_r+0x9c>
 800b80a:	9b03      	ldr	r3, [sp, #12]
 800b80c:	1d19      	adds	r1, r3, #4
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	9103      	str	r1, [sp, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	bfbb      	ittet	lt
 800b816:	425b      	neglt	r3, r3
 800b818:	f042 0202 	orrlt.w	r2, r2, #2
 800b81c:	9307      	strge	r3, [sp, #28]
 800b81e:	9307      	strlt	r3, [sp, #28]
 800b820:	bfb8      	it	lt
 800b822:	9204      	strlt	r2, [sp, #16]
 800b824:	7823      	ldrb	r3, [r4, #0]
 800b826:	2b2e      	cmp	r3, #46	; 0x2e
 800b828:	d10c      	bne.n	800b844 <_svfiprintf_r+0x130>
 800b82a:	7863      	ldrb	r3, [r4, #1]
 800b82c:	2b2a      	cmp	r3, #42	; 0x2a
 800b82e:	d135      	bne.n	800b89c <_svfiprintf_r+0x188>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	1d1a      	adds	r2, r3, #4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	9203      	str	r2, [sp, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bfb8      	it	lt
 800b83c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b840:	3402      	adds	r4, #2
 800b842:	9305      	str	r3, [sp, #20]
 800b844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b910 <_svfiprintf_r+0x1fc>
 800b848:	7821      	ldrb	r1, [r4, #0]
 800b84a:	2203      	movs	r2, #3
 800b84c:	4650      	mov	r0, sl
 800b84e:	f7f4 fcc7 	bl	80001e0 <memchr>
 800b852:	b140      	cbz	r0, 800b866 <_svfiprintf_r+0x152>
 800b854:	2340      	movs	r3, #64	; 0x40
 800b856:	eba0 000a 	sub.w	r0, r0, sl
 800b85a:	fa03 f000 	lsl.w	r0, r3, r0
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	4303      	orrs	r3, r0
 800b862:	3401      	adds	r4, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86a:	4826      	ldr	r0, [pc, #152]	; (800b904 <_svfiprintf_r+0x1f0>)
 800b86c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b870:	2206      	movs	r2, #6
 800b872:	f7f4 fcb5 	bl	80001e0 <memchr>
 800b876:	2800      	cmp	r0, #0
 800b878:	d038      	beq.n	800b8ec <_svfiprintf_r+0x1d8>
 800b87a:	4b23      	ldr	r3, [pc, #140]	; (800b908 <_svfiprintf_r+0x1f4>)
 800b87c:	bb1b      	cbnz	r3, 800b8c6 <_svfiprintf_r+0x1b2>
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	3307      	adds	r3, #7
 800b882:	f023 0307 	bic.w	r3, r3, #7
 800b886:	3308      	adds	r3, #8
 800b888:	9303      	str	r3, [sp, #12]
 800b88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88c:	4433      	add	r3, r6
 800b88e:	9309      	str	r3, [sp, #36]	; 0x24
 800b890:	e767      	b.n	800b762 <_svfiprintf_r+0x4e>
 800b892:	fb0c 3202 	mla	r2, ip, r2, r3
 800b896:	460c      	mov	r4, r1
 800b898:	2001      	movs	r0, #1
 800b89a:	e7a5      	b.n	800b7e8 <_svfiprintf_r+0xd4>
 800b89c:	2300      	movs	r3, #0
 800b89e:	3401      	adds	r4, #1
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	f04f 0c0a 	mov.w	ip, #10
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ae:	3a30      	subs	r2, #48	; 0x30
 800b8b0:	2a09      	cmp	r2, #9
 800b8b2:	d903      	bls.n	800b8bc <_svfiprintf_r+0x1a8>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0c5      	beq.n	800b844 <_svfiprintf_r+0x130>
 800b8b8:	9105      	str	r1, [sp, #20]
 800b8ba:	e7c3      	b.n	800b844 <_svfiprintf_r+0x130>
 800b8bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e7f0      	b.n	800b8a8 <_svfiprintf_r+0x194>
 800b8c6:	ab03      	add	r3, sp, #12
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <_svfiprintf_r+0x1f8>)
 800b8ce:	a904      	add	r1, sp, #16
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	f3af 8000 	nop.w
 800b8d6:	1c42      	adds	r2, r0, #1
 800b8d8:	4606      	mov	r6, r0
 800b8da:	d1d6      	bne.n	800b88a <_svfiprintf_r+0x176>
 800b8dc:	89ab      	ldrh	r3, [r5, #12]
 800b8de:	065b      	lsls	r3, r3, #25
 800b8e0:	f53f af2c 	bmi.w	800b73c <_svfiprintf_r+0x28>
 800b8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8e6:	b01d      	add	sp, #116	; 0x74
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4b06      	ldr	r3, [pc, #24]	; (800b90c <_svfiprintf_r+0x1f8>)
 800b8f4:	a904      	add	r1, sp, #16
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f7ff fcfe 	bl	800b2f8 <_printf_i>
 800b8fc:	e7eb      	b.n	800b8d6 <_svfiprintf_r+0x1c2>
 800b8fe:	bf00      	nop
 800b900:	0800ba1a 	.word	0x0800ba1a
 800b904:	0800ba24 	.word	0x0800ba24
 800b908:	00000000 	.word	0x00000000
 800b90c:	0800b65f 	.word	0x0800b65f
 800b910:	0800ba20 	.word	0x0800ba20

0800b914 <_malloc_usable_size_r>:
 800b914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b918:	1f18      	subs	r0, r3, #4
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	bfbc      	itt	lt
 800b91e:	580b      	ldrlt	r3, [r1, r0]
 800b920:	18c0      	addlt	r0, r0, r3
 800b922:	4770      	bx	lr

0800b924 <_init>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr

0800b930 <_fini>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr
